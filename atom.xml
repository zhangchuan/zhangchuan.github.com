<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[研究中心]]></title>
  <link href="http://zhangchuan.github.com/atom.xml" rel="self"/>
  <link href="http://zhangchuan.github.com/"/>
  <updated>2012-03-06T16:45:53+08:00</updated>
  <id>http://zhangchuan.github.com/</id>
  <author>
    <name><![CDATA[Cloud.Zhang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[redis 入门手册]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/03/06/160015-redis/"/>
    <updated>2012-03-06T16:00:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/03/06/160015-redis</id>
    <content type="html"><![CDATA[<ul>
<li><h1>数据类型</h1></li>
<li><h2>Redis的Key</h2></li>
<li>Redis的key是字符串类型</li>
<li>  exits key 检测指定 key 是否存在，返回 1 表示存在，0 不存在</li>
<li>  del key1 key2 &#8230;&#8230; keyN 删除给定 key,返回删除 key 的数目，0 表示给定 key 都不存在</li>
<li>  type key 返回给定 key 值的类型。 返回 none 表示 key 不存在,string 字符类型， list 链表类型 set 无序集合类型&#8230;&#8230;</li>
<li>  keys pattern 返回匹配指定模式的所有 key</li>
<li>  randomkey 返回从当前数据库中随机选择的一个 key,如果当前数据库是空的，返回空串</li>
<li>  rename oldkey newkey 重命名一个 key,如果 newkey 存在，将会被覆盖，返回 1 表示成功，0 失败。可能是 oldkey 不存在或者和 newkey 相同。</li>
<li>  renamenx oldkey newkey 同上，但是如果 newkey 存在返回失败。</li>
<li>  expire key seconds 为 key 指定过期时间，单位是秒。返回 1 成功，0 表示 key 已经设置过过期时间或者不存在。</li>
<li>  ttl key 返回设置过过期时间key的剩余过期秒数。-1表示key不存在或者未设置过期时间。</li>
<li>  select db-index 通过索引选择数据库，默认连接的数据库是 0,默认数据库数是 16 个。返回 1表示成功，0 失败。</li>
<li>  move key db-index 将 key 从当前数据库移动到指定数据库。返回 1 表示成功。0 表示 key
不存在或者已经在指定数据库中。</li>
<li><h2>Redis的vaule</h2></li>
<li>Redis提供五种数据类型: string, hash, list, set及sorted set</li>
<li>string 类型数据操作指令简介</li>
<li>  set key value 设置 key 对应 string 类型的值，返回 1 表示成功，0 失败。</li>
<li>  setnx key value 如果 key 不存在，设置 key 对应 string 类型的值。如果 key 已经存在，返回 0。</li>
<li>  get key 获取 key 对应的 string 值,如果 key 不存在返回 nil</li>
<li>  getset key value 先获取 key 的值，再设置 key 的值。如果 key 不存在返回 nil。</li>
<li>  mget key1 key2 &#8230;&#8230; keyN 一次获取多个 key 的值，如果对应 key 不存在，则对应返回 nil。</li>
<li>  mset key1 value1 &#8230;&#8230; keyN valueN 一次设置多个 key 的值， 成功返回 1 表示所有的值都设置了，失败返回 0 表示没有任何值被设置。</li>
<li>  msetnx key1 value1 &#8230;&#8230; keyN valueN 一次设置多个 key 的值，但是不会覆盖已经存在的 key</li>
<li>  incr key 对 key 的值做++操作，并返回新的值。注意 incr 一个不是 int 的 value 会返回错误，incr 一个不存在的 key，则设置 key 值为 1。</li>
<li>  decr key 对 key 的值做&#8211;操作，decr 一个不存在 key，则设置 key 值为-1。</li>
<li>  incrby key integer 对 key 加上指定值 ，key 不存在时候会设置 key，并认为原来的 value是 0。</li>
<li>  decrby key integer 对 key 减去指定值。 decrby 完全是为了可读性， 我们完全可以通过 incrby一个负值来实现同样效果，反之一样。</li>
<li>hash 类型数据操作指令简介</li>
<li>  hset key field value 设置 hash field 为指定值，如果 key 不存在，则创建</li>
<li>  hget key field 获取指定的 hash field。</li>
<li>  hmget key filed1&#8230;.fieldN 获取全部指定的 hash filed。</li>
<li>  hmset key filed1 value1 &#8230;&#8230; filedN valueN 同时设置 hash 的多个 field。</li>
<li>  hincrby key field integer 将指定的 hash filed 加上指定值。成功返回 hash filed 变更后的值。</li>
<li>  hexists key field 检测指定 field 是否存在。</li>
<li>  hdel key field 删除指定的 hash field。</li>
<li>  hlen key 返回指定 hash 的 field 数量。</li>
<li>  hkeys key 返回 hash 的所有 field。</li>
<li>  hvals key 返回 hash 的所有 value。</li>
<li>  hgetall 返回 hash 的所有 filed 和 value</li>
<li>List 类型数据操作指令简介</li>
<li>  lpush key string 在 key 对应 list 的头部添加字符串元素，返回 1 表示成功，0 表示 key 存在且不是 list 类型。</li>
<li>  rpush key string 在 key 对应 list 的尾部添加字符串元素。</li>
<li>  llen key 返回 key 对应 list 的长度，如果 key 不存在返回 0，如果 key 对应类型不是 list返回错误。</li>
<li>  lrange key start end 返回指定区间内的元素，下标从 0 开始，负值表示从后面计算，-1 表示倒数第一个元素 ，key 不存在返回空列表。</li>
<li>  ltrim key start end 截取 list 指定区间内元素，成功返回 1，key 不存在返回错误。</li>
<li>  lset key index value 设置 list 中指定下标的元素值，成功返回 1，key 或者下标不存在返回错误。</li>
<li>  lrem key count value从 List 的头部 （count正数） 或尾部 （count负数） 删除一定数量 （count）匹配 value 的元素，返回删除的元素数量。count 为 0 时候删除全部。</li>
<li>  lpop key 从 list 的头部删除并返回删除元素。 如果 key 对应 list 不存在或者是空返回 nil，如果 key 对应值不是 list 返回错误。</li>
<li>  rpop key 从 list 的尾部删除并返回删除元素。</li>
<li>  blpop key1 &#8230;&#8230; keyN timeout 从左到右扫描， 返回对第一个非空 list 进行 lpop 操作并返回，比如 blpop list1 list2 list3 0 ,如果 list 不存在 list2,list3 都是非空则对 list2 做lpop 并返回从 list2 中删除的元素。如果所有的 list 都是空或不存在，则会阻塞 timeout秒，timeout 为 0 表示一直阻塞。当阻塞时，如果有 client 对 key1&#8230;keyN 中的任意 key进行 push 操作，则第一在这个 key 上被阻塞的 client 会立即返回。如果超时发生，则返回nil。有点像 unix 的 select 或者 poll。</li>
<li>  brpop 同 blpop，一个是从头部删除一个是从尾部删除。</li>
<li>set 类型数据操作指令简介</li>
<li>  sadd key member 添加一个 string 元素到 key 对应 set 集合中，成功返回 1,如果元素以及在集合中则返回 0，key 对应的 set 不存在则返回错误。</li>
<li>  srem key member 从 key 对应 set 中移除指定元素，成功返回 1，如果 member 在集合中不存在或者 key 不存在返回 0，如果 key 对应的不是 set 类型的值返回错误。</li>
<li>  spop key 删除并返回 key 对应 set 中随机的一个元素,如果 set 是空或者 key 不存在返回nil。</li>
<li>  srandmember key 同 spop，随机取 set 中的一个元素，但是不删除元素。</li>
<li>  smove srckey dstkey member 从srckey对应set中移除member并添加到dstkey对应set中，整个操作是原子的。成功返回 1,如果 member 在 srckey 中不存在返回 0，如果 key 不是 set类型返回错误。</li>
<li>  scard key 返回 set 的元素个数，如果 set 是空或者 key 不存在返回 0。</li>
<li>  sismember key member 判断 member 是否在 set 中，存在返回 1，0 表示不存在或者 key 不存在。</li>
<li>  sinter key1 key2 …… keyN 返回所有给定 key 的交集。</li>
<li>  sinterstore dstkey key1 &#8230;&#8230;. keyN 返回所有给定 key 的交集，并保存交集存到 dstkey 下。</li>
<li>  sunion key1 key2 &#8230;&#8230; keyN 返回所有给定 key 的并集。</li>
<li>  sunionstore dstkey key1 &#8230;&#8230; keyN 返回所有给定 key 的并集，并保存并集到 dstkey 下。</li>
<li>  sdiff key1 key2 &#8230;&#8230; keyN 返回所有给定 key 的差集。</li>
<li>  sdiffstore dstkey key1 &#8230;&#8230; keyN 返回所有给定 key 的差集，并保存差集到 dstkey 下。</li>
<li>  smembers key 返回 key 对应 set 的所有元素，结果是无序的。</li>
<li>Sorted Set 类型数据操作指令简介</li>
<li>  add key score member 添加元素到集合，元素在集合中存在则更新对应 score。</li>
<li>  zrem key member 删除指定元素，1 表示成功，如果元素不存在返回 0。</li>
<li>  zincrby key incr member 增加对应 member 的 score 值， 然后移动元素并保持 skip list 保持有序。返回更新后的 score 值。</li>
<li>  zrank key member 返回指定元素在集合中的排名（下标） ，集合中元素是按 score 从小到大排序的。</li>
<li>  zrevrank key member 同上,但是集合中元素是按 score 从大到小排序。</li>
<li>  zrange key start end 类似 lrange 操作从集合中去指定区间的元素。返回的是有序结果</li>
<li>  zrevrange key start end 同上，返回结果是按 score 逆序的。</li>
<li>  zrangebyscore key min max 返回集合中 score 在给定区间的元素。</li>
<li>  zcount key min max 返回集合中 score 在给定区间的数量。</li>
<li>  zcard key 返回集合中元素个数。</li>
<li>  zscore key element 返回给定元素对应的 score。</li>
<li>  zremrangebyrank key min max 删除集合中排名在给定区间的元素。</li>
<li>  zremrangebyscore key min max 删除集合中 score 在给定区间的元素</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 参考手册 第4章]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/03/06/150903-python/"/>
    <updated>2012-03-06T15:09:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/03/06/150903-python</id>
    <content type="html"><![CDATA[<h1>第4章 运算符和表达式</h1>

<ul>
<li><a href="#3.1">3.1 术语</a></li>
<li><a href="#3.2">3.2 对象的身份与类型</a></li>
<li><a href="#3.3">3.3 引用计数与垃圾收集</a></li>
<li><a href="#3.4">3.4 引用与复制</a></li>
<li><a href="#3.5">3.5 第一类对象</a></li>
<li><a href="#3.6">3.6 表示数据的内置类型</a></li>
<li><a href="#3.7">3.7 表示程序结构的内置类型</a></li>
<li><a href="#3.8">3.8 解释器内部使用的内置类型</a></li>
<li><a href="#3.9">3.9 对象行为与特殊方法</a></li>
</ul>


<h1 id=4.1>4.1 数字操作</h1>


<ul>
<li>+(加), -(减),*(乘), /(除), //(地板除), **(乘方), %(去模), -(一元减法), +(一元加法)</li>
<li>&lt;&lt;(左移), >>(右移), &amp;(位与), |(位或), ^(异或), ~(一元位反)</li>
<li>&lt;(小于), >(大于), ==(等于), !=(不等于), >=(大于等于), &lt;=(小于等于)</li>
<li>不同数字类型的转换规则: 复数->浮点->整数</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RabbitMQ 消息队列应用]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/03/02/091722-rabbitmq/"/>
    <updated>2012-03-02T09:17:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/03/02/091722-rabbitmq</id>
    <content type="html"><![CDATA[<ul>
<li><h1>兔子和兔子窝</h1></li>
<li><p>AMQP概念</p></li>
<li>虚拟主机(virtual host), 交换机(exchange), 队列(queue), 绑定(binding)</li>
<li>一个虚拟主机持有一组交换机, 队列和绑定, 多个虚拟主机用于访问控制</li>
<li>队列是装消息的容器, 直到客户端将其消息取走, 否则消息一直在队列中, 必须通过程序去建立, 然后等待放入消息</li>
<li>交换机可以理解成具有路由表都路由程序, 每个消息有一个路由键的属性, 交换机中有一系列绑定, 即路由规则</li>
<li>一个绑定就是一个基于路由键将交换机和队列连接起来的路由规则, 交换机是由绑定构成都路由表</li>
<li>Fanout Exchange 不处理路由键</li>
<li>Direct Exchange 完整匹配路由键</li>
<li>Topic Exchange  将路由键盘和某模式进行匹配, #匹配一个或多个词, *匹配不多不少一个词</li>
<li>消息都持久化</li>
<li>1 将交换机设置成durable</li>
<li>2 将队列设置成durable</li>
<li><p>3 将消息的Delivery Mode设置成2</p></li>
<li><p>兔子和蛇</p>

<pre><code># easy_install amqplib
from amqplib import client_0_8 as amqp
conn = amqp.Connection(host="localhost:5672", userid="guest", 
password="guest", virtual_host="/", insist=False)
# 可以使用.channel(x)来指定channel标识, 不过不建议
chan = conn.channel()

# 消费者consumer
# 创建一个po_box队列, exclusive私有队列
chan.queue_declare(queue="po_box", durable=True, exclusive=False, 
auto_delete=False)
# 创建一个sorting_room交换机, type交换机的类型
chan.exchange_declare(exchange="sorting_room", type="direct", 
durable=True, auto_delete=False,)
# 创建绑定, 让具有路由键"jason"的消息被路由到名为"po_box"的交换机
chan.queue_bind(queue="po_box", exchange="sorting_room", 
routing_key="jason")
# 应用程序在消息到达的时候立刻得到通知, 需要用chan.basic_consume()注册
# 一个新消息到达的回调
def recv_callback(msg):
    print 'Received: ' + msg.body + ' from channel #' + \
    str(msg.channel.channel_id)
chan.basic_consume(queue='po_box', no_ack=True, callback=recv_callback, 
consumer_tag="testtag")
while True:
    chan.wait()
chan.basic_cancel("testtag")
chan.close()
conn.close()
</code></pre></li>
<li><p><a href="http://simple-is-better.com/news/353">参考资料: 兔子和兔子窝</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB权威指南 7]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/03/01/154153-mongodb/"/>
    <updated>2012-03-01T15:41:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/03/01/154153-mongodb</id>
    <content type="html"><![CDATA[<ul>
<li>7.1 数据库命令</li>
<li>7.1.1 命令行的工作原理

<pre><code>&gt; db.test.drop()
&gt; db.runCommand({"drop": "test"});
# 如果"ok"的值是true, 代表命令成功运行, 如果为false, 代表命令执行出了问题.
</code></pre></li>
<li>7.1.2 命令参考

<pre><code># 获得所有命令的最新列表
&gt; db.listCommands()
http://localhost:28017/_commands
# 返回MongoDB服务器的版本号和主机的操作系统
. buildInfo
&gt; {"buildInfo": 1}
# 返回指定集合的统计信息, 包括数据大小, 已分配的存储空间和索引大小
. collStats
&gt; {"collStats": collection}
# 列出指定集合中满足查询条件的文档的指定键的所有不同值
. distinct
&gt; {"distinct": collection, "key": key, "query": query}
# 删除集合的所有数据
. drop
&gt; {"drop": collection}
# 删除当前数据库的所有数据
. dropDatabase
&gt; {"dropDatabase": 1}
# 删除集合里面名称为name的索引, 如果名称为"*", 则删除全部索引
. dropIndexes
&gt; {"dropIndexes": collection, "index": name}
# findAndModify参考第3章
. findAndModify
# 查看对本集合执行最后一次操作的错误信息. 在w台服务器复制集合的最后操作前, 这个命令会阻塞
. getlastError
{"getLastError": 1[, "w": w[, "wtimeout": timeout]]}
# 检查服务器是主还是从服务器
. isMaster
{"isMaster": 1}
# 返回所有可以在服务器上运行的命令和相关信息
. ListCommands
{"listCommands": 1}
# 列出服务器上所有数据库
. listDatabases
{"listDatabases": 1}
# 检查服务器连接是否正常
. ping
{"ping": 1}
# 将集合a重命名为b, a,b必须是完整的名称空间命名
. renameCollection
{"renameCollection": a, "to": b}
# 修复并压缩当前数据库, 这个操作非常耗时
. repairDatabase
{"repairDatabase": 1}
# 返回这台服务器的管理统计信息
. serverStatus
{"serverStatus": 1}
</code></pre></li>
<li>7.2 固定集合

<pre><code>固定集合像环形队列, 空间需要预先分配, 如果空间不足, 最早的文档就会自动删除.
默认情况下固定集合没有索引
</code></pre></li>
<li>7.2.1 属性及用法

<pre><code>在做插入操作时, 无需额外分配空间. 所以固定集合进行插入速度极快.
按照插入顺序输出的查询速度极快, 因为文档本身是按顺序存储的
适合日志应用场景
</code></pre></li>
<li>7.2.2 创建固定集合

<pre><code># 创建一个固定集合my_collection, 大小是100000字节
&gt; db.createCollection("my_collection", {capped: true, size: 100000});
# 指定文档数量的上限
&gt; db.createCollection("my_collection", {capped: true, size: 100000, max: 100});
# 转换已经普通集合为固定集合
&gt; db.runCommand({convertToCapped: "test", size: 10000});
</code></pre></li>
<li>7.2.3 自然排序

<pre><code>自然排序就是文档在磁盘上的顺序
# 可以使用自然排序按照反向插入的顺序排序
&gt; db.my_collection.find().sort({"$natural": -1})
</code></pre></li>
<li>7.2.4 尾部游标</li>
<li>7.3 GridFS: 存储文件

<pre><code>简化需求
直接利用已建立的复制或分片机制
不产生磁盘碎片, MongoDB以2GB分配文件空间
</code></pre></li>
<li>7.3.1 开始使用GridFS: mongofiles

<pre><code># 上传文件
$ mongofiles put foo.txt
# 查看文件
$ mongofiles list
# 下载文件
$ mongofiles get foo.txt
# 查找文件
$ mongofiles search foo.txt
# 删除文件
$ mongofiles delete foo.txt
</code></pre></li>
<li>7.3.2 通过MongoDB驱动程序操作GirdFS

<pre><code>from pymongo import Connection
import gridfs
db = Connection().test
fs = gridfs.GridFS(db)
file_id = fs.put("Hello, World", filename = "foo.txt")
fs.list()
fs.get(file_id).read()
</code></pre></li>
<li>7.3.3 内部原理

<pre><code>GridFS将大文件分成很多块, 每块作为一个单独的文档存储.
# fs.files
. _id
文件的唯一id, 在块中作为"files_id"键的值存储
. length
文件内容总的字节数
. chunkSize
每块的大小, 以字节为单位. 默认是256K, 必要时可以调整
. uploadDate
文件存入GridFS的时间戳
. md5
文件内容的md5校验和, 由服务器端生成
# distint获取GridFS中不重复的文件名列表
&gt; db.fs.files.distinct("filename")
</code></pre></li>
<li>7.4 服务器端脚本</li>
<li>7.4.1 db.eval

<pre><code>利用db.eval可以在MongoDB服务器端执行任意的JavaScript脚本
db.eval可以用来模拟多事物: db.eval锁住数据库, 然后执行JavaScript, 再解锁
&gt; db.eval("function(u) { print('Hello, '+u+'!'); }", [username]) 
&gt; db.eval("function(x,y,z) { return x+y+z;}", [num1,num2,num3])
</code></pre></li>
<li>7.4.2 存储JavaScript

<pre><code>&gt; db.system.js.insert({"_id": "x", "value": 1}) 
&gt; db.system.js.insert({"_id": "x", "value": 2}) 
&gt; db.system.js.insert({"_id": "x", "value": 3}) 
# 对其求和
&gt; db.eval("return x+y+z;")
</code></pre></li>
<li>7.5 数据库引用</li>
<li>7.5.1 什么是DBRef

<pre><code># DBRef就像URL, 唯一确定一个到文档的应用
# "$ref", "$id"为必选, "$db"为可选
{"$ref": collection, "$id": id_value} 
{"$ref": collection, "$id": id_value, "$db": database}
</code></pre></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongDB权威指南 6]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/03/01/142455-mongodb/"/>
    <updated>2012-03-01T14:24:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/03/01/142455-mongodb</id>
    <content type="html"><![CDATA[<ul>
<li>6.1 count

<pre><code># count是最简单的聚合工具, 返回集合中的文档数量
&gt; db.foo.count()
&gt; db.foo.insert({"x": 1})
&gt; db.foo.count()
&gt; db.foo.count({"x": 1})
</code></pre></li>
<li>6.2 distinct

<pre><code># distinct是用来找出给定键的所有不同值, 使用时必须指定集合和键
&gt; db.runCommand({"distinct": "people", "key": "age"})
</code></pre></li>
<li>6.3 group

<pre><code># group 先根据选定的键, 将集合依据选定键值的不同分成若干组, 然后通过聚合每一组的文档, 产生一个结果文档
{"day": "2010/10/03", "time": "10/3/2010 03:57:01 GMT-400", "price": 4.23}
{"day": "2010/10/04", "time": "10/4/2010 11:28:39 GMT-400", "price": 4.27}
{"day": "2010/10/03", "time": "10/3/2010 05:00:23 GMT-400", "price": 4.10}
{"day": "2010/10/06", "time": "10/6/2010 05:57:58 GMT-400", "price": 4.30}
{"day": "2010/10/04", "time": "10/3/2010 08:34:50 GMT-400", "price": 4.01}
# 获得近30天的收盘价
{"day": "2010/10/03", "time": "10/3/2010 05:00:23 GMT-400", "price": 4.10}
{"day": "2010/10/04", "time": "10/4/2010 11:28:39 GMT-400", "price": 4.27}
{"day": "2010/10/06", "time": "10/6/2010 05:57:58 GMT-400", "price": 4.30}
&gt; db.runCommand({"group": {
"ns": "stocks",
"key": "day",
"initial": {"time": 0},
"$reduce": function(doc, prev) {
    if (doc.time &gt; prev.time) {
        prev.price = doc.price;
        prev.time = doc.time;
    }},
"condition": {"day": {"$gt": "2010/09/30"}}
}})
# "ns": "stocks"
# 指定要进行分组的集合
# "key": "day"
# 指定文档分组依据的键. 所有"day"值相同的文档被划分到一组
# "initial": {"time": 0}
# 每一组reduce函数调用的初始时间
# "$reduce": function(doc, prev) { ... }
# 每个文档对应一次这个调用, 系统会传递两个参数: 当前文档和累加其文档. 
# "condition": {"day": {"$gt": "2010/09/30"}}
</code></pre></li>
<li>6.3.1 使用完成器

<pre><code># 博客系统, 每篇文章有多个标签, 现在要找出每天最热点的标签, 可以再一次按天分组, 为每一个标签计数
&gt; db.posts.group({
"key": {"tags": true},
"initial": {"tags": {}},
"$reduce": function(doc, prev) {
    for (i in doc.tags) {
        if (doc.tags[i] in prev.tags) {
            prev.tags[doc.tags[i]]++;
        } else {
            prev.tags[doc.tags[i]] = 1;
        }
    }
}})
# "finalize"附带一个函数, 在每组结果传递到客户端之前被调用一次. 可处理结果的残枝败叶
&gt; db.posts.group({
"key": {"tags": true},
"initial": {"tags": {}},
"$reduce": function(doc, prev) {
    for (i in doc.tags) {
        if (doc.tags[i] in prev.tags) {
            prev.tags[doc.tags[i]]++;
        } else {
            prev.tags[doc.tags[i]] = 1;
        }
    },
"finalize": function(prev) {
    var mostPopular = 0;
    for (i in prev.tags) {
        if (prev.tags[i] &gt; mostPopular) {
            prev.tag = i;
            mostPopular = prev.tags[i];
        }
    }
    delete.prev.tags
}})
</code></pre></li>
<li>6.3.2 将函数做为键使用

<pre><code>&gt; db.posts.group({"ns": "posts",
"$keyf": function(x) { return x.category.toLowerCase(); },
"initializer": ... })
</code></pre></li>
<li>6.4 MapReduce</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB权威指南 5]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/03/01/104304-mongodb/"/>
    <updated>2012-03-01T10:43:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/03/01/104304-mongodb</id>
    <content type="html"><![CDATA[<ul>
<li>5.1 索引简介

<pre><code>&gt; db.people.find({"username": "mark"})
# 对"username"建立索引
&gt; db.people.ensureIndex({"username": 1})
# 同样的索引只需创建一次, 已创建的索引会加速该键的查询, 对其他查询并没有帮助, 如下
# 同时尽量避免让服务器做表扫描, 在集合很大时会很慢
&gt; db.people.find({"data": data1}).sort({"data": 1, "username": 1})
# 针对上例创建的索引, 在多键索引时应考虑索引创建的方向(升序1,降序-1)
&gt; db.ensureIndex({"data": 1, "username": 1})
# 多键索引可以利用前部索引
&gt; {"a":1, "b":1, "c":1, ..., "z":1}
#实际上会有{"a":1},{"a":1, "b":1},{"a":1, "b":1, "c":1}等的索引
# MongoDB的查询优化器会重排查询项的顺序, 但缺点是每次插入,更新和删除时会产生额外开销
# 要是查询要返回集合一半以上的结果, 用表扫描要比索引更高校.
</code></pre></li>
<li>5.1.1 扩展索引

<pre><code>&gt; db.status.ensureIndex({user: 1, data: -1})
# 如果内存放不下所有索引, 会非常慢, 改变索引顺序, 将最后几天的索引保存在内存, 减少内存交换, 这样查询任何用户的状态都会快很多
&gt; db.status.ensureIndex({data: -1, user: 1})
# 创建索引应考虑
1) 会做什么样的查询? 其中哪些键需要索引?
2) 每个键的索引方向是怎样的?
3) 如何应对扩展? 有没有种不同的键的排列可以使常用数据更多地保留在内存中?
</code></pre></li>
<li>5.1.2 索引内嵌文档中的键

<pre><code># 对内嵌文档的额索引与普通键索引并无差异, 两者也可以联合组成复合索引
&gt; db.blog.ensureIndex({"comments.date": 1})
</code></pre></li>
<li>5.1.3 为排序创建索引

<pre><code># 需要针对查询中大量的排序做索引, 如果没有索引的键调用sort, MongoDB需要将所有的数据提取到内存来排序.
</code></pre></li>
<li>5.1.4 索引名称

<pre><code># 集合中的每个索引都有一个字符串类型的名字, 来唯一标识索引. 可以通过ensureIndex选项制定自定义的名字
&gt; db.foo.ensureIndex({"a":1, "b":1, "c":1, ..., "z":1}, {"name":"alphabet"})
</code></pre></li>
<li>5.2 唯一索引

<pre><code># 唯一索引可以确保集合的每一个文档的指定键都有唯一值
&gt; db.people.ensureIndex({"username": 1}, {"unique": true})
</code></pre></li>
<li>5.2.1 消除重复

<pre><code># 创建索引时, 将所有所有包含重复值的文档都删掉
&gt; db.people.ensureIndex({"username": 1}, {"unique": true, "dropDups": true})
</code></pre></li>
<li>5.2.2 复合唯一索引

<pre><code># 单个键可以相同, 所有键盘组合起来不同
&gt; {files_id: ObjectID("4b23c3ca7525f35f94b60a2d"), n: 1}
&gt; {files_id: ObjectID("4b23c3ca7525f35f94b60a2d"), n: 2}
&gt; {files_id: ObjectID("4b23c3ca7525f35f94b60a2d"), n: 3}
&gt; {files_id: ObjectID("4b23c3ca7525f35f94b60a2d"), n: 4}
</code></pre></li>
<li>5.3 使用explain和hint

<pre><code>&gt; db.foo.find().explain()
# "cursor": 索引使用情况, "BasicCursor"未使用索引
# "nscanned": 数据库查找了多少个文档
# "n": 返回文档的数量
# "millis": 0 这个毫秒表示数据库执行查询的时间
</code></pre></li>
<li>5.4 索引管理

<pre><code># 索引的元信息保存在每个数据库的system.indexes集合中, 只能进行ensureIndex或dropIndexes操作
# system.namespaces包含集合的索引名字
# 集合名和索引名加起来不能超过127字节
# 修改索引
# background在后台建立索引
&gt; db.people.ensureIndex({"username": 1}, {"background": true})
# 删除索引
# 通过system.indexes集合找出索引名,在通过dropIndexes
# db.runCommand({"dropIndexes": "foo", "index": "*"})
</code></pre></li>
<li>5.5 地理空间索引

<pre><code># 创建地址空间索引
&gt; db.map.ensureIndex({"gps": "2d"})
# "gps"键的值必须是某种形式的一对值, 一个包含两个元素的数组, 或者连个键的内嵌文档
{"gps": [0,100]}
{"gps": {"x": -30, "y": 30]}
{"gps": {"Latitude": -180, "longitude": 180}}
# 默认地理空间值的范围为-180~180, 也可以重新指定
&gt; db.star.trek.ensureIndex({"light-years": "2d"}, {"min": -1000, "max": 1000})
# 地址空间查询有两种方式
&gt; db.map.find({"gps": {"$near": [40, -73]}})
&gt; db.map.find({"gps": {"$near": [40, -73]}}).limit(10)
&gt; db.runCommand({geoNear: "map", near: [40, -73], num: 10})
# 查找指定形状内的文档
# "$box" 第一个数组, 指定左下角下标, 第二个数组, 指定右下角下标
&gt; db.map.find({"gps": {"$within": {"$box": [[10, 20], [15, 30]]}}})
# "$center" 查找圆内部所有点, 参数表示圆心和半径
&gt; db.map.find({"gps": {"$within": {"$center": [[12, 25], 5]}}})
</code></pre></li>
<li>5.5.1 复合地理空间索引

<pre><code># 创建爱呢"location"和"desc"的复合地理空间索引
&gt; db.ensureIndex({"location": "2d", "desc": 1})
# 查找咖啡馆
&gt; db.map.find({"location": {"$near": [-70, 30]}, "desc": "coffeeshop"}).limit(1)
</code></pre></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB权威指南 4]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/02/28/084414-python/"/>
    <updated>2012-02-28T08:44:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/02/28/084414-python</id>
    <content type="html"><![CDATA[<ul>
<li>4.1 find简介</li>
<li>返回一个集合中文档的子集, 空的查询文档{}会匹配集合的全部内容

<pre><code>mongo&gt; db.c.find()
# 限定查找条件
db.users.find({"age": 27})
db.users.find({"username": "joe"})
db.users.find({"username": "joe", "age": 27})
</code></pre></li>
<li>4.1.1 指定返回的键

<pre><code>db.users.find({}, {"username": 1, "email": 1})
# 不希望结果中含有"fata1_weakness"键:
db.users.find({}, {"fata1_weakness": 0})
# 防止返回"_id":
db.users.find({}, {"username": 1, "_id": 0})
</code></pre></li>
<li>4.1.2 限制</li>
<li>4.2 查询条件</li>
<li>4.2.1 查询条件
&#8220;$lt&#8221;, &#8220;$lte&#8221;, &#8220;$gt&#8221;, &#8220;$gte&#8221;, &#8220;$ne&#8221; 分别对应&lt;, &lt;=, >, >=, !=

<pre><code>mongo&gt; db.users.find({"age": {"$gte": 18, "$lte": 30}})
mongo&gt; db.users.find({"registered": {"$lt": "01/01/2007"}})
mongo&gt; db.users.find({"username": {"$ne": "joe"}})
</code></pre></li>
<li>4.2.2 OR查询
&#8220;$in&#8221;可以用来查询一个键的多个值, &#8220;$or&#8221;用来完成多个键值的任意给定值

<pre><code>db.raffle.find({"ticket_no": {"$in": [725, 542, 390]}})
db.raffle.find({"user_id": {"$in": [12345, "joe"]}})
{ticket_no" {"$in": [725]}} == {ticket_no: 725}
</code></pre>

&#8220;$nin&#8221;返回与数组中所有条件都不匹配的文档

<pre><code>db.raffle.find({"ticket_no": {"$nin": [725, 542, 390]}})
db.raffle.find({"$or": [{"ticket_no": 725}, {"winner": true}]})
db.raffle.find({"$or": [{"ticket_no": {"$in": [725, 542, 390]}}, {"winner": true}]})
</code></pre></li>
<li>4.2.3 $not

<pre><code>db.users.find({"id_num": {"$mod": [5, 1]}})
db.users.find({"id_num": {"$not": {"$mod": [5, 1]}}})
</code></pre></li>
<li>4.2.4 条件语句的规则</li>
<li>一个键可以有多个条件, 但一个键盘不能对应多个更新修改器

<pre><code>db.users.find({"age": {"$lt": 30, "$gt": 20}})
</code></pre></li>
<li>4.3 特定于类型的查询</li>
<li>4.3.1 null</li>
<li>null不仅仅匹配自身, 而且匹配&#8221;不存在的&#8221;. 返回缺少这个键的所有文档

<pre><code>db.c.find({"z": null})
db.c.find({"z": {"$in": [null], "$exists": true}})
</code></pre></li>
<li>4.3.2 正则表达式</li>
<li>MongoDB使用PCRE库匹配正则表达式

<pre><code># 忽略大小写
db.users.find({"name": /joe/i})
db.users.find({"name": /joe?/i})
</code></pre></li>
<li>4.3.3 查询数组

<pre><code>db.food.insert({"fruit": ["apple", "banana", "peach"]})     
db.food.find({"fruit": "banana"})
</code></pre></li>
<li>1 $all</li>
<li>通过多个元素匹配数组

<pre><code>db.food.insert({"_id": 1, "fruit": ["apple", "banana", "peach"]}) 
db.food.insert({"_id": 2, "fruit": ["apple", "kumquat", "orange"]}) 
db.food.insert({"_id": 3, "fruit": ["cherry", "banana", "apple"]}) 
# 查找既有"apple"又有"banana"的文档
db.food.find({"fruit": {"$all": ["apple", "banana"]}})
db.food.find({"fruit": ["apple", "banana", "peach"]})
# 查找数组指定位置的元素
db.food.find({"fruit.2": "peach"})
</code></pre></li>
<li>2 $size</li>
<li>查询指定长度的数组

<pre><code>db.food.find({"fruit": {"$size": 3}})
# "$size"不能与其他查询子句组合(比如"$gt"), 但可以通过在文档中添加一个"size"键实现, 但不能与"$addToSet"同时使用
db.food.update({"$push": {"fruit": "strawberry}})
db.food.update({"$push": {"fruit": "strawberry}, "$inc": {"size": 1}})
db.food.find({"size": {"$gt": 3}})
</code></pre></li>
<li>3 $slice操作符</li>
<li>返回数组的一个子集合

<pre><code># 返回前10条评论
db.blog.posts.find_one(criteria, {"comments": {"$slice": 10}])
# 返回最后10条评论
db.blog.posts.find_one(criteria, {"comments": {"$slice": -10}])
# 返回第24-33条评论
db.blog.posts.find_one(criteria, {"comments": {"$slice": 23,10}])
</code></pre></li>
<li>4.3.4 查询内嵌文档

<pre><code>db.people.insert({"name": {"first": "Joe", "last": "Schmoe"}, "age": 45})
# 查询名为Joe Schmoe的人
db.people.find({"name": {"first": "Joe", "last": "Schmoe"}})
# 使用点表示法查询更通用
db.people.find({"name.first": "Joe", "name.last": "Schmoe"})
# 正确的指定一组条件, 不用指定每个键, 要使用"$elemMatch"
db.blog.find({"comments": {"$elemMatch": {"author": "joe", "score": {"$gte": 5}}}})
</code></pre></li>
<li>4.4 $where查询

<pre><code># 如果文档中两个值相等, 则返回
db.foo.insert({"apple": 1, "banana": 6, "peach": 3})
db.foo.insert({"apple": 8, "spinach": 4, "watermelon": 4})
db.foo.find({"$where": "this.x + this.y == 10"})
# where查询比常规查询慢得多, 尽量避免使用.
</code></pre></li>
<li>4.5 游标</li>
<li>4.5.1 limit, skip和sort

<pre><code># limit指定是上限, 并非下限, 如果匹配结果不到3个, 则返回匹配数量的结果
db.c.find().limit(3)
# 略过前3个匹配的文档, 若匹配的文档少于3个, 则不会返回
db.c.find().skip(3)
# "username"升序, "age"降序
db.c.find().sort({"username": 1, "age": -1})
# 搜索mp3, 每页返回50个结果, 按价格降序
db.stock.find({"desc": "mp3"}).limit(50).sort({"price": -1})
# skip同样可以实现, 不过会导致性能问题, 应避免
db.stock.find({"desc": "mp3"}).limit(50).skip({"price": -1})
</code></pre></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB权威指南 3]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/02/23/120934-python/"/>
    <updated>2012-02-23T12:09:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/02/23/120934-python</id>
    <content type="html"><![CDATA[<ul>
<li>#

<pre><code>from pymongo import Connection
connection = Connection()
db = connection['test']
collection = db['col_test']
</code></pre></li>
<li><p>3.1 插入并保存文档</p>

<pre><code>mongo&gt; db.foo.insert({"bar": "baz"})
#
db.foo.insert[{"bar": "baz"}]
</code></pre></li>
<li><p>3.1.1 批量插入</p></li>
<li>批量插入是单个TCP请求, 提高处理效率. 只适用将多个文档插入到一个集合.</li>
<li><p>批量插入有消息长度为16M的限制.</p>

<pre><code>mongo&gt; ???
# 批量插入对象必须是序列对象 
db.foo.insert([{"bar": "baz"}, {"baz": "bar"}])
</code></pre></li>
<li><p>3.1.2 插入: 原理和作用</p></li>
<li>在启动时打开&#8211;objecheck选项会检查输入的有效性, 但会影响效率</li>
<li><p>文档不能超过4M</p></li>
<li><p>3.2 删除文档</p>

<pre><code># 删除集合中所有文档. 但不会删除集合本身及其索引.
mongo&gt; db.foo.remove()
# 也可按指定条件删除
db.foo.remove()
db.foo.remove({"bar": "baz"})
</code></pre></li>
<li><p>删除速度</p></li>
<li>删除集合比删除文档速度更快.

<pre><code>import time
from pymongo import Connection

db = Connection().foo
collection = db.bar
# 插入测试记录
for i in range(1000000):
    collection.insert({"foo": "bar", "baz": i, "z": 10 - i})

start = time.time()
# 使用db.drop_collection("bar")代替下面两行, 速度提升会相当明显
#db.drop_collection("bar")
collection.remove()
collection.find_one()

total = time.time() - start
print "%d seconds" % total
</code></pre></li>
<li>3.3 更新文档</li>
<li>update有2个参数, 一个是查询文档, 一个是修改文档</li>
<li>3.3.1 文档替换</li>
<li>确保更新总是指向唯一文档

<pre><code>from pymongo import Connection
db = Connection().foo
# 导入测试数据
db.users.insert({"name": "joe", "friends": 32, "enemies": 2})
# mongo shell 
mongo&gt; var joe = db.users.findOne({"name": "joe"});
mongo&gt; joe.relationships = {"friends": joe.friends, "enemies": joe.enemies};
mongo&gt; joe.username = joe.name;
mongo&gt; delete joe.friends;
mongo&gt; delete joe.enemies;
mongo&gt; delete joe.name;
mongo&gt; db.users.update({"name": "joe"}, joe);
# OK 转换为python代码
joe = db.users.find_one({"name": "joe"})
joe['relationships'] = {"friends": joe['friends'], "enemies": joe['enemies']}
joe['username'] = joe['name']
del joe['friends']
del joe['enemies']
del joe['name']
# 不是子字典?
db.users.update({"username": joe['username']}, joe)
</code></pre></li>
<li>3.3.2 使用修改器

<pre><code># 每当有人访问页面的时候, 增加计数器
from pymongo import Connection
db = Connection().foo
# 导入测试数据
db.analytics.insert({"url":"www.example.com", "pageviews": 52})
# 使用$inc修改器
db.analytics.update({"url":"www.example.com"}, {"$inc": {"pageviews": 1}})
# 执行db.analytics.find()会发现"pageviews"的值增加了1
db.analytics.find().next()
</code></pre></li>
<li>1 &#8220;$set&#8221;修改器入门</li>
<li>&#8220;$set&#8221;用来指定一个键的数值,如果不存在就创建它

<pre><code># 导入测试数据
db.users.insert({"name": "joe", "age": 30, "sex": "male", "location": "Wisconsin"})
# 添加喜欢的书籍
db.users.update({"name": "joe", "age": 30}, {"$set": {"favorite book": "war and peace"}})
# 修改喜欢的书籍
db.users.update({"name": "joe", "age": 30}, {"$set": {"favorite book": "green eggs and ham"}})
# cool的是还可以修改键值的数据类型
db.users.update({"name": "joe", "age": 30}, {"$set": {"favorite book": ["cat's cradle", "foundation trilogy", "ender's game"]}}) 
# 不爱读书了, 可以试试"$unset"
db.users.update({"name": "joe", "age": 30}, {"$unset": {"favorite book": 1}})

# 也可用"$set"修改内嵌的文档
# 导入测试数据 
from pymongo import Connection
db = Connection().blog
db.posts.insert({"title": "A Blog Post", "content": "...", "author": {"name": "joe", "email": "joe@example.com"}})
# OK, 开始更新
db.posts.update({"author.name": "joe"}, {"$set": {"author.name": "joe schmoe"}})
</code></pre></li>
<li>2 增加和减少</li>
<li>&#8220;$inc&#8221; 修改器用来增加已有的键值, 或在不存在的时候创建一个键, 操作对象必须是数字类型.

<pre><code>from pymongo import Connection
db = Connection().foo
db.games.insert({"game": "pinball", "user": "joe"})
# 分数并不存在, "$inc"创建这个键后, 设定初始值
db.games.update({"game": "pinball", "user": "joe"}, {"$inc": {"score": 50}})
# 如果小球落入加分区, 要加10000分
db.games.update({"game": "pinball", "user": "joe"}, {"$inc": {"score": 10000}})
</code></pre></li>
<li>3 数组操作器</li>
<li>&#8220;$push&#8221;向已有的数据末尾加入一个元素

<pre><code>from pymongo import Connection
db = Connection().blog
# 导入测试数据
db.posts.insert({"title": "A blog post", "content": "..."})
# 下面两行有待调试
db.posts.update({"title": "A blog post"}, {"$push": {"comments": {"name": "joe", "email": "joe@example.com", "content": "nice post."}}})
db.posts.update({"title": "A blog post"}, {"$push": {"comments": {"name": "bob", "email": "bob@example.com", "content": "good post."}}})
# "$ne", 如果一个值不在数据就把它加进去
db.papers.update({"authors cited": {"$ne": "Richie"}}, {"$push": {"authors cited": "Richie"}})
# 不过有时更适合用"$addToSet"
# 导入测试数据
db.users.insert({"username": "joe", "emails": ["joe@example.com", "joe@gmail.com", "joe@yahoo.com"]})
# 用"$addToSet"可以避免重复
db.users.update({"username": "joe"}, {"$addToSet": {"emails": "joe@gmail.com"}})
db.users.update({"username": "joe"}, {"$addToSet": {"emails": "joe@gmail.com"}})
# "$addToSet"和"$each"组合起来, 可以添加多个不同的值. "$ne"和"$push"就不能实现.
db.users.update({"username": "joe"}, {"$addToSet": {"emails": {"$each": ["joe@php.net", "joe@example.com", "joe@python.org"]}}})
# 从数组删除元素, 可以使用"$pop"修改器
# 从数组末尾删除一个元素
{$pop: {key: 1}}
# 从数组头部删除
{$pop: {key: -1}}
# 基于特定条件删除元素, 可以用"$pull"
db.lists.insert({"todo": ["dishes", "laundry", "dry cleaning"]})
db.lists.update({}, {"$pull": {"todo": "laundry"}})
</code></pre></li>
<li>4 数组的定位修改器

<pre><code># 若数组包含多个值, 针对某一特定值的修改需要使用定位操作符"$"定位操作,数组下标以0开始
# 导入测试数据
db.posts.insert({"content": "...", "comments": [{"comment": "good post", "author": "John", "votes":0},
{"comment": "i thought it was too short", "author": "Claire", "votes":3},
{"comment": "free watches", "author": "Alice", "votes":-1}]})
# 增加第一个评论的投票数量
db.posts.update({"content": "..."}, {"$inc": {"comments.0.votes": 1}})
# 但是有时怎么会预先知道下标呢? 比如上面的comments.0.votes. 这时就要用到"$"去更新,如果有多个匹配,只会更新第一个匹配元素
db.posts.update({"comments.author": "John"}, {"$set": {"comments.$.author": "Jim"}})
</code></pre></li>
<li>5 修改器的速度</li>
<li><p>在不改变文档大小的前提下,更新会很快. &#8220;$inc&#8221;, &#8220;$set&#8221;相对更快.&#8221;$push&#8221;, &#8220;$pull&#8221;相对更慢</p>

<pre><code>from pymongo import Connection
import time

db = Connection().performance_test
db.drop_collection("updates")
collection = db.updates

collection.insert({"x": 1})
# make sure the insert is complete before we start timing
collection.find_one()

start = time.time()

for i in range(100000):
    collection.update({}, {"$inc": {"x": 1}})
    # 如果改用"$push"的话. 速度就很悲剧了
    collection.update({}, {"$push": {"x": 1}})

# make sure the updates are complete before we stop timing
collection.find_one()

print time.time() - start
</code></pre></li>
<li><p>3.3.3 upsert</p></li>
<li><p>upsert是一种特殊的更新. 如果文档不符合更新条件, 则会以这个条件和更新文档为基础创建一个新文档</p>

<pre><code># update 第3个参数表示这个是upsert. &lt;-true
db.analytics.update({"url": "/blog"}, {"$inc": {"visits": 1}}, True)
db.math.remove()
db.math.update({"count": 25}, {"$inc": {"count": 3}}, true)
db.math.find_one()
# 下面会再新建一个文档. 为什么, 因为上面的count已经是28, 由于没有匹配
db.math.update({"count": 25}, {"$inc": {"count": 3}}, true)
</code></pre></li>
<li><p>save是一个shell函数, 可以在文档不存在时插入(文档不含有_id), 存在时更新(含有_id), 调用upsert</p>

<pre><code>x = db.math.find_one()
x['count'] = 20
db.math.save(x)
</code></pre></li>
<li>3.3.4 更新多个文档</li>
<li>默认只更新第一个匹配的文档, 如要要让所有文档更新, 可以设置update的第4个参数为true

<pre><code># 给所有在特定日期过生的用户发一份礼物.
# help(db.users.update)
db.users.update({"birthday": "10/13/1978"}, {"$set": {"gift": "Happy Birtday!"}}, False, multi=True)
# 想要知道到底更新了多少条文档
db.count.update({x: 1}, {"$inc": {x: 1}}, False, multi=True)
mongo&gt; db.runCommand({getLastError: 1})
</code></pre></li>
<li><p>3.3.5 返回已更新的文档</p>

<pre><code># 在一个操作中返回结果,并更新
mongo&gt; ps = db.runCommand({"findAndModify": "processes", "query": {"status": "READY"}, "sort": {"priority": -1},
"update": {"$set": {"status": "RUNNING"}})
ps = db.command({"findAndModify": "processes", "query": {"status": "READY"}, "sort": {"priority": -1},
"update": {"$set": {"status": "RUNNING"}})
ps = db.command({"findAndModify": "processes", "query": {"status": "READY"}, "sort": {"priority": -1},
"remove": true).value
# findAndModify
字符集, 集合名
. query
查询文档, 用来检索文档的条件
. sort
排序结果的文件
. update
修改器文档, 对所找到的文档执行更新
. remove
布尔类型,表示是否删除文档
. new
布尔类型,表示返回的是更新前的文档还是更新后的文档. 默认是更新前的文档
</code></pre></li>
<li><p>3.4 瞬间完成</p></li>
<li>不需要等待数据响应,发出后就不再操心的动作(离弦之箭)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[monogodb 大杂烩]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/02/22/141006-mongodb/"/>
    <updated>2012-02-22T14:10:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/02/22/141006-mongodb</id>
    <content type="html"><![CDATA[<h1>一, 安装</h1>

<p><a href="http://www.mongodb.org/downloads">下载连接</a></p>

<pre><code># mkdir -p /usr/local/mongo/{etc,bin,log}
# mkdir -p /data

# /usr/local/mongo/etc/mongodb.conf
# 数据文件存放路径
dbpath=/var/lib/mongodb

# 错误日志文件
logpath=/var/log/mongodb/mongodb.log

# 错误日志文件采用追加模式,默认是覆盖模式
logappend=true

# 对外服务绑定IP. 根据业务需要, 尽量不要放公网.
#bind_ip

# 对外服务绑定端口,Web管理端口在这个port的基础上+1000 
port = 27017
# 开启简单的rest API, 提供Web管理界面操作支持
rest = true

# 定期显示CPU的CPU利用率和iowait
#cpu = true

# 关闭验证(默认)
#noauth = true
# 启用验证
#auth = true

# 详细输出
#verbose = true
# 安静输出
#quiet = true

# 在收到客户数据,检查数据的有效性
#objcheck = true

# 限制每个数据库的文件数，设置默认为8
#quota = true
# Set oplogging level where n is
#   0=off (default)
#   1=W
#   2=R
#   3=both
#   7=W+some reads
# 规定每个数据库允许的文件数
#quotaFiles

# diaglog选项 0=off 1=W 2=R 3=both 7=W+some reads
# 提供的方式，是只读，只写，还是读写都行，还是主要写+部分的读模式
#diaglog = 0

# 调试诊断选项
#nocursors = true
# 忽略查询命中率
#nohints = true
# 关闭http接口访问
#nohttpinterface = true
# 禁用脚本引擎
#noscripting = true
# 不允许表扫描
#notablescan = true
# 禁用数据文件预分配(往往影响性能)
#noprealloc = true
# 设置信数据库.ns文件大小(MB) =16
#nssize = &lt;size&gt;

#修复所有数据库
#repair
#修复库生成的文件的目录,默认为目录名称dbpath
#repairpath
#数据写入磁盘的时间秒数(0=never,不推荐),默认60
#syncdelay

# Accout token for Mongo monitoring server.
#mms-token = &lt;token&gt;
# Server name for Mongo monitoring server.
#mms-name = &lt;server-name&gt;
# Ping interval for Mongo monitoring server.
#mms-interval = &lt;seconds&gt;

# 从一个dbpath里启用从库复制服务，该dbpath的数据库是主库的快照，可用于快速启用同步
#fastsync
# 如果从库与主库同步数据差得多，自动重新同步
#autoresync
# pair???
#pairwith
# 仲裁服务器，在主从和pair中用到
#arbiter
# 设置操作日志的大小(MB)
#oplogSize
# 设置存储操作日志的内存大小
#opIdMem

# 从库模式
#slave = true
# 当为从时，指定主的地址和端口
#source = master.example.com
# 设置从库同步主库的延迟时间
#slavedelay
# 指定单一的数据库复制
#only = master.example.com
# 主库模式
#master = true
#source = slave.example.com
# 设置副本集名称
# replSet = setname

# 声明这是一个集群的config服务,默认端口27019，默认目录/data/configdb
#configsvr
# 声明这是一个集群的分片,默认端口27018
#shardsvr
# 关闭偏执为moveChunk数据保存
#noMoveParanoia

# tree /usr/local/mongo/bin
|-- bsondump
|-- mongo
|-- mongod
|-- mongodump
|-- mongoexport
|-- mongofiles
|-- mongoimport
|-- mongorestore
|-- mongos
|-- mongosniff
|-- mongostat
|-- mongotopmongosniff

# mongostat --help
Fields
inserts      - # of inserts per second
query        - # of queries per second
update       - # of updates per second
delete       - # of deletes per second
getmore      - # of get mores (cursor batch) per second
command      - # of commands per second
flushes      - # of fsync flushes per second
mapped       - amount of data mmaped (total data size) megabytes
visze        - virtual size of process in megabytes
res          - resident size of process in megabytes
faults       - # of pages faults per sec (linux only)
locked       - percent of time in global write lock
idx miss     - percent of btree page misses (sampled)
qr|qw        - queue lengths for clients waiting (read|write)
ar|aw        - active clients (read|write)
netIn        - network traffic in - bits
netOut       - network traffic out - bits
conn         - number of open connections

# Python API
#easy_install pymongo
# -- python code --
from pymongo import Connection

# Making a Connection
#connection = Connection() #default host and port
connection = Connection('localhost', 27017)

# Getting a Database
#db = connection.test_database
db = connection['test-database']

# Getting a Collection
#collection = db.test_collection
collection = db['test-collection']

# Documents
import datetime

post = {"author": "Mike",
"text": "My first blog post!",
"tags": ["mongodb", "python", "pymongo"],
"date": datetime.datetime.utcnow()}

# Inserting a Document
posts = db.posts
posts.insert(post)
db.collection_names()

# Getting a Single Document With find_one()
print posts.find_one()
print posts.find_one({"author": "Mike"})
print posts.find_one({"author": "Eliot"})

# Bulk Inserts
new_posts = [{"author": "Mike",
    "text": "Another post!",
    "tags": ["bulk", "insert"],
    "date": datetime.datetime(2009, 11, 12, 11, 14)},
    {"author": "Eliot",
    "title": "MongoDB is fun",
    "text": "and pretty easy too!",
    "date": datetime.datetime(2009, 11, 10, 10, 45)}]
posts.insert(new_posts)

# Querying for More Than One Document
for post in posts.find():
    print post

for post in posts.find({"author": "Mike"}):
    print post

# Counting
posts.count()
posts.find({"author": "Mike"}).count()

# Range Queries
d = datetime.datetime(2009, 11, 12, 12)
for post in posts.find({"date": {"$lt": d}}).sort("author"):
    print post

# Indexing
posts.find({"date": {"$lt": d}}).sort("author").explain()["cursor"]
posts.find({"date": {"$lt": d}}).sort("author").explain()["nscanned"]

from pymongo import ASCENDING, DESCENDING
posts.create_index([("date", DESCENDING), ("author", ASCENDING)])
posts.find({"date": {"$lt": d}}).sort("author").explain()["cursor"]
posts.find({"date": {"$lt": d}}).sort("author").explain()["nscanned"]
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[scribe安装]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/02/15/143830-scribe/"/>
    <updated>2012-02-15T14:38:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/02/15/143830-scribe</id>
    <content type="html"><![CDATA[<ul>
<li>ubuntu安装依赖libboost-all-dev, python-dev</li>
<li>centos安装依赖boost-devel, python-devel</li>
<li><p>boost库文件必须高于1.36版本, centos通常自带的boost版本较低,需编译安装.</p></li>
<li><p>编译thrift,不提供php与ruby支持.</p>

<pre><code>./configure --without-php_extension --without-php --without-ruby
make &amp;&amp; make install
cd lib/py
python setup.py install
cd ../../contrib/fb303/
./bootstrap.sh
make &amp;&amp; make install
cd py
python setup.py install

# 编译scribe
./bootstrap.sh 
make &amp;&amp; make install
mkdir /etc/scribe
cp -av examples/* /etc/scribe/
cd lib/py
python setup.py install
</code></pre></li>
</ul>


<h1>参考资料:</h1>

<p>http://agiletesting.blogspot.com/2009/10/compiling-installing-and-test-running.html
http://silas.sewell.org/blog/2009/05/12/pipe-apache-or-any-logs-to-scribe/</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Tips]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/02/10/163323-python/"/>
    <updated>2012-02-10T16:33:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/02/10/163323-python</id>
    <content type="html"><![CDATA[<h1>读取管道内容</h1>

<h1>print sys.stdin.read()</h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python 参考手册 第21章]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/01/19/095304-python/"/>
    <updated>2012-01-19T09:53:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/01/19/095304-python</id>
    <content type="html"><![CDATA[<h1>第21章 网络编程和套接字</h1>

<ul>
<li><a href="#21.1">21.1 网络编程基础</a></li>
<li><a href="#21.2">21.2 asynchat模块</a></li>
</ul>


<h1 id=21.1>21.1 网络编程基础</h1>


<ul>
<li>python网络编程模块支持TCP和UDP两种Internet协议。</li>
<li>TCP协议是面向连接的可靠协议。</li>
<li>UDP是以数据包为基础的协议。</li>
<li>套接字类似文件的对象，使程序能够接受传入连接，进行传出连接，发送和接受数据。</li>
<li>接受连接的机器(服务器)必须将套接字绑定到已知端口，提供服务。(0-1023是保留端口)</li>
<li>使用socket模块编写TCP协议。

<pre><code># 时间服务器程序
from socket import *
import time

s = socket(AF_INET, SOCK_STREAM)  # 创建TCP套接字
s.bind(('', 8888))                # 绑定到端口8888
s.listen(5)                       # 监听，但只能挂起5个以下的连接

While True:
    client,addr = s.accept()      # 连接
    print("Got a connection from %s" % str(addr))
    timestr = time.ctime(time.time()) + "\r\n"
    client.send(timestr.encode('ascii'))
    client.close()

# 客户端程序:
from socket import *
s = socket(AF_INET, SOCK_STREAM)  # 创建TCP套接字
s.connect(('localhost', 8888)     # 连接到服务器
tm = s.recv(1024)                 # 最多接收1024个字节
s.close()
print("The time is %s" % tm.decode('ascii'))
</code></pre></li>
<li>网络协议经常以文本方式传输数据，要进行编码，解码处理。python3 默认使用Unicode编码。</li>
</ul>


<h1 id=21.2>21.2 asynchat 模块</h1>


<ul>
<li>简化了异步网络应用程序的实现过程。包装了asyncore的低级I/O功能和一个高级编程接口。</li>
<li>使用该模块，必须定义继承自async_chat的类。并定义两个方法：collect_incoming_data()和found_terminator()。</li>
<li>asynchat模块总是和asyncore模块一起使用。

<pre><code># 使用asynchat的异步HTTP服务器
import asynchat, asyncore, socket
import os
import mimetypes
try:
    from http.client import responses     # python3
except ImportError:
    from httplib import responses         # python2
# 该类插入到asyncore模块，仅处理接受的事件
class async_http(asyncore.dispatcher):
    def __init__(self, port):
        asyncore.dispatcher.__init__(self)
        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
        self.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.bind(('', port))
        self.listen(5)
    def handle_accept(self):
        client.addr = self.accept()
        return async_http_handler(client)

# 处理异步HTTP请求的类
class async_http_handler(asynchat.async_chat):
    def __init__(self, conn=None):
        asynchat.asycn_chat_.__init__(self.conn)
        self.data = []
        self.got_header = False
        self.set_terminator(b"\r\n\r\n")

    # 获取传入数据并添加到数据缓冲区
    def collect_incoming_data(self, data):
        if not self.got_header:
            self.data.append(data)

    # 到达终止符(空白行)
    def found_terminator(self):
        self.got_header = True
        header_data = b"".join(self.data)
        # 将报头数据(二进制)解码为文本以便进一步处理
        header_text = header_data.decode('latin-1')
        header_lines = header_text.splitlines()
        request = header_lines[0].split()
        op = request[0]
        url = request[1][1:]
        self.process_request(op, url)

    # 将文本加入到传出流，但首先要解码
    def push_text(self, text):
        self.push(text.encode('latin-1'))

    # 处理请求
    def process_request(self, op, url):
        if op == "GET":
            if not os.path.exists(url):
                self.send_error(404, "File %s not found\r\n")
            else:
                type, encoding = mimetypes.guess_type(url)
                size = os.path.getsize(url)
                self.path_text("HTTP/1.0 200 OK\r\n")
                self.push_text("Content-length: %s\r\n" % size) 
                self.push_text("Content-type: %s\r\n" % type)
                self.push_text("\r\n")
                self.push_with_producer(file_producer(url))
        else:
            self.send_error(501, "%s method not implemented" % op)

    # 错误处理  
    def send_error(self, code, message):
        self.push_text("HTTP/1.0 %s %s\r\n" % (code, responses[code]))
        self.push_text("Content-type: text/plain\r\n")
        self.push_text("\r\n")
        self.push_text(message)

class file_producer(object):
    def __init__(self, filename, buffer_size=512):
        self.f = open(filename, "rb")
        self.buffer_size = buffer_size
    def more(self):
        data = self.f.read(self.buffer_size)
        if not data:
            self.f.close()
        return data
a = async_http(8080)
asyncore.loop()
# 要测试该实例，需要提供一个URL，并且该URL必须对应运行服务器那个目录中的文件。
</code></pre></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python hiredis模块]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/01/18/175036-python/"/>
    <updated>2012-01-18T17:50:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/01/18/175036-python</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/pietern/hiredis-py">官方手册</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python lxml模块]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/01/16/162542-python/"/>
    <updated>2012-01-16T16:25:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/01/16/162542-python</id>
    <content type="html"><![CDATA[<p><strong>内置方法</strong></p>

<p><strong>[&#8216;CheckboxGroup&#8217;, &#8216;CheckboxValues&#8217;, &#8216;DictMixin&#8217;, &#8216;Element&#8217;, &#8216;FieldsDict&#8217;, &#8216;FormElement&#8217;, &#8216;HTMLParser&#8217;, &#8216;HtmlComment&#8217;, &#8216;HtmlElement&#8217;, &#8216;HtmlElementClassLookup&#8217;, &#8216;HtmlEntity&#8217;, &#8216;HtmlMixin&#8217;, &#8216;HtmlProcessingInstruction&#8217;, &#8216;InputElement&#8217;, &#8216;InputGetter&#8217;, &#8216;InputMixin&#8217;, &#8216;LabelElement&#8217;, &#8216;MultipleSelectOptions&#8217;, &#8216;RadioGroup&#8217;, &#8216;SelectElement&#8217;, &#8216;SetMixin&#8217;, &#8216;TextareaElement&#8217;, &#8216;XHTMLParser&#8217;, &#8216;XHTML_NAMESPACE&#8217;, &#8217;<em>MethodFunc&#8217;, &#8217;<strong>all</strong>&#8217;, &#8217;<strong>builtins</strong>&#8217;, &#8217;<strong>bytes_replace_meta_content_type&#8217;, &#8217;</strong>doc<strong>&#8217;, &#8217;</strong>file<strong>&#8217;, &#8217;</strong>fix_docstring&#8217;, &#8217;<strong>name</strong>&#8217;, &#8217;<strong>package</strong>&#8217;, &#8217;<strong>path</strong>&#8217;, &#8216;__str_replace_meta_content_type&#8217;, &#8217;</em>archive_re&#8217;, &#8217;<em>class_xpath&#8217;, &#8217;</em>collect_string_content&#8217;, &#8217;<em>contains_block_level_tag&#8217;, &#8217;</em>css_import_re&#8217;, &#8217;<em>css_url_re&#8217;, &#8217;</em>element_name&#8217;, &#8217;<em>forms_xpath&#8217;, &#8217;</em>id_xpath&#8217;, &#8217;<em>label_xpath&#8217;, &#8217;</em>nons&#8217;, &#8217;<em>options_xpath&#8217;, &#8217;</em>rel_links_xpath&#8217;, &#8217;<em>setmixin&#8217;, &#8217;</em>transform_result&#8217;, &#8216;_unquote_match&#8217;, &#8216;basestring&#8217;, &#8216;bytes&#8217;, &#8216;copy&#8217;, &#8216;cssselect&#8217;,&#8217;defs&#8217;, &#8216;document_fromstring&#8217;, &#8216;etree&#8217;, &#8216;find_class&#8217;, &#8216;find_rel_links&#8217;, &#8216;fragment_fromstring&#8217;, &#8216;fragments_fromstring&#8217;, &#8216;fromstring&#8217;, &#8216;html_parser&#8217;, &#8216;html_to_xhtml&#8217;, &#8216;iterlinks&#8217;, &#8216;make_links_absolute&#8217;, &#8216;open_http_urllib&#8217;, &#8216;open_in_browser&#8217;, &#8216;parse&#8217;, &#8216;re&#8217;, &#8216;resolve_base_href&#8217;, &#8216;rewrite_links&#8217;, &#8216;submit_form&#8217;, &#8216;threading&#8217;, &#8216;tostring&#8217;, &#8216;unicode&#8217;, &#8216;urljoin&#8217;, &#8216;xhtml_parser&#8217;, &#8216;xhtml_to_html&#8217;]</strong></p>

<ul>
<li><p><strong>实例应用</strong>:</p></li>
<li><p>简单爬虫程序</p></li>
<li>注意点：</li>
<li>1. 从性能考虑应用xpath替换正则匹配。</li>
<li>2. 多线程，双队列，其中一个队列负责发送页面链接。另一个队列负责解析链接。</li>
<li>3. 线程应设置合理延迟，能降低被封的可能性。</li>
<li>4. 存储池，</li>
<li>5. 前端管理，Django</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">LxmlType</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="s">&#39;lxml&#39;</span>
</span><span class='line'>    <span class="n">description</span> <span class="o">=</span> <span class="s">&#39;lxml.html&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="kn">from</span> <span class="nn">lxml.html</span> <span class="kn">import</span> <span class="n">parse</span><span class="p">,</span> <span class="n">tostring</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">parse</span> <span class="o">=</span> <span class="n">parse</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">tostring</span> <span class="o">=</span> <span class="n">tostring</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">parse_file</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">filename</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span><span class="o">.</span><span class="n">getroot</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">serialize</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">doc</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">tostring</span><span class="p">(</span><span class="n">doc</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>XPath语法摘记</strong></li>
<li>路径表达式

<pre><code>nodename    选取此节点的所有子节点。
/           从根节点选取。
//          从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。
.           选取当前节点。
..          选取当前节点的父节点。
@           选取属性。
bookstore   选取 bookstore 元素的所有子节点。
/bookstore        选取根元素 bookstore。
                  注释：假如路径起始于正斜杠( / )，则此路径始终代表到某元素的绝对路径！
bookstore/book    选取属于 bookstore 的子元素的所有 book 元素。
//book            选取所有 book 子元素，而不管它们在文档中的位置。
bookstore//book   选择属于 bookstore 元素的后代的所有 book 元素，而不管它们位于 bookstore 之下的什么位置。
//@lang           选取名为lang 的所有属性。
/bookstore/book[1]                    选取属于 bookstore 子元素的第一个 book 元素。
/bookstore/book[last()]               选取属于 bookstore 子元素的最后一个 book 元素。
/bookstore/book[last()-1]             选取属于 bookstore 子元素的倒数第二个 book 元素。
/bookstore/book[position()&lt;3]         选取最前面的两个属于 bookstore 元素的子元素的 book 元素。
//title[@lang]                        选取所有拥有名为 lang 的属性的 title 元素。
//title[@lang='eng']                  选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。
/bookstore/book[price&gt;35.00]          选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。
/bookstore/book[price&gt;35.00]/title    选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须                                             大于 35.00。
*             匹配任何元素节点。
@*            匹配任何属性节点。
node()        匹配任何类型的节点。
/bookstore/*  选取 bookstore 元素的所有子元素。
//*           选取文档中的所有元素。
//title[@*]   选取所有带有属性的 title 元素。
//book/title | //book/price           选取 book 元素的所有 title 和 price 元素。
//title | //price                     选取文档中的所有 title 和 price 元素。
/bookstore/book/title | //price       选取属于 bookstore 元素的 book 元素的所有 title 元素，以及文档中所有的 price 元素。
</code></pre></li>
<li>XPath 轴

<pre><code>ancestor              选取当前节点的所有先辈（父、祖父等）。
ancestor-or-self      选取当前节点的所有先辈（父、祖父等）以及当前节点本身。
attribute             选取当前节点的所有属性。
child                 选取当前节点的所有子元素。
descendant            选取当前节点的所有后代元素（子、孙等）。
descendant-or-self    选取当前节点的所有后代元素（子、孙等）以及当前节点本身。
following             选取文档中当前节点的结束标签之后的所有节点。
namespace             选取当前节点的所有命名空间节点。
parent                选取当前节点的父节点。
preceding             选取文档中当前节点的开始标签之前的所有节点。
preceding-sibling     选取当前节点之前的所有同级节点。
self                  选取当前节点。
</code></pre></li>
</ul>


<h1>参考资料:</h1>

<ul>
<li><h3><a href="http://simple-is-better.com/news/406">Python HTML 解析器性能评测</a></h3></li>
<li><h3><a href="http://www.w3school.com.cn/xpath/xpath_syntax.asp">XPath语法</a></h3></li>
<li><h3><a href="http://lxml.de/FAQ.html">lxml FAQ</a></h3></li>
<li><h3><a href="http://codespeak.net/pipermail/lxml-dev/2009-February/004386.html">LXML utf-8 problem</a></h3></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis的七种武器及其适合的应用场景]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/01/15/155751-redis/"/>
    <updated>2012-01-15T15:57:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/01/15/155751-redis</id>
    <content type="html"><![CDATA[<ul>
<li><p>2012年01月11日 00:05 来源：nosqlfan 作者：NoSQLfan 编辑：王玉圆</p></li>
<li><p><strong>【IT168 技术】长生剑、孔雀翎、碧玉刀、多情环、离别钩、霸王枪、拳头是古龙笔下的七种武器，而本文打算将Redis的几种使用方式 Strings、Hashs、Lists、Sets、Sorted Sets、Pub/Sub、Transactions 也比作七种武器，为大家讲解Redis的七种特性，并列举其适合的应用场景。</strong></p></li>
<li><strong>武器一：Strings</strong></li>
<li>Strings 数据结构是简单的key-value类型，value其实不仅是String，也可以是数字。使用Strings类型，你可以完全实现目前 Memcached 的功能，并且效率更高。还可以享受Redis的定时持久化，操作日志及 Replication等功能。除了提供与 Memcached 一样的get、set、incr、decr 等操作外，Redis还提供了下面一些操作：</li>
<li>·获取字符串长度</li>
<li>·往字符串append内容</li>
<li>·设置和获取字符串的某一段内容</li>
<li>·设置及获取字符串的某一位(bit)</li>
<li><p>·批量设置一系列字符串的内容</p></li>
<li><p><strong>武器二：Hashs</strong></p></li>
<li><p>在Memcached中，我们经常将一些结构化的信息打包成hashmap，在客户端序列化后存储为一个字符串的值，比如用户的昵称、年龄、性别、积分等，这时候在需要修改其中某一项时，通常需要将所有值取出反序列化后，修改某一项的值，再序列化存储回去。这样不仅增大了开销，也不适用于一些可能并发操作的场合(比如两个并发的操作都需要修改积分)。而Redis的Hash结构可以使你像在数据库中Update一个属性一样只修改某一项属性值。</p></li>
<li><p><strong>武器三：Lists</strong></p></li>
<li><p>Lists 就是链表，相信略有数据结构知识的人都应该能理解其结构。使用Lists结构，我们可以轻松地实现最新消息排行等功能。Lists的另一个应用就是消息队列，可以利用Lists的PUSH操作，将任务存在Lists中，然后工作线程再用POP操作将任务取出进行执行。Redis还提供了操作Lists中某一段的api，你可以直接查询，删除Lists中某一段的元素。</p></li>
<li><p><strong>武器四：Sets</strong></p></li>
<li><p>Sets 就是一个集合，集合的概念就是一堆不重复值的组合。利用Redis提供的Sets数据结构，可以存储一些集合性的数据，比如在微博应用中，可以将一个用户所有的关注人存在一个集合中，将其所有粉丝存在一个集合。Redis还为集合提供了求交集、并集、差集等操作，可以非常方便的实现如共同关注、共同喜好、二度好友等功能，对上面的所有集合操作，你还可以使用不同的命令选择将结果返回给客户端还是存集到一个新的集合中。</p></li>
<li><p><strong>武器五：Sorted Sets</strong></p></li>
<li><p>和Sets相比，Sorted Sets增加了一个权重参数score，使得集合中的元素能够按score进行有序排列，比如一个存储全班同学成绩的Sorted Sets，其集合value可以是同学的学号，而score就可以是其考试得分，这样在数据插入集合的时候，就已经进行了天然的排序。另外还可以用Sorted Sets来做带权重的队列，比如普通消息的score为1，重要消息的score为2，然后工作线程可以选择按score的倒序来获取工作任务。让重要的任务优先执行。</p></li>
<li><p><strong>武器六：Pub/Sub</strong></p></li>
<li><p>Pub/Sub 从字面上理解就是发布(Publish)与订阅(Subscribe)，在Redis中，你可以设定对某一个key值进行消息发布及消息订阅，当一个key值上进行了消息发布后，所有订阅它的客户端都会收到相应的消息。这一功能最明显的用法就是用作实时消息系统，比如普通的即时聊天，群聊等功能。</p></li>
<li><p><strong>武器七：Transactions</strong></p></li>
<li>谁说NoSQL都不支持事务，虽然Redis的Transactions提供的并不是严格的ACID的事务(比如一串用EXEC提交执行的命令，在执行中服务器宕机，那么会有一部分命令执行了，剩下的没执行)，但是这个Transactions还是提供了基本的命令打包执行的功能(在服务器不出问题的情况下，可以保证一连串的命令是顺序在一起执行的，中间有会有其它客户端命令插进来执行)。Redis还提供了一个Watch功能，你可以对一个key进行Watch，然后再执行Transactions，在这过程中，如果这个Watched的值进行了修改，那么这个Transactions会发现并拒绝执行。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python 参考手册 第3章]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/01/15/143703-python/"/>
    <updated>2012-01-15T14:37:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/01/15/143703-python</id>
    <content type="html"><![CDATA[<h1>第3章 类型与对象</h1>

<ul>
<li><a href="#3.1">3.1 术语</a></li>
<li><a href="#3.2">3.2 对象的身份与类型</a></li>
<li><a href="#3.3">3.3 引用计数与垃圾收集</a></li>
<li><a href="#3.4">3.4 引用与复制</a></li>
<li><a href="#3.5">3.5 第一类对象</a></li>
<li><a href="#3.6">3.6 表示数据的内置类型</a></li>
<li><a href="#3.7">3.7 表示程序结构的内置类型</a></li>
<li><a href="#3.8">3.8 解释器内部使用的内置类型</a></li>
<li><a href="#3.9">3.9 对象行为与特殊方法</a></li>
</ul>


<h1 id=3.1>3.1 术语</h1>


<ul>
<li>程序中所有存储的数据都是对象：身份，类型，和值。</li>
<li>对象身份是指向对象值所处位置的指针。例如a=42, 用值42创建一个整数对象，a是引用这个位置的具体名称。</li>
<li>数据属性和方法，属性是对象相关的值，方法是在对象上执行的某些函数，使用(.)访问。

<pre><code>a = 3 + 4j    # 创建以改革复数
r = a.real    # 获得实部(属性之一)
b = [1, 2, 3] # 创建一个列表
b.append(7)   # 使用append方法添加一个新元素
</code></pre></li>
</ul>


<h1 id=3.2>3.2 对象的身份与类型</h1>


<ul>
<li>内置函数id()返回对象身份，返回值为整数。</li>
<li>is运算符用于比较两个对象的身份。</li>
<li>内置函数type()返回对象类型。

<pre><code># 比较两个对象
def compare(a,b):
    if a is b:
        # a和b是同一个对象
        statements
    if a == b:
        # a和b具有相同的值
        statements
    if type(a) is type(b):
        # a和b具有相同类型
        statements
</code></pre></li>
<li>对象本身也是一个对像，称作对象的类。所有类型对象都有一个指定名称，例如list, dict和file

<pre><code>if type(s) is list:
    s.append(item)
if type(d) is dict:
    s.update(t)
</code></pre></li>
<li>检查类型的最佳方式：isinstance(object, type)

<pre><code>if isinstance(s, list):
    s.append(item)
if isinstance(d, dict):
    d.update(t)
</code></pre></li>
</ul>


<h1 id=3.3>3.3 引用计数和垃圾收集</h1>


<ul>
<li>所有对象都有引用计数，在给对象分配一个新的名称，或放入一个新的容器时，该对象的引用计数都会增加。

<pre><code># 至始至终只有一个包含37的对象，其他操作只是创建类该对象的引用。
a = 37        # 创建一个值为37的对象
b = a         # 增加37的引用计数
c = []
c.append(b)   # 增加37的引用计数
</code></pre></li>
<li>使用del语句或者引用操作作用域或者被重新赋值，对象的引用计数会减少。

<pre><code>del a         # 减少37的引用计数
b = 42        # 减少37的引用计数
c[0] = 2.0    # 减少37的引用计数
</code></pre></li>
<li>使用sys.getrefcount()函数可获得对象的当前引用计数。

<pre><code>&gt;&gt;&gt; a = 37
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.gerefcount(a)
</code></pre></li>
<li>当一个对象引用计数归零时，它讲被垃圾回收机制处理掉。

<pre><code>a = {}
b = {}
a['b'] = b    # a包含b的引用
b['a'] = a    # b包含a的引用
del a
del b
</code></pre></li>
</ul>


<h1 id=3.4>3.4 引用和赋值</h1>


<ul>
<li>a = b 这样的赋值，会创建一个对b的新引用。对于可变对象，赋值实际是创建了b的一个副本。

<pre><code>&gt;&gt;&gt; a = [1, 2, 3, 4]
&gt;&gt;&gt; b = a     # b是对a的引用
&gt;&gt;&gt; b is a
True
&gt;&gt;&gt; b[2] = -100   # 修改b中的一个元素
&gt;&gt;&gt; a
[1, 2, -100, 4]
&gt;&gt;&gt;
</code></pre></li>
<li>浅复制和深复制。

<pre><code># 浅复制是创建一个新对象，但它包含的是对原始对象中的包含项的引用。
&gt;&gt;&gt; a = [1, 2, [3,4]]
&gt;&gt;&gt; b = list(a)           # 创建a的一个浅复制
&gt;&gt;&gt; b is a
False
&gt;&gt;&gt; b.append(100)         # 给b追加一个元素
&gt;&gt;&gt; b
[1, 2, [3,4], 100]
&gt;&gt;&gt; a                     # 注意a没有变化
[1, 2, [3,4]]
&gt;&gt;&gt; b[2][0] = -100        # 修改b的一个元素
[1, 2, [-100,4], 100]
&gt;&gt;&gt; a                     # 注意a中的变化
[1, 2, [-100,4]]

# 深复制将创建一个新对象，并且递归复制它包含的所有对象。使用标准库中的copy.deepcopy()函数。
&gt;&gt;&gt; import copy
&gt;&gt;&gt; a = [1, 2, [3,4]]
&gt;&gt;&gt; b = copy.deepcopy(a)
&gt;&gt;&gt; b[2][0] = -100
&gt;&gt;&gt; b
[1, 2, [-100,4]]
&gt;&gt;&gt; a             # 注意a没变化
[1, 2, [3,4]]
</code></pre></li>
</ul>


<h1 id=3.5>3.5 第一类对象</h1>


<ul>
<li>能够使用标识符命名的所有对象都可以当作数据处理。

<pre><code>items = {
    'number' : 42
    'text'   : "Hello World"
}
# 一些不平常的项
items["func"] = abs       # 添加abs()函数
import math
items["mod"] = math       # 添加一个模块
items["error"] = ValueError   # 添加一个异常类型
nums = [1, 2, 3, 4]
items["append"] = nums.append # 添加另一个对象的一个方法
#
&gt;&gt;&gt; items["func"](-45)        # 执行abs(-45)
45
&gt;&gt;&gt; items["mod"].sqrt(4)      # 执行match.sqrt(4)
2.0
&gt;&gt;&gt; try:
...     x = int("a lot")
... expect items["error"] as e:   # e等同于except ValueError
...     print("Couldn't convert")
...
Couldn't convert
&gt;&gt;&gt; items["append"](100)      # 执行nums.append(100)
&gt;&gt;&gt; nums
[1, 2, 3, 4, 100]
&gt;&gt;&gt;
# 通过正确的类型把文本GOOG, 100, 490.10转换为一个字段列表。
&gt;&gt;&gt; line = "GOOG, 100, 490.10"
&gt;&gt;&gt; field_types = [str, int, float]
&gt;&gt;&gt; raw_fields = line.split(',')
&gt;&gt;&gt; fields = [ty(val) for ty,val in zip(field_types, raw_fields)]
&gt;&gt;&gt; fields
['GOOG', 100, 490.1,]
</code></pre></li>
</ul>


<h1 id=3.6>3.6 表示数据的内置类型</h1>


<ul>
<li>表3-1 表示数据的内置类型

<h2>3.6.1 None类型</h2></li>
<li>None类型表示一个null对象。在程序中表示为None，如果一个函数没有显式返回值，则返回该对象。布尔值为False。

<h2>3.6.2 数字类型</h2></li>
<li>布尔性，整数，长整数，浮点数，复数。除了布尔值所有数字对象都是有符号的。</li>
<li>布尔值包括True和False两个值，分别映射为1和0。</li>
<li>整数表示范围在-2147483648和2147483647之间。长整数没有范围限制，取决于内存。在对整数值进行显式类型检查时，如果x是长整性，isinstance(x, int)将返回False。</li>
<li>浮点数是本机双精度(64bit)的表示。精度范围是-308到308的指数。</li>
<li>复数使用一对浮点数表示，实部与虚部分别用real和imag方法访问。方法conjugate()用于计算复数的共轭数。

<h2>3.6.3 序列类型</h2></li>
<li>序列表示索引为非负数的有序对象集合，包括字符串，列表和元组。所有序列都支持迭代。</li>
<li>1. 所有序列的通用操作</li>
<li>索引运算符[]可以访问序列的元素。s[i]访问序列s的元素i，</li>
<li>len()函数可以返回任意序列的长度。</li>
<li>max(),min()函数返回序列的最小值和最大值。</li>
<li>sun()函数对序列中各项求和，只仅限于数字对象。</li>
<li>2. 列表</li>
<li>list()函数可将任意可迭代类型转换为列表。</li>
<li>append方法用于将一个新元素追加到列表结尾。</li>
<li>index方式用于搜索列表中首次出现的元素。</li>
<li>remove方法用于删除列表中首次出现的元素。</li>
<li>extend方法用于将序列点元素追加到列表中。</li>
<li>sort方法用于对列表中的元素排序。</li>
<li>reverse方法用于对列表中的元素逆排序。</li>
<li>3. 字符串</li>
<li>两种字符串类型：字节字符串(8bit)，Unicode字符串(16bit)。</li>
<li>所有方法操作不会修改原始字符串。</li>
<li>4. xrange对象</li>
<li>不支持切片操作。python3更名为range()。

<h2>3.6.4 映射类型</h2></li>
<li>映射对象是无序的。</li>
<li>字典是唯一内置的映射类型。</li>
<li>任何不可变对象可作为字典键值。

<h2>3.6.5 集合类型</h2></li>
<li>set是可变集合，frozenset是不可变集合。

<pre><code>s = set([1,5,10,15])
f = frozenset(['a',37,'hello'])
</code></pre></li>
<li>difference方法，求差集。</li>
<li>intersection方法，求交集。</li>
<li>symmetric_difference，求对称查集。</li>
</ul>


<h1 id=3.7>3.7 表示程序结构的内置类型</h1>


<ul>
<li>3.7.1 可调用类型</li>
<li>可调用类型表示支持函数操作的对象。包括</li>
<li>1 用户定义的函数

<pre><code>def foo(x,y):
    return x + y
bar = lambda x,y: x + y
dir(foo)
</code></pre></li>
<li>2 方法</li>
<li>实例方法，类方法，静态方法。

<pre><code>class Foo(object):
    def instance_method(self, arg):
        statements
    @classmethod
    def class_method(cls, arg):
        statements
    @staticmethod
    def static_method(arg):
        statements
</code></pre></li>
<li>实例方法是操作指定类的实例的方法。实例作为第一个参数传递给方法，self</li>
<li>类方法是把类本身当作一个对象进行操作，在第一个参数class中将类对象传递给类方法。</li>
<li>静态方法就是打包在类中的函数。

<pre><code>f = Foo()                 # 创建一个实例
meth = f.instance_method  # 查找方法，注意这里没有()
meth(37)`                 # 现在调用方法

umeth = Foo.instance_method   # 查找Foo上的方法instance_method
umeth(f,37)                   # 调用它，但要显式地提供self参数
</code></pre></li>
<li>3 内置函数与方法</li>
<li>4 可调用的类和实例</li>
<li>类对象和实例也可以当作可调用对象进行操作。</li>
<li>3.7.2 类，类型和实例</li>
<li>定义类时，类定义通常会生成一个type类型对象。

<pre><code>&gt;&gt;&gt; class Foo(object):
...     pass
&gt;&gt;&gt; type(Foo)
</code></pre></li>
<li>创建一个对象实例时，实例的类型就是定义它的类。

<pre><code>&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; type(f)
&lt;class '__main__.Foo'&gt;
</code></pre></li>
<li>3.7.3 模块</li>
<li>模块对象是一个容器，可保存使用import语句加载的对象。</li>
<li>模块定义了一个使用字典实现的命名空间。</li>
</ul>


<h1 id=3.8>3.8 解释器内部使用的内置类型</h1>


<ul>
<li>包括跟踪对象，代码对象，帧对象，生成器对象，切片对象，Ellipsis。</li>
<li>3.8.1 代码对象</li>
<li>由内置compile()函数返回。</li>
<li>3.8.2 帧对象</li>
<li>表示执行帧，多出现在跟踪对象中。</li>
<li>3.8.3 跟踪对象</li>
<li>出现异常会创建跟踪对象，使用sys.exc_info()函数获取栈跟踪信息。</li>
<li>3.8.4 生成器对象</li>
<li>调用生成器函数会产生生成器对象。yield会定义一个生成器函数。</li>
<li>切片对象</li>
<li>表示在扩展切片语法中指定的切片。内置slice()函数也会创建切片对象。</li>
<li>3.8.6 Ellipsis对象</li>
<li>用于表示索引查找[]中省略号是否存在。

<pre><code>class Example(object):
    def __getitem__(self, index):
        print(index)
e = Example()
e[3, ..., 4]      # 调用e.__getitem__((3, Ellipsis, 4))
</code></pre></li>
</ul>


<h1 id=3.9>3.9 对象行为与特殊方法</h1>


<ul>
<li>3.9.1 对象的创建与销毁</li>
<li><strong>new</strong>()类方法可以创建实例。<strong>init</strong>()方法初始化对象属性，<strong>del</strong>()方法减少对象引用计数。

<pre><code>x = A.__new__(A, args)
is isinstance(x, A): x.__init__(args)
</code></pre></li>
<li>3.9.2 对象字符表示</li>
<li><strong>repr</strong>()方法返回一个表达式字符串

<pre><code>a = [2,3,4,5]     # 创建一个列表
s = repr(a)       # s = '[2,3,4,5]'
b = eval(s)       # 将s变为一个列表
</code></pre></li>
<li><strong>str</strong>()方法调用str()函数打印结果。</li>
<li><strong>format</strong>()方法调用format()函数或字符串format()的方法。

<pre><code>format(x, "spec")         # 调用x.__format__("spec")
"x is (0:spec)".format(x) # 调用x.__format__("spec")
</code></pre></li>
<li>3.9.3 对象比较排序</li>
<li><strong>bool</strong>()方法用于真值测试。</li>
<li><strong>len</strong>()方法用于确定对象的真值。</li>
<li><strong>hash</strong>()方法作用于字符键对象。</li>
<li>3.9.4 类型检查</li>
<li>isinstance()与issubclass()函数。</li>
<li>3.9.5 属性访问</li>
<li>调用<strong>getattribute</strong>()方法。如果找到属性，就返回，否则调用<strong>getattr</strong>()方法，引发AttributeError异常。</li>
<li>3.9.6 属性包装与描述符</li>
<li>3.9.7 序列与映射方法

<pre><code>a = [1,2,3,4,5,6]
len(a)                # a.__len__()
x = a[2]              # x = a.__getitem__(2)
a[1] = 7              # a.__setitem__(1,7)
del a[2]              # a.__delitem__(2)
5 in a                # a.__contains__(5)
a = [1,2,3,4,5,6]
x = a[1:5]            # x = a.__getitem__(slice(1,5,None))
a[1:3] = (10,11,12)   # a.__setitem__(slice(1,3,None), (10,11,12))
del a[1:4]            # a.__delitem__(slice(1,4,None))
a = m[0:100:10]       # 带步进的切片(步进值=10)
b = m[1:10, 3:20]     # 多维切片
c = m[0:100:10, 50:75:5]  # 带步进的多维切片
m[0:5, 5:10] = n      # 扩展切片分配
del m[:10, 15:]       # 扩展切片删除
a = m[..., 10:20]     # 使用Ellipsis对象访问扩展切片
m[10:20, ...] = n
a = m[0:10, 0:100:5, ...]
# 调用__getitem__()方法如下
a = m.__getitem__((slice(0,10,None), slice(0,100,5), Ellipsis))
</code></pre></li>
<li>3.9.8 迭代</li>
<li>如果对象支迭代，必然提供obj.<strong>iter</strong>()方法。

<pre><code># for x in s 等同于
_iter = s.__iter__()
while True:
    try:
        x = _iter.next() (#__iter.__next__() python3)
</code></pre></li>
<li>3.9.9 数学操作</li>
<li>3.9.10 可调用接口

<pre><code>class DistanceFrom(object):
    def __init__(self, origin):
        self.origin = origin
    def __call__(self, x):
        return abs(x - self.origin)
nums = [1, 37, 42, 101, 13, 9, -20]
nums.sort(key=DistanceFrom(10))   # 按照与10的距离进行排序
</code></pre></li>
<li>3.9.11 上下文协议</li>
<li>语法

<pre><code>with context [ as var]:
    statements
</code></pre></li>
<li>执行with语句时，会调用<strong>enter</strong>()方法，可将返回值放入as var指定变量中。离开with语句快，会调用<strong>exit</strong>()方法。</li>
<li>对象检查与dir()</li>
<li>dir()通常用于检查对象。实现<strong>dir</strong>(self)方法后，dir()就可返回名称列表。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python 参考手册 第2章]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/01/15/093205-python/"/>
    <updated>2012-01-15T09:32:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/01/15/093205-python</id>
    <content type="html"><![CDATA[<h1>第2章 词汇和语法约定</h1>

<ul>
<li><a href="#2.1">2.1 行结构和缩进</a></li>
<li><a href="#2.2">2.2 标识符和保留字</a></li>
<li><a href="#2.3">2.3 数字字面变量</a></li>
<li><a href="#2.4">2.4 字符串字面量</a></li>
<li><a href="#2.5">2.5 容器</a></li>
<li><a href="#2.6">2.6 运算符，分割符啊哈及特殊符号</a></li>
<li><a href="#2.7">2.7 文档字符串</a></li>
<li><a href="#2.8">2.8 装饰器</a></li>
<li><a href="#2.9">2.9 源代码编码</a></li>
</ul>


<h1 id=2.1>2.1 行结构和缩进</h1>


<ul>
<li>每条语句以换行符结束。可用续航符()分行。

<pre><code>a = math.cos(3 * (x - n) + \
  math.sin(3 * (y - n))
</code></pre></li>
<li>包含在圆括号，方括号，大括号，三引号的程序部分可以跨多行。</li>
<li>缩进用于表示不同的代码块，应用空格缩经，且整个代码的缩进必须保持一致。

<pre><code>if a:
    statement1    # 缩进一致，正确
    statement2
else:
    statement3
      statement4  # 缩进不一致，错误
</code></pre></li>
<li>函数体，条件语句，循环或类较短，可放在一行。

<pre><code>if a: statement1
else: statement2
</code></pre></li>
<li>表示一个空的函数体或代码块。

<pre><code>if a:
    pass
else:
    statements
</code></pre></li>
<li>分号(;)可用于分割放在一行的多条语句。</li>
<li>\#表示次行的内容是注释。</li>
</ul>


<h1 id=2.2>2.2 标识符和保留字</h1>


<ul>
<li>标识符可包含字母，数字，下划线，必须以非数字字符开始且区分大小写。</li>
<li>保留字不能作为标识符。

<pre><code>and         del        from     nonlocal    try
as          elif       global   not         while
assert      else       if       or          with
class       exec       in       print
continue    finally    is       raise
def         for        lamba    return
</code></pre></li>
</ul>


<h1 id=2.3>2.3 数字字面变量</h1>


<ul>
<li>布尔值：True和False，整数值对应1和0。</li>
<li>整数：  分为十进制，八进制(0)，十六进制(0x)，二进制(0b)。</li>
<li>浮点数：整数后跟小数位。</li>
<li>复数：  整数/浮点数(实数)后加上j或J(虚数)。
&lt;h1.id=2.4>2.4 字符串字面量</h1></li>
<li>将文本放入单引号，双引号，三引号中构成字符串字面量。</li>
<li>反斜杠()用于转义特殊字符。</li>
<li>表2-1 标准的字符转义码</li>
<li>在字符串面量前加上前缀&#8221;u&#8221;构成Unicode字符串字面量。

<pre><code>s = u"Jalape\u00floo" #python3 不必加u前缀
</code></pre></li>
<li>在字符串面量前加上前缀&#8221;r&#8221;构成原始字符串。r必须在u之后。</li>
</ul>


<h1 id=2.5>2.5 容器</h1>


<ul>
<li>[列表] (元组) {字典}

<pre><code>a = [ 1, 3.4, 'hello' ]   # 一个列表
b = ( 10, 20, 30 )        # 一个元组
c = { 'a':3, 'b':42 }     # 一个字典
</code></pre></li>
</ul>


<h1 id=2.6>2.6 运算符，分隔符及特殊符号</h1>


<pre><code>  +    -    *    **    /    //    %    &lt;&lt;    &gt;&gt;    &amp;    |
  ^    ~    &lt;    &gt;     &lt;=   &gt;=    ==   !=    &lt;&gt;    +=
  -=   *=   /=   //=   %=   **=   &amp;=   |=    ^=    &gt;&gt;=  &lt;==
</code></pre>

<h1 id=2.7>2.7 文档字符串</h1>


<ul>
<li>模块，类或函数的第一条语句是字符串。

<pre><code>def fact(n):
    "This function computes a factorial"
    if (n &lt;=1): return 1
    else: return n * fact(n-1)
</code></pre></li>
<li>通过对象<strong>doc</strong>属性访问文档字符串

<pre><code>&gt;&gt;&gt; print fact.__doc__
</code></pre></li>
</ul>


<h1 id=2.8>2.8 装饰器</h1>


<ul>
<li>装饰器用@表示，必须在单独的行并位于函数，方法类之前。

<pre><code>@staticmethod
def bar():
    pass
</code></pre></li>
<li>使用多个装饰器

<pre><code>@foo
@bar
def spam():
    pass
</code></pre></li>
</ul>


<h1 id=2.9>2.9 源代码编码</h1>


<ul>
<li>python源程序使用7位ASCII码标准，在注释语句时，可使用Unicode编码，但其他元素只能使用ASCII字符。

<pre><code>#!/usr/bin/env python
# -*- coding: UTF-8 -*-
s = "Jalapefio"
</code></pre></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress tips]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/01/12/174442-octopress/"/>
    <updated>2012-01-12T17:44:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/01/12/174442-octopress</id>
    <content type="html"><![CDATA[<h1>Theming &amp; Customization</h1>

<h2>source/_includes/custom</h2>

<h2>Landing Page vs. Blog Index</h2>

<pre><code>$ mv source/index.html source/blog/index.html
$ rake new_page[index.html]
# add
blog_index_dir = 'source/blog'
</code></pre>

<h2>Changing the &lt;HEAD></h2>

<ul>
<li>source/_includes/custom/head.html

<pre><code>&lt;!--Fonts from Google"s Web font directory at http://google.com/webfonts --&gt;
&lt;link href="http://fonts.googleapis.com/css?family=PT+Serif:regular,italic,bold,bolditalic" rel="stylesheet" type="text/css"&gt;
&lt;link href="http://fonts.googleapis.com/css?family=PT+Sans:regular,italic,bold,bolditalic" rel="stylesheet" type="text/css"&gt;
</code></pre></li>
<li>source/_includes/custom/asides/about.html</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[redis cookbook]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/01/12/143202-redis/"/>
    <updated>2012-01-12T14:32:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/01/12/143202-redis</id>
    <content type="html"><![CDATA[<ul>
<li><a href="#1">1. An Introduction to Redis</a></li>
<li><a href="#2">2. Clients</a></li>
<li><a href="#3">3. Leveraging Redis</a></li>
<li><a href="#4">4. Redis Administration and Maintenance</a></li>
</ul>


<h1 id=2>CHAPTER 2 Clients</h1>


<p><strong>Using Redis from the Command Line</strong></p>

<pre><code>$ redis-cli -h
$ redis-cli -h serverip
$ redis-cli -p 6380
$ redis-cli INFO
$ cat command_list.txt | redis-cli &gt; command_output.txt
</code></pre>

<p><strong>Using Redis from Python with redis-py</strong></p>

<pre><code>$ pip install redis-py
$ easy_install redis

&gt;&gt;&gt; import redis
&gt;&gt;&gt; redis = redis.Redis(host='localhost', port=6379, db=0)
&gt;&gt;&gt; redis.smembers('circle:jdoe:soccer')
set(['users:toby', 'users:adam', 'users:apollo', 'users:mike'])
&gt;&gt;&gt; redis.sadd('circle:jdoe:soccer', 'users:fred')
True
&gt;&gt;&gt; redis.smembers('circle:jdoe:soccer')
set(['users:toby', 'users:adam', 'users:apollo', 'users:mike', 'users:fred'])  

$ pip install hiredis
$ easy_install hiredis
</code></pre>

<h1 id=3>CHAPTER 3 Leveraging Redis</h1>


<p><strong>Using Redis as a Key/Value Store</strong>
Storing application usage counters</p>

<pre><code># vists:pageid:totals
$ SET visits:1:totals 21389
$ SET visits:2:totals 1367894
$ INCR visits:635:totals    # visits:635:totals + 1
$ GET visits:635:totals
</code></pre>

<p>Storing object data in hashes</p>

<pre><code>redis&gt; hset users:jdoe name "John Doe"
(integer) 1
redis&gt; hset users:jdoe email "jdoe@test.com"
(integer) 1
redis&gt; hset users:jdoe phone "+1555313940"
(integer) 1
redis&gt; hincrby users:jdoe visits 1
(integer) 1

redis&gt; hget users:jdoe email
"jdoe@test.com"
redis&gt; hgetall users:jdoe
1) "name"
2) "John Doe"
3) "email"
4) "jdoe@test.com"
5) "phone"
6) "+1555313940"
7) "visits"
8) "1"


redis&gt; hkeys users:jdoe
1) "name"
2) "email"
3) "phone"
4) "visits"
redis&gt; hvals users:jdoe
1) "John Doe"
2) "jdoe@test.com"
3) "+1555313940"
4) "1"
</code></pre>

<p><strong>Storing user “Circles” using sets</strong></p>

<pre><code>redis&gt; sadd circle:jdoe:family users:anna
(integer) 1
redis&gt; sadd circle:jdoe:family users:richard
(integer) 1
redis&gt; sadd circle:jdoe:family users:mike
(integer) 1
redis&gt; sadd circle:jdoe:soccer users:mike
(integer) 1
redis&gt; sadd circle:jdoe:soccer users:adam
(integer) 1
redis&gt; sadd circle:jdoe:soccer users:toby
(integer) 1
redis&gt; sadd circle:jdoe:soccer users:apollo
(integer) 1

redis&gt; smembers circle:jdoe:family
1) "users:richard"
2) "users:mike"
3) "users:anna"
redis&gt; hgetall users:mike
(...)

redis&gt; sinter circle:jdoe:family circle:jdoe:soccer
1) "users:mike"
redis&gt; sunion circle:jdoe:family circle:jdoe:soccer
1) "users:anna"
2) "users:mike"
3) "users:apollo"
4) "users:adam"
5) "users:richard"
6) "users:toby"
</code></pre>

<p><strong>Quick Reference for Key Operations</strong></p>

<ul>
<li><strong>SET key value</strong></li>
<li>Sets the key to hold the given value. Existing data is overwritten (even if of a different data type).</li>
<li><strong>GET key</strong></li>
<li>Returns the content held by the key. Works only with string values.</li>
<li><strong>INCR key</strong></li>
<li>Increments the integer stored at key by 1.</li>
<li><strong>INCRBY key value</strong></li>
<li>Performs the same operation as INCR, but incrementing by value instead.</li>
<li><strong>DECR key</strong></li>
<li>Decrements the integer stored at key by 1.</li>
<li><strong>DECRBY key value</strong></li>
<li>Performs the same operation as DECR, but decrementing by value instead.</li>
<li><strong>Inspecting Your Data</strong></li>
<li>   redis> KEYS *</li>
<li>   redis> TYPE keyname</li>
</ul>


<p><strong>Quick Reference for Debugging</strong></p>

<ul>
<li><strong>KEYS pattern</strong></li>
<li>Lists all the keys in the current database that match the given pattern.</li>
<li><strong>TYPE key-name</strong></li>
<li>Tells the type of the key. Possible types are: string, list, hash, set, zset, and none.</li>
<li><strong>MONITOR</strong></li>
<li>Outputs the commands received by the Redis server in real time.</li>
<li><strong>Implementing OAuth on Top of Redis</strong></li>
<li>  redis> HMSET /consumers/key:dpf43f3p2l4k3l03 secret kd94hf93k423kf44 created_at 201103060000</li>
<li><pre><code>     redirect_url http://www.example.com/oauth_redirect name test_application
</code></pre></li>
</ul>


<p><strong>Quick Reference for Adding Values to Sets</strong></p>

<ul>
<li><strong>HSET hash-name key value</strong></li>
<li>Sets a value on a hash with the given key. As with other Redis commands, if the hash doesn’t exist, it’s created.</li>
<li><strong>HMSET hash-name key1 value1 [key2 value2 &#8230;]</strong></li>
<li>Allows you to set several values in a hash with a single command.

<pre><code>redis&gt; HGETALL /consumers/key:dpf43f3p2l4k3l03
redis&gt; SADD /nonces/key:dpf43f3p2l4k3l03/timestamp:20110306182600 dji430splmx33448
redis&gt; EXPIRE /nonces/key:dpf43f3p2l4k3l03/timestamp:20110306182600 1800
redis&gt; HSET /request_tokens/key:dpf43f3p2l4k3l03 hh5s93j4hdidpola hdhd0244k9j7ao03
</code></pre></li>
</ul>


<p><strong>Quick Reference for Authorization Algorithm</strong></p>

<ul>
<li><strong>HGETALL hash-name</strong></li>
<li>Returns all the key/value pairs in the given hash.</li>
<li><strong>SADD set-name element</strong></li>
<li>Adds the element to the given set unless it’s already a member. The return value is 1 if the element is added and 0 if it was already a member.</li>
<li><strong>EXPIRE key seconds</strong></li>
<li>Sets an expiration timeout on a key, after which it will be deleted. This can be used on any type of key (strings, hashes, lists, sets or sorted sets) and is one of the most powerful Redis features.</li>
<li><strong>EXPIREAT key timestamp</strong></li>
<li>Performs the same operation as EXPIRE, except you can specify a UNIX timestamp (seconds since midnight, January 1, 1970) instead of the number of elapsed seconds.</li>
<li><strong>TTL key</strong></li>
<li>Tells you the remaining time to live of a key with an expiration timeout.</li>
<li><strong>PERSIST key</strong></li>
<li>Removes the expiration timeout on the given key.</li>
<li>Redirections and consent

<pre><code>redis&gt; SET /authorizations/request_token:hh5s93j4hdidpola 16
redis&gt; HGET /consumers/key:dpf43f3p2l4k3l03 redirect_url
redis&gt; HGETALL /consumers/key:dpf43f3p2l4k3l03
redis&gt; HGET /request_tokens/key:dpf43f3p2l4k3l03 hh5s93j4hdidpola
redis&gt; GET /authorizations/request_token:hh5s93j4hdidpola
redis&gt; SADD /nonces/key:dpf43f3p2l4k3l03/timestamp:20110306182700 kllo9940pd9333jh
redis&gt; EXPIRE /nonces/key:dpf43f3p2l4k3l03/timestamp:20110306182600 1800
redis&gt; HMSET /access_tokens/consumer_key:dpf43f3p2l4k3l03/access_token:nnch734d00sl2jdk
       secret pfkkdhi9sl3r4s00 user_id 16 created_at 20110306182600
redis&gt; HDEL /request_tokens/key:dpf43f3p2l4k3l03 hh5s93j4hdidpola
redis&gt; DEL /authorizations/request_token:hh5s93j4hdidpola
redis&gt; HSET /users/user_id:16/applications dpf43f3p2l4k3l03 nnch734d00sl2jdk
redis&gt; HDEL /users/user_id:16/applications dpf43f3p2l4k3l03
redis&gt; DEL /access_tokens/consumer_key:dpf43f3p2l4k3l03/access_token:nnch734d00sl2jdk
redis&gt; EXPIRE /access_tokens/consumer_key:dpf43f3p2l4k3l03/access_token:nnch734d00sl2jdk 86400
</code></pre></li>
</ul>


<p><strong>Quick Reference for Hash Operations</strong></p>

<ul>
<li><strong>HGET hash-name key</strong></li>
<li>Returns the value at key in the given hash.</li>
<li><strong>HDEL hash-name key</strong></li>
<li>Deletes a key/value pair in the given hash.</li>
</ul>


<h1 id=4>CHAPTER 4 Redis Administration and Maintenance</h1>


<p><strong>Starting a Redis Slave</strong></p>

<pre><code>redis&gt; slaveof master-ip-or-hostname masterport
redis&gt; masterauth master-password
redis&gt; SLAVEOF master-ip-or-hostname [masterport]
redis&gt; CONFIG SET masterauth password
</code></pre>

<p><strong>Handling a Dataset Larger Than Memory</strong></p>

<pre><code>vm-enabled yes
vm-swap-file
vm-max-memory
vm-pages
vm-page-size
vm-max-threads
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[redis.conf 配置参数]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/01/11/100854-redis/"/>
    <updated>2012-01-11T10:08:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/01/11/100854-redis</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
