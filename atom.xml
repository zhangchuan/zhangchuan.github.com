<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[研究中心]]></title>
  <link href="http://zhangchuan.github.com/atom.xml" rel="self"/>
  <link href="http://zhangchuan.github.com/"/>
  <updated>2012-01-12T17:41:12+08:00</updated>
  <id>http://zhangchuan.github.com/</id>
  <author>
    <name><![CDATA[Cloud.Zhang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[redis cookbook]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/01/12/143202-redis/"/>
    <updated>2012-01-12T14:32:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/01/12/143202-redis</id>
    <content type="html"><![CDATA[<h1>CHAPTER 2 Clients</h1>

<p><strong>Using Redis from the Command Line</strong></p>

<pre><code>$ redis-cli -h
$ redis-cli -h serverip
$ redis-cli -p 6380
$ redis-cli INFO
$ cat command_list.txt | redis-cli &gt; command_output.txt
</code></pre>

<p><strong>Using Redis from Python with redis-py</strong></p>

<pre><code>$ pip install redis-py
$ easy_install redis

&gt;&gt;&gt; import redis
&gt;&gt;&gt; redis = redis.Redis(host='localhost', port=6379, db=0)
&gt;&gt;&gt; redis.smembers('circle:jdoe:soccer')
set(['users:toby', 'users:adam', 'users:apollo', 'users:mike'])
&gt;&gt;&gt; redis.sadd('circle:jdoe:soccer', 'users:fred')
True
&gt;&gt;&gt; redis.smembers('circle:jdoe:soccer')
set(['users:toby', 'users:adam', 'users:apollo', 'users:mike', 'users:fred'])  

$ pip install hiredis
$ easy_install hiredis
</code></pre>

<h1>CHAPTER 3 Leveraging Redis</h1>

<p><strong>Using Redis as a Key/Value Store</strong>
Storing application usage counters</p>

<pre><code># vists:pageid:totals
$ SET visits:1:totals 21389
$ SET visits:2:totals 1367894
$ INCR visits:635:totals    # visits:635:totals + 1
$ GET visits:635:totals
</code></pre>

<p>Storing object data in hashes</p>

<pre><code>redis&gt; hset users:jdoe name "John Doe"
(integer) 1
redis&gt; hset users:jdoe email "jdoe@test.com"
(integer) 1
redis&gt; hset users:jdoe phone "+1555313940"
(integer) 1
redis&gt; hincrby users:jdoe visits 1
(integer) 1

redis&gt; hget users:jdoe email
"jdoe@test.com"
redis&gt; hgetall users:jdoe
1) "name"
2) "John Doe"
3) "email"
4) "jdoe@test.com"
5) "phone"
6) "+1555313940"
7) "visits"
8) "1"


redis&gt; hkeys users:jdoe
1) "name"
2) "email"
3) "phone"
4) "visits"
redis&gt; hvals users:jdoe
1) "John Doe"
2) "jdoe@test.com"
3) "+1555313940"
4) "1"
</code></pre>

<p><strong>Storing user “Circles” using sets</strong></p>

<pre><code>redis&gt; sadd circle:jdoe:family users:anna
(integer) 1
redis&gt; sadd circle:jdoe:family users:richard
(integer) 1
redis&gt; sadd circle:jdoe:family users:mike
(integer) 1
redis&gt; sadd circle:jdoe:soccer users:mike
(integer) 1
redis&gt; sadd circle:jdoe:soccer users:adam
(integer) 1
redis&gt; sadd circle:jdoe:soccer users:toby
(integer) 1
redis&gt; sadd circle:jdoe:soccer users:apollo
(integer) 1

redis&gt; smembers circle:jdoe:family
1) "users:richard"
2) "users:mike"
3) "users:anna"
redis&gt; hgetall users:mike
(...)

redis&gt; sinter circle:jdoe:family circle:jdoe:soccer
1) "users:mike"
redis&gt; sunion circle:jdoe:family circle:jdoe:soccer
1) "users:anna"
2) "users:mike"
3) "users:apollo"
4) "users:adam"
5) "users:richard"
6) "users:toby"
</code></pre>

<p><strong>Quick Reference for Key Operations</strong></p>

<p><strong>SET key value</strong>
  Sets the key to hold the given value. Existing data is overwritten (even if of a different data type).</p>

<p><strong>GET key</strong>
Returns the content held by the key. Works only with string values.</p>

<p><strong>INCR key</strong>
Increments the integer stored at key by 1.</p>

<p><strong>INCRBY key value</strong>
Performs the same operation as INCR, but incrementing by value instead.</p>

<p><strong>DECR key</strong>
Decrements the integer stored at key by 1.</p>

<p><strong>DECRBY key value</strong>
Performs the same operation as DECR, but decrementing by value instead.</p>

<p><strong>Inspecting Your Data</strong></p>

<pre><code>redis&gt; KEYS *
redis&gt; TYPE keyname
</code></pre>

<p><strong>Quick Reference for Debugging</strong></p>

<p><strong>KEYS pattern</strong>
Lists all the keys in the current database that match the given pattern.</p>

<p><strong>TYPE key-name</strong>
Tells the type of the key. Possible types are: string, list, hash, set, zset, and none.</p>

<p><strong>MONITOR</strong>
Outputs the commands received by the Redis server in real time.</p>

<p><strong>Implementing OAuth on Top of Redis</strong></p>

<pre><code>redis&gt; HMSET /consumers/key:dpf43f3p2l4k3l03 secret kd94hf93k423kf44 created_at 201103060000
       redirect_url http://www.example.com/oauth_redirect name test_application
</code></pre>

<p><strong>Quick Reference for Adding Values to Sets</strong></p>

<p><strong>HSET hash-name key value</strong>
Sets a value on a hash with the given key. As with other Redis commands, if the hash doesn’t exist, it’s created.</p>

<p><strong>HMSET hash-name key1 value1 [key2 value2 &#8230;]</strong>
Allows you to set several values in a hash with a single command.</p>

<pre><code>redis&gt; HGETALL /consumers/key:dpf43f3p2l4k3l03
redis&gt; SADD /nonces/key:dpf43f3p2l4k3l03/timestamp:20110306182600 dji430splmx33448
redis&gt; EXPIRE /nonces/key:dpf43f3p2l4k3l03/timestamp:20110306182600 1800
redis&gt; HSET /request_tokens/key:dpf43f3p2l4k3l03 hh5s93j4hdidpola hdhd0244k9j7ao03
</code></pre>

<p><strong>Quick Reference for Authorization Algorithm</strong></p>

<p><strong>HGETALL hash-name</strong>
Returns all the key/value pairs in the given hash.</p>

<p><strong>SADD set-name element</strong>
Adds the element to the given set unless it’s already a member. The return value is 1 if the element is added and 0 if it was already a member.</p>

<p><strong>EXPIRE key seconds</strong>
Sets an expiration timeout on a key, after which it will be deleted. This can be used on any type of key (strings, hashes, lists, sets or sorted sets) and is one of the most powerful Redis features.</p>

<p><strong>EXPIREAT key timestamp</strong>
Performs the same operation as EXPIRE, except you can specify a UNIX timestamp (seconds since midnight, January 1, 1970) instead of the number of elapsed seconds.</p>

<p><strong>TTL key</strong>
Tells you the remaining time to live of a key with an expiration timeout.</p>

<p><strong>PERSIST key</strong>
Removes the expiration timeout on the given key.</p>

<p>Redirections and consent</p>

<pre><code>redis&gt; SET /authorizations/request_token:hh5s93j4hdidpola 16
redis&gt; HGET /consumers/key:dpf43f3p2l4k3l03 redirect_url
redis&gt; HGETALL /consumers/key:dpf43f3p2l4k3l03
redis&gt; HGET /request_tokens/key:dpf43f3p2l4k3l03 hh5s93j4hdidpola
redis&gt; GET /authorizations/request_token:hh5s93j4hdidpola
redis&gt; SADD /nonces/key:dpf43f3p2l4k3l03/timestamp:20110306182700 kllo9940pd9333jh
redis&gt; EXPIRE /nonces/key:dpf43f3p2l4k3l03/timestamp:20110306182600 1800
redis&gt; HMSET /access_tokens/consumer_key:dpf43f3p2l4k3l03/access_token:nnch734d00sl2jdk
       secret pfkkdhi9sl3r4s00 user_id 16 created_at 20110306182600
redis&gt; HDEL /request_tokens/key:dpf43f3p2l4k3l03 hh5s93j4hdidpola
redis&gt; DEL /authorizations/request_token:hh5s93j4hdidpola
redis&gt; HSET /users/user_id:16/applications dpf43f3p2l4k3l03 nnch734d00sl2jdk
redis&gt; HDEL /users/user_id:16/applications dpf43f3p2l4k3l03
redis&gt; DEL /access_tokens/consumer_key:dpf43f3p2l4k3l03/access_token:nnch734d00sl2jdk
redis&gt; EXPIRE /access_tokens/consumer_key:dpf43f3p2l4k3l03/access_token:nnch734d00sl2jdk 86400
</code></pre>

<p><strong>Quick Reference for Hash Operations</strong></p>

<p><strong>HGET hash-name key</strong>
Returns the value at key in the given hash.</p>

<p><strong>HDEL hash-name key</strong>
Deletes a key/value pair in the given hash.</p>

<p><strong>CHAPTER 4 Redis Administration and Maintenance</strong>
<strong>Starting a Redis Slave</strong></p>

<pre><code>redis&gt; slaveof master-ip-or-hostname masterport
redis&gt; masterauth master-password
redis&gt; SLAVEOF master-ip-or-hostname [masterport]
redis&gt; CONFIG SET masterauth password
</code></pre>

<p><strong>Handling a Dataset Larger Than Memory</strong></p>

<pre><code>vm-enabled yes
vm-swap-file
vm-max-memory
vm-pages
vm-page-size
vm-max-threads
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[redis.conf 配置参数]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/01/11/100854-redis/"/>
    <updated>2012-01-11T10:08:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/01/11/100854-redis</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[munin ]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/01/10/181350-munin/"/>
    <updated>2012-01-10T18:13:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/01/10/181350-munin</id>
    <content type="html"><![CDATA[<p><a href="http://munin-monitoring.org/wiki/faq">Munin FAQ</a>
<a href="http://aouyar.github.com/PyMunin/">PyMunin Plugins</a>
<a href="http://anders.fupp.net/plugins/">BSD Plugins</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python 参考手册 第一章]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/01/09/175416-python/"/>
    <updated>2012-01-09T17:54:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/01/09/175416-python</id>
    <content type="html"><![CDATA[<h1>第一章 Python 简介</h1>

<ul>
<li><a href="#1.1">1.1 运行Python</a></li>
<li><a href="#1.2">1.2 变量和算术表达式</a></li>
<li><a href="#1.3">1.3 条件语句</a></li>
<li><a href="#1.4">1.4 文件输入和输出</a></li>
<li><a href="#1.5">1.5 字符串</a></li>
<li><a href="#1.6">1.6 列表</a></li>
<li><a href="#1.7">1.7 元组</a></li>
<li><a href="#1.8">1.8 集合</a></li>
<li><a href="#1.9">1.9 字典</a></li>
<li><a href="#1.10">1.10 迭代与循环</a></li>
<li><a href="#1.11">1.11 函数</a></li>
<li><a href="#1.12">1.12 生成器</a></li>
<li><a href="#1.13">1.13 协程</a></li>
<li><a href="#1.14">1.14 对象与类</a></li>
<li><a href="#1.15">1.15 异常</a></li>
<li><a href="#1.16">1.16 模块</a></li>
<li><a href="#1.17">1.17 获得帮助</a></li>
</ul>


<h1 id=1.1>1.1 运行Python</h1>


<pre><code>$ python
&gt;&gt;&gt; print "Hello World"
&gt;&gt;&gt; print("Hello World") #python 3
</code></pre>

<p>桌面计算器, _用于保存最后一次运算结果,并只在交互式环境中才有效</p>

<pre><code>&gt;&gt;&gt; 6000 + 4523.50 + 134.12
&gt;&gt;&gt; _ + 8192.32
</code></pre>

<p>创建程序, #表示整个一行都是注释</p>

<pre><code># helloworld.py
print "Hello World"
</code></pre>

<p>执行程序</p>

<pre><code>$ python helloworld.py
</code></pre>

<p>退出程序, 输入EOF. UNIX(Ctrl+D),Windows(Ctrl+Z).通过程序抛出SystemExit异常</p>

<pre><code>&gt;&gt;&gt; raise SystemExit
</code></pre>

<h1 id=1.2>1.2 变量和算术表达式</h1>


<p><strong>程序清单1-1 简单的复利计算</strong></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">principal</span> <span class="o">=</span> <span class="mi">1000</span>    <span class="c"># 初始金额</span>
</span><span class='line'><span class="n">rate</span> <span class="o">=</span> <span class="mf">0.05</span>         <span class="c"># 利率</span>
</span><span class='line'><span class="n">numyears</span> <span class="o">=</span> <span class="mi">5</span>        <span class="c"># 年数</span>
</span><span class='line'><span class="n">year</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">while</span> <span class="n">year</span> <span class="o">&lt;=</span> <span class="n">numyears</span><span class="p">:</span>
</span><span class='line'>    <span class="n">principal</span> <span class="o">=</span> <span class="n">principal</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">rate</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">year</span><span class="p">,</span> <span class="n">principal</span> <span class="c"># 注意在Python3中是print(year, principal)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Python是一种动态类型语言,变量名无类型,但在执行过程中可以引用任意类型的数据</p>

<pre><code># principal名称引用的值的类型由integer动态变为了float
principal = principal * (1 + rate)
</code></pre>

<p>换行代表一条语句的结束,也可在同一行上使用分号隔开多条语句</p>

<pre><code>principal = 1000; rate = 0.05; numyears = 5;
</code></pre>

<p>while语句对条件表达式进行判断,True执行循环主体,False退出循环.建议每个缩进层次用4个空格.</p>

<p>字符串格式化运算符%</p>

<pre><code># 将principal精度限制为2位
print "%3d %0.2f" % (year, principal)
print("%3d %0.2f" % (year, principal))  #Python 3
</code></pre>

<p>整数 &#8220;%d&#8221;, 字符串 &#8220;%s&#8221;, 浮点数 &#8220;%f&#8221;</p>

<p>更新的字符串格式方法</p>

<pre><code>print format(year, "3d"), format(principal, "0.2f")
print(format(year, "3d"), format(principal, "0.2f"))  #Python 3
</code></pre>

<p>一次格式化多个字符串</p>

<pre><code>print "{0:3d} {1:0.2f}".format(year, principal)
print("{0:3d} {1:0.2f}".format(year, principal))    #Python 3    
</code></pre>

<h1 id=1.3>1.3 条件语句</h1>


<pre><code>if a &lt; b:
    print "Computer says Yes"
else:
    print "Computer says No"
# if和elase主体用缩进表示,else子句可选.
</code></pre>

<p>用pass语句用于创建空子句</p>

<pre><code>if a &lt; b:
    pass    # Do nothing
else:
    print "Computer says No"
</code></pre>

<p>使用or, and和not关键字可以创建布尔类型表达式</p>

<pre><code>if product == "game" and type == "pirate memory" \
                     and not (age &lt; 4 or age &gt; 8):
    print "I'll take it!"
</code></pre>

<p>elif语句, 处理多个测试</p>

<pre><code>if suffix == ".htm":
    content = "text/html"
elif suffix == ".jpg":
    content = "image/jpeg"
elif suffix == ".png":
    content = "image/png"
else:
    raise RuntimeError("Unknown content type")
</code></pre>

<p>in运算符用于检查某个值是否包含在另一个对象, 返回True/False</p>

<pre><code>if 'spam' in s:
    has_spam = True
else:
    has_spam = False
# 可缩写为 has_spam = 'spam' in s
</code></pre>

<h1 id=1.4>1.4 文件输入和输出</h1>


<p>打开文件并逐行读取内容</p>

<pre><code>f = open("foo.txt")     #返回一个文件对象
line = f.readline()     #调用文件的readline()方法
while line:
    print line,         #后面跟','将忽略换行符
    # print(line, end='')   #Python 3
    line = f.readline()
f.close()
</code></pre>

<p>open()函数返回一个新的文件对象, readline()方法读取一行内容,包括结尾的换行符, 读至结尾返回空字符串</p>

<pre><code>for line in open("foo.txt"):
    print line,
</code></pre>

<p>将程序输出到文件中,print >> 文件</p>

<pre><code>f = open("out", "w")    #打开文件以便写入
while year &lt;= numyears:
    principal = principal * (1 + rate)
    print &gt;&gt;f, "%3d %0.2f" % (year, principal)
    year += 1
f.close()
</code></pre>

<p>>>语法只能用于Python 2中, Python 3:</p>

<pre><code>print("%3d %0.2f" % (year, principal), file=f)
</code></pre>

<p>文件对象支持使用write()方法写入原始数据</p>

<pre><code>f.write("%d %0.2f" % (year, principal))
</code></pre>

<p>输入流从读取sys.stdin文件,输出流写入sys.stdout文件</p>

<pre><code>import sys
sys.stdout.write("Enter your name :")
name = sys.stdin.readline()
#Python 2可简化为
name = raw_input("Enter your name :")
#Python 3 raw_input函数叫做input()
</code></pre>

<h1 id=1.5>1.5 字符串</h1>


<p>将字符串放在单引号,双引号,三引号中创建字符串</p>

<pre><code>a = "Hello World"
b = 'Python is groovy'
c = """Computer says 'No'"""
</code></pre>

<p>引号必须对应匹配,单引号和双引号的字符串必须在一个逻辑行.三引号可放于多个文本行</p>

<pre><code>print '''Content-type: text/html

&lt;h1&gt; Hello World &lt;/h1&gt;
Click &lt;a href="http://www.python.org"&gt;here&lt;/a&gt;.
'''
</code></pre>

<p>字符串存储在以0开始, 使用整数索引的字符序列中. 要提取其中一个字符, 可以使用索引运算符s[i]</p>

<pre><code>a = "Hello World"
b = a[4]    # b = 'o'
</code></pre>

<p>使用切片运算符s[i:j]提取子字符串. 省略i, 起始开始. 省略j, 结束为至</p>

<pre><code>c = a[:5]   # c = "Hello"
d = a[6:]   # d = "World"  ## d = a[5:] d = " World"
e = a[3:8]  # e = "lo Wo"
</code></pre>

<p>+运算符连接字符串</p>

<pre><code>g = a + " This is a test"
</code></pre>

<p>Python不会把字符串的值转换成数值</p>

<pre><code>x = "37"
y = "42"
z = x + y   # z = "3742" (字符串连接)
</code></pre>

<p>int(), float() 将字符串值转换为数值</p>

<pre><code>z = int(x) + int(y) # z = 79 (Integer +)
</code></pre>

<p>str(), repr(), format() 将非字符串值转换为字符串形式</p>

<pre><code>s = "The value of x is " + str(x)
s = "The value of x is " + repr(x)
s = "The value of x is " + format(x,"4d")
</code></pre>

<p>str()输出与print相同, repr()表示输出对象在程序中的值</p>

<pre><code>&gt;&gt;&gt; x = 3.4
&gt;&gt;&gt; str(x)
&gt;&gt;&gt; repr(x)     # 计算机无法精确表示十进制小数,
&gt;&gt;&gt; format(x, "0.5f")
</code></pre>

<h1 id=1.6>1.6 列表</h1>


<p>将任意对象放在方括号中创建列表</p>

<pre><code>name = [ "Dave", "Mark", "Ann", "Phil" ]
</code></pre>

<p>列表从0开始整数索引,索引运算符可访问并修改列表的项</p>

<pre><code>a = names[2]        # 返回列表的第3项"Ann"
name[0] = "Jeff"    # 将第1项改为"Jeff"
</code></pre>

<p>append(), 将新项追加到列表末尾</p>

<pre><code>names.append("Paula")
</code></pre>

<p>insert(), 将一项插入到列表</p>

<pre><code>names.insert(2, "Thomas")
</code></pre>

<p>切片运算符, 提取子列表并对其赋值</p>

<pre><code>b = names[0:2]      # 返回[ "Jeff", "Mark" ]
c = names[2:]       # 返回[ "Thomas", "Ann", "Phil", "Paula" ]
names[1] = 'Jeff'   # 将names中第第2项替换为'Jeff'
names[0:2] = ['Dave', 'Mark', 'Jeff']   #将列表的头两项替换为右边的列表
</code></pre>

<p>+运算符连接列表</p>

<pre><code>a = [1,2,3] + [4,5] # 结果是[1,2,3,4,5]
</code></pre>

<p>创建空列表</p>

<pre><code>names = []      # 一个空列表
names = list()  # 一个空列表
</code></pre>

<p>列表可以包括任意种类的Python对象,包括其他列表</p>

<pre><code>a = [1,"Dave",3.14, ["Mark", 7, 9, [100,101]], 10]
</code></pre>

<p>嵌套列表需要多次索引运算进行访问</p>

<pre><code>a[1]        # 返回"Dave"
a[3][2]     # 返回9
a[3][3][1]  # 返回101
</code></pre>

<p><strong>程序清单1-2 列表的高级特性</strong></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sys</span>              <span class="c"># 加载sys模块</span>
</span><span class='line'><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">2</span>   <span class="c"># 检查命令行参数的数量</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;Please supply a filename&quot;</span>
</span><span class='line'>    <span class="k">raise</span> <span class="ne">SystemExit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>   <span class="c"># 命令行上的文件名</span>
</span><span class='line'><span class="n">lines</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>   <span class="c"># 将所有行读取到一个列表中</span>
</span><span class='line'><span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 将所有输入值从字符串转换为浮点数</span>
</span><span class='line'><span class="n">fvalues</span> <span class="o">=</span> <span class="p">[</span><span class="nb">float</span><span class="p">(</span><span class="n">line</span><span class="p">)</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 打印最小值和最大值</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;The minimum value is &quot;</span><span class="p">,</span> <span class="nb">min</span><span class="p">(</span><span class="n">fvalues</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;The maximum value is &quot;</span><span class="p">,</span> <span class="nb">max</span><span class="p">(</span><span class="n">fvalues</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>转换值的代码可简化为</p>

<pre><code>fvalues = [float(line) for line in open(sys.argv[1])]
</code></pre>

<h1 id=1.7>1.7 元组</h1>


<p>将任意对象放在圆括号中创建列表</p>

<pre><code>stock = ('GOOG', 100, 490.10)
address = ('www.python.org', 80)
person = (first_name, last_name, phone)
</code></pre>

<p>可以省略圆括号</p>

<pre><code>stock = 'GOOG', 100, 490.10
address = 'www.python.org', 80
person = first_name, last_name, phone
</code></pre>

<p>0个和1个元素的元组</p>

<pre><code>a = ()      # 0-元组(空元组)
b = (item,) # 1-元组(注意随后的逗号)
c = (item,) # 1-元组(注意随后的逗号)
</code></pre>

<p>将元祖解包为一组变量</p>

<pre><code>name, shares, price = stock
host, port = address
first_name, last_name, phone = person
</code></pre>

<p>创建元组后不能对其修改(替换,删除,插入), 列表可以,但如果程序创建了大量小列表(项&lt;12),会造成内存浪费</p>

<p>字符串split()方法按指定的分割符将一个字符串划分为一个字段列表</p>

<pre><code># 文件中各行的格式为"name, shares, price"
filename = "portfolio.csv"
portfolio = []
for line in open(filename):
    fields = line.split(",")        # 将每行划分为一个列表
    name = fields[0]                # 提取并转换每个字段
    shares = int(fields[1])
    price = float(fields[2])
    stock = (name, shares, price)   # 创建一个元祖(name, shares, price)
    portfolio.append(stock)         # 将记录追加到列表中
&gt;&gt;&gt; portfolio[0]
&gt;&gt;&gt; portfolio[1]
&gt;&gt;&gt; portfolio[1][1]
&gt;&gt;&gt; portfolio[1][2]
# 更简单的方法
total = 0.0
for name, shares, price in portfolio:
    total += shares * price
</code></pre>

<h1 id=1.8>1.8 集合</h1>


<p>使用set函数创建集合</p>

<pre><code>s = set([3,5,9,10])     # 创建一个数值集合
t = set("Hello")        # 创建一个唯一字符的集合
</code></pre>

<p>集合是无序的</p>

<pre><code>&gt;&gt;&gt; t
set(['H', 'e', 'l', 'o'])   # 注意只出现了一个'l'
a = t | s       # t和s的并集
b = t &amp; s       # t和s的交集
c = t - s       # 求差集(项在t中,但不在s中)
d = t ^ s       # 对称基集(项在t或s中, 但不会同时出现在二者中)
</code></pre>

<p>add(), update()在集合中添加新项</p>

<pre><code>t.add('x')              # 添加一项
s.update([10,37,42])    # 在s中添加多项
</code></pre>

<p>remove() 删除一项</p>

<pre><code>t.remove('H')
</code></pre>

<h1 id=1.9>1.9 字典</h1>


<p>将关联数组或散列表放入大括号中{}创建字典</p>

<pre><code>stock = {
    "name"  : "GOOG",
    "shares": 100,
    "price" : 490.10    
}
</code></pre>

<p>访问字典成员</p>

<pre><code>name = stock["name"]
value = stock["shares"] * stock["price"]
</code></pre>

<p>插入修改对象</p>

<pre><code>stock["shares"] = 75
stock["date"]   = "June 7, 2007" 
</code></pre>

<p>可变对象不可用作关键字
字典可作为快速查找序数据的一个容器</p>

<pre><code># 股票价格
price = {
    "GOOG" : 490.10,
    "AAPL" : 123.50,
    "IBM"  : 91.50,
    "MSFT" : 52.13
}
</code></pre>

<p>创建空字典</p>

<pre><code>prices = {}     # 一个空字典
prices = dict{} # 一个空字典
</code></pre>

<p>in运算符测试是否为字典成员</p>

<pre><code>if "SCOX" in prices:
    p = prices["SCOX"]
else:
    p = 0.0
# 更简洁的方法
p = price.get("SCOX", 0.0)
</code></pre>

<p>获得字典关键字列表</p>

<pre><code>syms = list(prints) # syms = ["AAPL", "MSFT", "IBM", "GOOG"]
</code></pre>

<p>del语句删除字典元素</p>

<pre><code>del prices["MSFT"]
</code></pre>

<h1 id=1.10>1.10 迭代与循环</h1>


<p>每次迭代将列表[1,2,3,4,&#8230;&#8230;,9]中的下一个值赋给变量n.</p>

<pre><code>for n in [1,2,3,4,5,6,7,8,9]:
    print "2 to the %d power is %d" % (n, 2**n)
# 更简洁的方法
for n in range(1,10):
    print "2 to the %d power is %d" % (n, 2**n)
</code></pre>

<p>range(i,j,[,步进值]) i到j-1, i省略默认为0</p>

<pre><code>a = range(5)        # a = 0,1,2,3,4
a = range(1,8)      # a = 1,2,3,4,5,6,7
c = range(1,14,3)   # a = 0,3,6,9,12
d = range(8,1,-1)   # a = 8,7,6,5,4,3,2
</code></pre>

<p>xrange()用于处理极大范围的整数值.Python3中已更名为range()</p>

<p>for语句可迭代多种对象,包括字符串, 列表, 字典和文件</p>

<pre><code>a = "Hello World"
# 打印出a中的每个字符
for c in a:
    print c

b = ["Dave", "Mark", "Ann", "Phil"]
# 打印出一个列表的成员
for name in b:
    print name
c = { 'GOOG':490.10, 'IBM':91.50, 'AAPL':123.15 }
# 打印出一个字典的所有成员
for key in c:
    print key, c[key]

# 打印一个文件中的所有行
f = open("foo.txt")
for line in f:
    print line,
</code></pre>

<h1 id=1.11>1.11 函数</h1>


<p>使用def语句创建函数</p>

<pre><code>def remainder(a,b):
    q = a // b      # //是截断除法运算符
    r = a - q*b
    return r 
</code></pre>

<p>调用函数</p>

<pre><code>result = remainder(37,15)
</code></pre>

<p>让函数返回多个值</p>

<pre><code>def divide(a,b):
    q = q // b      # 如果a和b是整数, q就是整数
    r = a - q*b
    return (q,r)
</code></pre>

<p>讲结果放到单独的变量中</p>

<pre><code>quotient, remainder = divide(1456,33)
</code></pre>

<p>给函数参数提供默认值, 调用此函数时可省略</p>

<pre><code>def connect(hostname, port, timeout=300):
    # 函数体
connect('www.python.org', 80)
</code></pre>

<p>使用关键字参数调用函数</p>

<pre><code>connect(port=80, hostname="www.python.org")
</code></pre>

<p>变量定义在函数中,作用域只在函数体内,要修改全局变量的值, 可用global语句</p>

<pre><code>count = 0
...
def foo():
    global count
    count += 1      # 更改全局变量count
</code></pre>

<h1 id=1.12>1.12 生成器</h1>


<p>yield语句可让函数生成一个结果序列</p>

<pre><code>def countdown(n):
    print "Counting down!"
    while n &gt; 0:
        yield n     # 生成一个值(n)
        n -= 1
</code></pre>

<p>生成器创建一个对象, 连续调用next()方法生成结果序列(Python3中是<strong>next</strong>())</p>

<pre><code>&gt;&gt;&gt; c = countdown(5)
&gt;&gt;&gt; c.next()
&gt;&gt;&gt; c.next()
&gt;&gt;&gt; c.next()
&gt;&gt;&gt;
# 通常使用for 循环调用
&gt;&gt;&gt; for i in countdown(5):
    print i,
</code></pre>

<p>模拟UNIX tail -f命令</p>

<pre><code>import time
def tail(f):
    f.seek(0,2)     # 移动到EOF
    while True:
        line = f.readline() #尝试读取一个新的文件行
        if not line:
            time.sleep(0.1)
            continue
        yield line
</code></pre>

<p>在多行中查找特定字符串</p>

<pre><code>def grep(lines, searchtext):
    for line in lines:
        if searchtext in line:  yield line

# UNIX "tail -f | grep python"命令的python实现
wwwlog = tail(open("access-log"))
pylines = grep(wwwlog, "python")
for line in pylines:
    print line,
</code></pre>

<h1 id=1.13>1.13 协程</h1>


<p>以表达式(yield)形式创建协程</p>

<pre><code>def print_matches(matchtext):
    print "Looking for", matchtext
    while True:
        line = (yield)      # 获得一行文本
        if matchtext in line:
            print line
</code></pre>

<p>向前执行第一条(yield)语句, 然后用send()发送数据</p>

<pre><code>&gt;&gt;&gt; matcher = print_matches("python")
&gt;&gt;&gt; matcher.next()      # 向前执行到第一条(yield)语句
&gt;&gt;&gt; matcher.send("Hello World")
&gt;&gt;&gt; matcher.send("python is cool")
&gt;&gt;&gt; matcher.send("yow!")
&gt;&gt;&gt; matcher.close()     # 匹配器函数调用结束
</code></pre>

<p>共同使用生成器和协程的例子</p>

<pre><code># 一组匹配器协程
matchers = [
    print_matches("python"),
    print_matches("guido"),
    print_matches("jython")
]
# 通过调用next()准备所有的匹配器
for m in matchers: m.next()
# 为所有匹配器提供一个活动的日志文件, 为此
# 必须有一台活动的Web服务器将数据写入日志
wwwlog = tail(open("access-log"))
for line in wwwlog:
    for m in matchers:
        m.send(line)    # 将数据发送到每个匹配器协程中
</code></pre>

<h1 id=1.14>1.14 对象与类</h1>


<p>程序中所有值都是对象. 对象由内部数据和各种方法组成</p>

<pre><code>items = [37,42]     # 创建一个列表对象
items.append(73)    # 调用append()方法
</code></pre>

<p>列出对象可用的方法</p>

<pre><code>&gt;&gt;&gt; items = [37,42]
&gt;&gt;&gt; dir(items)
</code></pre>

<p>以双下划线开始和结束的是特殊方法</p>

<pre><code>&gt;&gt;&gt; items.__add__([73,101])
</code></pre>

<p>class语句用于定义新的对象类型. object是所有Python类型的根类型, def语句定义方法, 方法的self参数作为第一个参数, 指向对象本身. <strong>init</strong>用于初始化对象</p>

<pre><code>class Stack(object):
    def __init__(self):     # 初始化栈
        self.stack = []
    def push(self, object):
        self.stack.append(object)
    def pop(self):
        return self.stack.pop()
    def length(self):
        return len(self.stack)
</code></pre>

<p>使用类</p>

<pre><code>s = Stack()     # 创建一个栈
s.push("Dave")  # 在栈中放入一些内容
s.push(42)
s.push([3,4,5])
x = s.pop()     # x的值为[3,4,5]
y = s.pop()     # y的值为42
del s           # 删除s
</code></pre>

<p>继承list</p>

<pre><code>class Stack(list):
    # 为栈接口添加push()方法
    # 注意: 列表已提供一个pop()方法
    def push(self, object):
        self.append(object)
</code></pre>

<p>静态方法</p>

<pre><code>class EventHanlder(object):
    @staticmethod
    def dispatcherThread():
        while (1):
            # 等待请求
EventHandler.dispatcherTread()  # 像函数一样调用方法
</code></pre>

<h1 id=1.15>1.15 异常</h1>


<p>如果程序出现错误会引发异常，可以使用try和except语句捕获并处理异常</p>

<pre><code>try:
    f = open("file.txt","r")
except IOError as e:
    print e
# 如果出现IOError, 引发错误的详细信息将保存在对象e中
</code></pre>

<p>raise语句用于手工引发异常</p>

<pre><code>raise RuntimeError("Computer says no")
</code></pre>

<p>管理系统资源，</p>

<pre><code>import threading
message_lock = threading.Lock()
...
with message_lock:
    message.add(newmessage)
# with语句执行会自动获取message_lock对象, 离开with代码块后锁定会自动释放
</code></pre>

<h1 id=1.16>1.16 模块</h1>


<p>模块文件的后缀必须是.py</p>

<pre><code># file : div.py
def divide(a, b):
    q = a/b     # 如果a和b是整数, 则q也是整数
    r = a - q*b
    return (q,r)
# 在其他程序中import该模块
import div
a, b = div.divide(2305, 29)
# import语句创建新的命名空间，并在新的命名空间执行.py相关的语句.
</code></pre>

<p>使用不同的名称导入模块</p>

<pre><code>import div as foo
a ,b = foo.divide(2305, 29)     # 不再使用div前缀
</code></pre>

<p>把模块所有内容加载到当前命名空间</p>

<pre><code>from div import *
</code></pre>

<p>dir函数可列出模块内容</p>

<pre><code>&gt;&gt;&gt; import string
&gt;&gt;&gt; dir(string)
</code></pre>

<h1 id=1.17>1.17 获得帮助</h1>


<p>help()获得内置模块及Python相关信息</p>

<p>help(&#8216;模块名&#8217;)获得具体模块信息</p>

<p><strong>doc</strong>属性, 获得函数用途的文档说明</p>

<pre><code>&gt;&gt;&gt; print issubclass.__doc__
</code></pre>

<p>pydoc命令返回python模块文档</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git 命令快速参考]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/01/09/172719-git/"/>
    <updated>2012-01-09T17:27:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/01/09/172719-git</id>
    <content type="html"><![CDATA[<h2>1.创建一个新的版本库</h2>


<p>从一个压缩包中创建：</p>

<pre><code>$ tar xzf project.tar.gz
$ cd project
$ git init #Initialized empty Git repository in .git/
$ git add .
$ git commit
</code></pre>

<p>从远程版本库创建：</p>

<pre><code>$ git clone git://example.com/pub/project.git
$ cd project
</code></pre>

<h2>2.管理分支</h2>


<pre><code>$ git branch         # list all local branches in this repo
$ git checkout test  # switch working directory to branch "test"
$ git branch new     # create branch "new" starting at current HEAD
$ git branch -d new  # delete branch "new"
</code></pre>

<p>创建一个不以当前的 HEAD 为起点的分支，用：</p>

<pre><code>$ git branch new test    # branch named "test"
$ git branch new v2.6.15 # tag named v2.6.15
$ git branch new HEAD^   # commit before the most recent
$ git branch new HEAD^^  # commit before that
$ git branch new test~10 # ten commits before tip of branch "test"
</code></pre>

<p>创建并同时切换至新的分支：</p>

<pre><code>$ git checkout -b new v2.6.15
</code></pre>

<p>更新和检验从远程版本库中克隆过来的分支：</p>

<pre><code>$ git fetch             # update
$ git branch -r         # list
origin/master
origin/next
...
$ git checkout -b masterwork origin/master
</code></pre>

<p>从不同的版本库中抓取分支，并给予一个在你的版本库中新的分支名称：</p>

<pre><code>$ git fetch git://example.com/project.git theirbranch:mybranch
$ git fetch git://example.com/project.git v2.6.15:mybranch
</code></pre>

<p>给你要定期地协同工作的版本库制作一个列表：</p>

<pre><code>$ git remote add example git://example.com/project.git
$ git remote                    # list remote repositories
</code></pre>

<p>example
origin</p>

<pre><code>$ git remote show example       # get details
* remote example
URL: git://example.com/project.git
Tracked remote branches
master
next
...
$ git fetch example             # update branches from example
$ git branch -r                 # list all remote branches
</code></pre>

<h2>3.勘查历史</h2>


<pre><code>$ gitk                      # visualize and browse history
$ git log                   # list all commits
$ git log src/              # ...modifying src/
$ git log v2.6.15..v2.6.16  # ...in v2.6.16, not in v2.6.15
$ git log master..test      # ...in branch test, not in branch master
$ git log test..master      # ...in branch master, but not in test
$ git log test...master     # ...in one branch, not in both
$ git log -S'foo()'         # ...where difference contain "foo()"
$ git log --since="2 weeks ago"
$ git log -p                # show patches as well
$ git show                  # most recent commit
$ git diff v2.6.15..v2.6.16 # diff between two tagged versions
$ git diff v2.6.15..HEAD    # diff with current head
$ git grep "foo()"          # search working directory for "foo()"
$ git grep v2.6.15 "foo()"  # search old tree for "foo()"
$ git show v2.6.15:a.txt    # look at old version of a.txt
</code></pre>

<p>查找撤退点：</p>

<pre><code>$ git bisect start
$ git bisect bad                # current version is bad
$ git bisect good v2.6.13-rc2   # last known good revision
Bisecting: 675 revisions left to test after this
                            # test here, then:
$ git bisect good               # if this revision is good, or
$ git bisect bad                # if this revision is bad.
                            # repeat until done.
</code></pre>

<h2>4.制作变更</h2>


<p>配置 git</p>

<pre><code>vi ~/.gitconfig
[user]
    name = Phoenix
    email = phoenixtoday@gmail.com
[alias]
co = checkout
ci = commit -a
st = status
br = branch
oneline = log --pretty=oneline --since='2 days ago'
onelog = log -p -1
[color]
status = auto
branch = auto
ui = auto
</code></pre>

<p>选择这下次提交的时候要包含那些文件，接着制作交付：</p>

<pre><code>$ git add a.txt    # updated file
$ git add b.txt    # new file
$ git rm c.txt     # old file
$ git commit
</code></pre>

<p>或者是准备提交和创建交付一步完成：</p>

<pre><code>$ git commit d.txt # use latest content only of d.txt
$ git commit -a    # use latest content of all tracked files
</code></pre>

<h2>5.合并</h2>


<pre><code>$ git merge test   # merge branch "test" into the current branch
$ git pull git://example.com/project.git master
              # fetch and merge in remote branch
$ git pull . test  # equivalent to git merge test
</code></pre>

<h2>6.共享你的变更</h2>


<p>引入或者导出补丁：</p>

<pre><code>$ git format-patch origin..HEAD # format a patch for each commit
                            # in HEAD but not in origin
$ git am mbox # import patches from the mailbox "mbox"
</code></pre>

<p>抓取一个不同的 git 版本库的分支，并合并进当前分支：</p>

<pre><code>$ git pull git://example.com/project.git theirbranch
</code></pre>

<p>在合并至当前分支之前，将远程分支的变更保存为本地的分支：</p>

<pre><code>$ git pull git://example.com/project.git theirbranch:mybranch
</code></pre>

<p>创建了本地分支的交付之后，用这些交付更新远程分支。</p>

<pre><code>$ git push ssh://example.com/project.git mybranch:theirbranch
</code></pre>

<p>当本地和远程分支都是叫 &#8220;test&#8221; 时：</p>

<pre><code>$ git push ssh://example.com/project.git test
</code></pre>

<p>对于经常通讯的远程版本库，有快捷命令的版本：</p>

<pre><code>$ git remote add example ssh://example.com/project.git
$ git push example test
</code></pre>

<h2>7.版本库的维护</h2>


<p>检查损坏：</p>

<pre><code>$ git fsck
</code></pre>

<p>重新打包，删除无用的杂物：</p>

<pre><code>$ git gc
</code></pre>

<h2>8.其它</h2>


<p>忽略某些文件及目录</p>

<pre><code>$ vi .gitignore
</code></pre>

<p>可以使用通配符，目录最后不要加斜杠。</p>

<p>丢弃当前所有未提交内容</p>

<pre><code>$ git reset --hard HEAD
</code></pre>

<p>有未提交内容时快速切换到另一分支</p>

<pre><code>$ git stash save "work in progress for foo feature"
</code></pre>

<p>切换到另一分支，并修改、提交…
切换回原来分支</p>

<pre><code>$ git stash apply
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[markdown 语法说明]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/01/08/183821-markdown/"/>
    <updated>2012-01-08T18:38:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/01/08/183821-markdown</id>
    <content type="html"><![CDATA[<p><strong>NOTE:</strong> This is Traditional Chinese Edition Document of
Markdown Syntax. If you are seeking for English Edition
Document. Please refer to <a href="http://daringfireball.net/projects/markdown/syntax">Markdown: Syntax</a>.</p>

<h1>Markdown: Syntax</h1>

<ul>
<li><a href="#overview">概述</a>

<ul>
<li><a href="#philosophy">哲學</a></li>
<li><a href="#html">行內 HTML</a></li>
<li><a href="#autoescape">特殊字元自動轉換</a></li>
</ul>
</li>
<li><a href="#block">區塊元素</a>

<ul>
<li><a href="#p">段落和換行</a></li>
<li><a href="#header">標題</a></li>
<li><a href="#blockquote">區塊引言</a></li>
<li><a href="#list">清單</a></li>
<li><a href="#precode">程式碼區塊</a></li>
<li><a href="#hr">分隔線</a></li>
</ul>
</li>
<li><a href="#span">區段元素</a>

<ul>
<li><a href="#link">連結</a></li>
<li><a href="#em">強調</a></li>
<li><a href="#code">程式碼</a></li>
<li><a href="#img">圖片</a></li>
</ul>
</li>
<li><a href="#misc">其它</a>

<ul>
<li><a href="#backslash">跳脫字元</a></li>
<li><a href="#autolink">自動連結</a></li>
</ul>
</li>
<li><a href="#acknowledgement">感謝</a></li>
</ul>


<p><strong>注意：</strong>這份文件是用 Markdown 寫的，你可以<a href="https://github.com/othree/markdown-syntax-zhtw/blob/master/syntax.md">看看它的原始檔</a> 。</p>

<hr />

<h2 id="overview">概述</h2>




<h3 id="philosophy">哲學</h3>


<p>Markdown 的目標是實現「易讀易寫」。</p>

<p>不過最需要強調的便是它的可讀性。一份使用 Markdown 格式撰寫的文件應該可以直接以純文字發佈，並且看起來不會像是由許多標籤或是格式指令所構成。Markdown 語法受到一些既有 text-to-HTML 格式的影響，包括 <a href="http://docutils.sourceforge.net/mirror/setext.html">Setext</a>、<a href="http://www.aaronsw.com/2002/atx/">atx</a>、<a href="http://textism.com/tools/textile/">Textile</a>、<a href="http://docutils.sourceforge.net/rst.html">reStructuredText</a>、<a href="http://www.triptico.com/software/grutatxt.html">Grutatext</a> 和 <a href="http://ettext.taint.org/doc/">EtText</a>，然而最大靈感來源其實是純文字的電子郵件格式。</p>

<p>因此 Markdown 的語法全由標點符號所組成，並經過嚴謹慎選，是為了讓它們看起來就像所要表達的意思。像是在文字兩旁加上星號，看起來就像*強調*。Markdown 的清單看起來，嗯，就是清單。假如你有使用過電子郵件，區塊引言看起來就真的像是引用一段文字。</p>

<h3 id="html">行內 HTML</h3>


<p>Markdown 的語法有個主要的目的：用來作為一種網路內容的<em>寫作</em>用語言。</p>

<p>Markdown 不是要來取代 HTML，甚至也沒有要和它相似，它的語法種類不多，只和 HTML 的一部分有關係，重點<em>不是</em>要創造一種更容易寫作 HTML 文件的語法，我認為 HTML 已經很容易寫了，Markdown 的重點在於，它能讓文件更容易閱讀、編寫。HTML 是一種<em>發佈</em>的格式，Markdown 是一種<em>編寫</em>的格式，因此，Markdown 的格式語法只涵蓋純文字可以涵蓋的範圍。</p>

<p>不在 Markdown 涵蓋範圍之外的標籤，都可以直接在文件裡面用 HTML 撰寫。不需要額外標註這是 HTML 或是 Markdown；只要直接加標籤就可以了。</p>

<p>只有區塊元素──比如 <code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code> 等標籤，必需在前後加上空白，以利與內容區隔。而且這些（元素）的開始與結尾標籤，不可以用 tab 或是空白來縮排。Markdown 的產生器有智慧型判斷，可以避免在區塊標籤前後加上沒有必要的 <code>&lt;p&gt;</code> 標籤。</p>

<p>舉例來說，在 Markdown 文件裡加上一段 HTML 表格：</p>

<pre><code>This is a regular paragraph.

&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;Foo&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

This is another regular paragraph.
</code></pre>

<p>請注意，Markdown 語法在 HTML 區塊標籤中將不會被進行處理。例如，你無法在 HTML 區塊內使用 Markdown 形式的<code>*強調*</code>。</p>

<p>HTML 的區段標籤如 <code>&lt;span&gt;</code>、<code>&lt;cite&gt;</code>、<code>&lt;del&gt;</code> 則不受限制，可以在 Markdown 的段落、清單或是標題裡任意使用。依照個人習慣，甚至可以不用Markdown 格式，而採用 HTML 標籤來格式化。舉例說明：如果比較喜歡 HTML 的  <code>&lt;a&gt;</code> 或 <code>&lt;img&gt;</code> 標籤，可以直接使用這些標籤，而不用 Markdown 提供的連結或是影像標示語法。</p>

<p>HTML 區段標籤和區塊標籤不同，在區段標籤的範圍內， Markdown 的語法是有效的。</p>

<h3 id="autoescape">特殊字元自動轉換</h3>


<p>在 HTML 文件中，有兩個字元需要特殊處理： <code>&lt;</code> 和 <code>&amp;</code> 。 <code>&lt;</code> 符號用於起始標籤，<code>&amp;</code> 符號則用於標記 HTML 實體，如果你只是想要使用這些符號，你必須要使用實體的形式，像是 <code>&amp;lt;</code> 和 <code>&amp;amp;</code>。</p>

<p><code>&amp;</code> 符號其實很讓寫作網路文件的人感到困擾，如果你要打「AT&amp;T」 ，你必須要寫成「<code>AT&amp;amp;T</code>」 ，還得轉換網址內的 <code>&amp;</code> 符號，如果你要連結到：</p>

<pre><code>http://images.google.com/images?num=30&amp;q=larry+bird
</code></pre>

<p>你必須要把網址轉成：</p>

<pre><code>http://images.google.com/images?num=30&amp;amp;q=larry+bird
</code></pre>

<p>才能放到連結標籤的 <code>href</code> 屬性裡。不用說也知道這很容易忘記，這也可能是 HTML 標準檢查所檢查到的錯誤中，數量最多的。</p>

<p>Markdown 允許你直接使用這些符號，但是你要小心跳脫字元的使用，如果你是在HTML 實體中使用 <code>&amp;</code> 符號的話，它不會被轉換，而在其它情形下，它則會被轉換成 <code>&amp;amp;</code>。所以你如果要在文件中插入一個著作權的符號，你可以這樣寫：</p>

<pre><code>&amp;copy;
</code></pre>

<p>Markdown 將不會對這段文字做修改，但是如果你這樣寫：</p>

<pre><code>AT&amp;T
</code></pre>

<p>Markdown 就會將它轉為：</p>

<pre><code>AT&amp;amp;T
</code></pre>

<p>類似的狀況也會發生在 <code>&lt;</code> 符號上，因為 Markdown 支援 <a href="#html">行內 HTML</a> ，如果你是使用 <code>&lt;</code> 符號作為 HTML 標籤使用，那 Markdown 也不會對它做任何轉換，但是如果你是寫：</p>

<pre><code>4 &lt; 5
</code></pre>

<p>Markdown 將會把它轉換為：</p>

<pre><code>4 &amp;lt; 5
</code></pre>

<p>不過需要注意的是，code 範圍內，不論是行內還是區塊， <code>&lt;</code> 和 <code>&amp;</code> 兩個符號都<em>一定</em>會被轉換成 HTML 實體，這項特性讓你可以很容易地用 Markdown 寫 HTML code （和 HTML 相對而言， HTML 語法中，你要把所有的 <code>&lt;</code> 和 <code>&amp;</code> 都轉換為 HTML 實體，才能在 HTML 文件裡面寫出 HTML code。）</p>

<hr />

<h2 id="block">區塊元素</h2>




<h3 id="p">段落和換行</h3>


<p>一個段落是由一個以上相連接的行句組成，而一個以上的空行則會切分出不同的段落（空行的定義是顯示上看起來像是空行，便會被視為空行。比方說，若某一行只包含空白和 tab，則該行也會被視為空行），一般的段落不需要用空白或斷行縮排。</p>

<p>「一個以上相連接的行句組成」這句話其實暗示了 Markdown 允許段落內的強迫斷行，這個特性和其他大部分的 text-to-HTML 格式不一樣（包括 MovableType 的「Convert Line Breaks」選項），其它的格式會把每個斷行都轉成 <code>&lt;br /&gt;</code> 標籤。</p>

<p>如果你<em>真的</em>想要插入 <code>&lt;br /&gt;</code> 標籤的話，在行尾加上兩個以上的空白，然後按 enter。</p>

<p>是的，這確實需要花比較多功夫來插入 <code>&lt;br /&gt;</code> ，但是「每個換行都轉換為 <code>&lt;br /&gt;</code>」的方法在 Markdown 中並不適合， Markdown 中 email 式的 <a href="#blockquote">區塊引言</a> 和多段落的 <a href="#list">清單</a> 在使用換行來排版的時候，不但更好用，還更好閱讀。</p>

<h3 id="header">標題</h3>


<p>Markdown 支援兩種標題的語法，<a href="http://docutils.sourceforge.net/mirror/setext.html">Setext</a> 和 <a href="http://www.aaronsw.com/2002/atx/">atx</a> 形式。</p>

<p>Setext 形式是用底線的形式，利用 <code>=</code> （最高階標題）和 <code>-</code> （第二階標題），例如：</p>

<pre><code>This is an H1
=============

This is an H2
-------------
</code></pre>

<p>任何數量的 <code>=</code> 和 <code>-</code> 都可以有效果。</p>

<p>Atx 形式則是在行首插入 1 到 6 個 <code>#</code> ，對應到標題 1 到 6 階，例如：</p>

<pre><code># This is an H1

## This is an H2

###### This is an H6
</code></pre>

<p>你可以選擇性地「關閉」atx 樣式的標題，這純粹只是美觀用的，若是覺得這樣看起來比較舒適，你就可以在行尾加上 <code>#</code>，而行尾的 <code>#</code> 數量也不用和開頭一樣（行首的井字數量決定標題的階數）：</p>

<pre><code># This is an H1 #

## This is an H2 ##

### This is an H3 ######
</code></pre>

<h3 id="blockquote">Blockquotes</h3>


<p>Markdown 使用 email 形式的區塊引言，如果你很熟悉如何在 email 信件中引言，你就知道怎麼在 Markdown 文件中建立一個區塊引言，那會看起來像是你強迫斷行，然後在每行的最前面加上 <code>&gt;</code> ：</p>

<pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.
&gt; 
&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
&gt; id sem consectetuer libero luctus adipiscing.
</code></pre>

<p>Markdown 也允許你只在整個段落的第一行最前面加上 <code>&gt;</code> ：</p>

<pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.

&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.
</code></pre>

<p>區塊引言可以有階層（例如：引言內的引言），只要根據層數加上不同數量的 <code>&gt;</code> ：</p>

<pre><code>&gt; This is the first level of quoting.
&gt;
&gt; &gt; This is nested blockquote.
&gt;
&gt; Back to the first level.
</code></pre>

<p>引言的區塊內也可以使用其他的 Markdown 語法，包括標題、清單、程式碼區塊等：</p>

<pre><code>&gt; ## This is a header.
&gt; 
&gt; 1.   This is the first list item.
&gt; 2.   This is the second list item.
&gt; 
&gt; Here's some example code:
&gt; 
&gt;     return shell_exec("echo $input | $markdown_script");
</code></pre>

<p>任何標準的文字編輯器都能簡單地建立 email 樣式的引言，例如 BBEdit ，你可以選取文字後然後從選單中選擇<em>增加引言階層</em>。</p>

<h3 id="list">清單</h3>


<p>Markdown 支援有序清單和無序清單。</p>

<p>無序清單使用星號、加號或是減號作為清單標記：</p>

<pre><code>*   Red
*   Green
*   Blue
</code></pre>

<p>等同於：</p>

<pre><code>+   Red
+   Green
+   Blue
</code></pre>

<p>也等同於：</p>

<pre><code>-   Red
-   Green
-   Blue
</code></pre>

<p>有序清單則使用數字接著一個英文句點：</p>

<pre><code>1.  Bird
2.  McHale
3.  Parish
</code></pre>

<p>很重要的一點是，你在清單標記上使用的數字並不會影響輸出的 HTML 結果，上面的清單所產生的 HTML 標記為：</p>

<pre><code>&lt;ol&gt;
&lt;li&gt;Bird&lt;/li&gt;
&lt;li&gt;McHale&lt;/li&gt;
&lt;li&gt;Parish&lt;/li&gt;
&lt;/ol&gt;
</code></pre>

<p>如果你的清單標記寫成：</p>

<pre><code>1.  Bird
1.  McHale
1.  Parish
</code></pre>

<p>或甚至是：</p>

<pre><code>3. Bird
1. McHale
8. Parish
</code></pre>

<p>你都會得到完全相同的 HTML 輸出。重點在於，你可以讓 Markdown 文件的清單數字和輸出的結果相同，或是你懶一點，你可以完全不用在意數字的正確性。</p>

<p>如果你使用懶惰的寫法，建議第一個項目最好還是從 1. 開始，因為 Markdown 未來可能會支援有序清單的 start 屬性。</p>

<p>清單項目標記通常是放在最左邊，但是其實也可以縮排，最多三個空白，項目標記後面則一定要接著至少一個空白或 tab。</p>

<p>要讓清單看起來更漂亮，你可以把內容用固定的縮排整理好：</p>

<pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
    viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
    Suspendisse id sem consectetuer libero luctus adipiscing.
</code></pre>

<p>但是如果你很懶，那也不一定需要：</p>

<pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
Suspendisse id sem consectetuer libero luctus adipiscing.
</code></pre>

<p>如果清單項目間用空行分開， Markdown 會把項目的內容在輸出時用 <code>&lt;p&gt;</code>
標籤包起來，舉例來說：</p>

<pre><code>*   Bird
*   Magic
</code></pre>

<p>會被轉換為：</p>

<pre><code>&lt;ul&gt;
&lt;li&gt;Bird&lt;/li&gt;
&lt;li&gt;Magic&lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p>但是這個：</p>

<pre><code>*   Bird

*   Magic
</code></pre>

<p>會被轉換為：</p>

<pre><code>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p>清單項目可以包含多個段落，每個項目下的段落都必須縮排 4 個空白或是一個 tab ：</p>

<pre><code>1.  This is a list item with two paragraphs. Lorem ipsum dolor
    sit amet, consectetuer adipiscing elit. Aliquam hendrerit
    mi posuere lectus.

    Vestibulum enim wisi, viverra nec, fringilla in, laoreet
    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum
    sit amet velit.

2.  Suspendisse id sem consectetuer libero luctus adipiscing.
</code></pre>

<p>如果你每行都有縮排，看起來會看好很多，當然，再次地，如果你很懶惰，Markdown 也允許：</p>

<pre><code>*   This is a list item with two paragraphs.

    This is the second paragraph in the list item. You're
only required to indent the first line. Lorem ipsum dolor
sit amet, consectetuer adipiscing elit.

*   Another item in the same list.
</code></pre>

<p>如果要在清單項目內放進引言，那 <code>&gt;</code> 就需要縮排：</p>

<pre><code>*   A list item with a blockquote:

    &gt; This is a blockquote
    &gt; inside a list item.
</code></pre>

<p>如果要放程式碼區塊的話，該區塊就需要縮排<em>兩次</em>，也就是 8 個空白或是兩個 tab：</p>

<pre><code>*   A list item with a code block:

        &lt;code goes here&gt;
</code></pre>

<p>當然，項目清單很可能會不小心產生，像是下面這樣的寫法：</p>

<pre><code>1986. What a great season.
</code></pre>

<p>換句話說，也就是在行首出現<em>數字-句點-空白</em>，要避免這樣的狀況，你可以在句點前面加上反斜線。</p>

<pre><code>1986\. What a great season.
</code></pre>

<h3 id="precode">程式碼區塊</h3>


<p>和程式相關的寫作或是標籤語言原始碼通常會有已經排版好的程式碼區塊，通常這些區塊我們並不希望它以一般段落文件的方式去排版，而是照原來的樣子顯示，Markdown 會用 <code>&lt;pre&gt;</code> 和 <code>&lt;code&gt;</code> 標籤來把程式碼區塊包起來。</p>

<p>要在 Markdown 中建立程式碼區塊很簡單，只要簡單地縮排 4 個空白或是 1 個 tab 就可以，例如，下面的輸入：</p>

<pre><code>This is a normal paragraph:

    This is a code block.
</code></pre>

<p>Markdown 會轉換成：</p>

<pre><code>&lt;p&gt;This is a normal paragraph:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;This is a code block.
&lt;/code&gt;&lt;/pre&gt;
</code></pre>

<p>這個每行一階的縮排（4 個空白或是 1 個 tab），都會被移除，例如：</p>

<pre><code>Here is an example of AppleScript:

    tell application "Foo"
        beep
    end tell
</code></pre>

<p>會被轉換為：</p>

<pre><code>&lt;p&gt;Here is an example of AppleScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tell application "Foo"
    beep
end tell
&lt;/code&gt;&lt;/pre&gt;
</code></pre>

<p>一個程式碼區塊會一直持續到沒有縮排的那一行（或是文件結尾）。</p>

<p>在程式碼區塊裡面， <code>&amp;</code> 、 <code>&lt;</code> 和 <code>&gt;</code> 會自動轉成 HTML 實體，這樣的方式讓你非常容易使用 Markdown 插入範例用的 HTML 原始碼，只需要複製貼上，再加上縮排就可以了，剩下的 Markdown 都會幫你處理，例如：</p>

<pre><code>    &lt;div class="footer"&gt;
        &amp;copy; 2004 Foo Corporation
    &lt;/div&gt;
</code></pre>

<p>會被轉換為：</p>

<pre><code>&lt;pre&gt;&lt;code&gt;&amp;lt;div class="footer"&amp;gt;
    &amp;amp;copy; 2004 Foo Corporation
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</code></pre>

<p>程式碼區塊中，一般的 Markdown 語法不會被轉換，像是星號便只是星號，這表示你可以很容易地以 Markdown 語法撰寫 Markdown 語法相關的文件。</p>

<h3 id="hr">分隔線</h3>


<p>你可以在一行中用三個或以上的星號、減號、底線來建立一個分隔線，行內不能有其他東西。你也可以在星號中間插入空白。下面每種寫法都可以建立分隔線：</p>

<pre><code>* * *

***

*****

- - -

---------------------------------------
</code></pre>

<hr />

<h2 id="span">區段元素</h2>




<h3 id="link">連結</h3>


<p>Markdown 支援兩種形式的連結語法： <em>行內</em>和<em>參考</em>兩種形式。</p>

<p>不管是哪一種，連結的文字都是用 [方括號] 來標記。</p>

<p>要建立一個行內形式的連結，只要在方塊括號後面馬上接著括號並插入網址連結即可，如果你還想要加上連結的 title 文字，只要在網址後面，用雙引號把 title 文字包起來即可，例如：</p>

<pre><code>This is [an example](http://example.com/ "Title") inline link.

[This link](http://example.net/) has no title attribute.
</code></pre>

<p>會產生：</p>

<pre><code>&lt;p&gt;This is &lt;a href="http://example.com/" title="Title"&gt;
an example&lt;/a&gt; inline link.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://example.net/"&gt;This link&lt;/a&gt; has no
title attribute.&lt;/p&gt;
</code></pre>

<p>如果你是要連結到同樣主機的資源，你可以使用相對路徑：</p>

<pre><code>See my [About](/about/) page for details.   
</code></pre>

<p>參考形式的連結使用另外一個方括號接在連結文字的括號後面，而在第二個方括號裡面要填入用以辨識連結的標籤：</p>

<pre><code>This is [an example][id] reference-style link.
</code></pre>

<p>你也可以選擇性地在兩個方括號中間加上空白：</p>

<pre><code>This is [an example] [id] reference-style link.
</code></pre>

<p>接著，在文件的任意處，你可以把這個標籤的連結內容定義出來：</p>

<pre><code>[id]: http://example.com/  "Optional Title Here"
</code></pre>

<p>連結定義的形式為：</p>

<ul>
<li>方括號，裡面輸入連結的辨識用標籤</li>
<li>接著一個冒號</li>
<li>接著一個以上的空白或 tab</li>
<li>接著連結的網址</li>
<li>選擇性地接著 title 內容，可以用單引號、雙引號或是括弧包著</li>
</ul>


<p>下面這三種連結的定義都是相同：</p>

<pre><code>[foo]: http://example.com/  "Optional Title Here"
[foo]: http://example.com/  'Optional Title Here'
[foo]: http://example.com/  (Optional Title Here)
</code></pre>

<p><strong>請注意：</strong>有一個已知的問題是 Markdown.pl 1.0.1 會忽略單引號包起來的連結 title。</p>

<p>連結網址也可以用方括號包起來：</p>

<pre><code>[id]: &lt;http://example.com/&gt;  "Optional Title Here"
</code></pre>

<p>你也可以把 title 屬性放到下一行，也可以加一些縮排，網址太長的話，這樣會比較好看：</p>

<pre><code>[id]: http://example.com/longish/path/to/resource/here
    "Optional Title Here"
</code></pre>

<p>網址定義只有在產生連結的時候用到，並不會直接出現在文件之中。</p>

<p>連結辨識標籤可以有字母、數字、空白和標點符號，但是並<em>不</em>區分大小寫，因此下面兩個連結是一樣的：</p>

<pre><code>[link text][a]
[link text][A]
</code></pre>

<p><em>預設的連結標籤</em>功能讓你可以省略指定連結標籤，這種情形下，連結標籤和連結文字會視為相同，要用預設連結標籤只要在連結文字後面加上一個空的方括號，如果你要讓 &#8220;Google&#8221; 連結到 google.com，你可以簡化成：</p>

<pre><code>[Google][]
</code></pre>

<p>然後定義連結內容：</p>

<pre><code>[Google]: http://google.com/
</code></pre>

<p>由於連結文字可能包含空白，所以這種簡化的標籤內也可以包含多個文字：</p>

<pre><code>Visit [Daring Fireball][] for more information.
</code></pre>

<p>然後接著定義連結：</p>

<pre><code>[Daring Fireball]: http://daringfireball.net/
</code></pre>

<p>連結的定義可以放在文件中的任何一個地方，我比較偏好直接放在連結出現段落的後面，你也可以把它放在文件最後面，就像是註解一樣。</p>

<p>下面是一個參考式連結的範例：</p>

<pre><code>I get 10 times more traffic from [Google] [1] than from
[Yahoo] [2] or [MSN] [3].

  [1]: http://google.com/        "Google"
  [2]: http://search.yahoo.com/  "Yahoo Search"
  [3]: http://search.msn.com/    "MSN Search"
</code></pre>

<p>如果改成用連結名稱的方式寫：</p>

<pre><code>I get 10 times more traffic from [Google][] than from
[Yahoo][] or [MSN][].

  [google]: http://google.com/        "Google"
  [yahoo]:  http://search.yahoo.com/  "Yahoo Search"
  [msn]:    http://search.msn.com/    "MSN Search"
</code></pre>

<p>上面兩種寫法都會產生下面的 HTML。</p>

<pre><code>&lt;p&gt;I get 10 times more traffic from &lt;a href="http://google.com/"
title="Google"&gt;Google&lt;/a&gt; than from
&lt;a href="http://search.yahoo.com/" title="Yahoo Search"&gt;Yahoo&lt;/a&gt;
or &lt;a href="http://search.msn.com/" title="MSN Search"&gt;MSN&lt;/a&gt;.&lt;/p&gt;
</code></pre>

<p>下面是用行內形式寫的同樣一段內容的 Markdown 文件，提供作為比較之用：</p>

<pre><code>I get 10 times more traffic from [Google](http://google.com/ "Google")
than from [Yahoo](http://search.yahoo.com/ "Yahoo Search") or
[MSN](http://search.msn.com/ "MSN Search").
</code></pre>

<p>參考式的連結其實重點不在於它比較好寫，而是它比較好讀，比較一下上面的範例，使用參考式的文章本身只有 81 個字元，但是用行內形式的連結卻會增加到 176 個字元，如果是用純 HTML 格式來寫，會有 234 個字元，在 HTML 格式中，標籤比文字還要多。</p>

<p>使用 Markdown 的參考式連結，可以讓文件更像是瀏覽器最後產生的結果，讓你可以把一些標記相關的資訊移到段落文字之外，你就可以增加連結而不讓文章的閱讀感覺被打斷。</p>

<h3 id="em">強調</h3>


<p>Markdown 使用星號（<code>*</code>）和底線（<code>_</code>）作為標記強調字詞的符號，被 <code>*</code> 或 <code>_</code> 包圍的字詞會被轉成用 <code>&lt;em&gt;</code> 標籤包圍，用兩個 <code>*</code> 或 <code>_</code> 包起來的話，則會被轉成 <code>&lt;strong&gt;</code>，例如：</p>

<pre><code>*single asterisks*

_single underscores_

**double asterisks**

__double underscores__
</code></pre>

<p>會轉成：</p>

<pre><code>&lt;em&gt;single asterisks&lt;/em&gt;

&lt;em&gt;single underscores&lt;/em&gt;

&lt;strong&gt;double asterisks&lt;/strong&gt;

&lt;strong&gt;double underscores&lt;/strong&gt;
</code></pre>

<p>你可以隨便用你喜歡的樣式，唯一的限制是，你用什麼符號開啟標籤，就要用什麼符號結束。</p>

<p>強調也可以直接插在文字中間：</p>

<pre><code>un*frigging*believable
</code></pre>

<p>但是如果你的 <code>*</code> 和 <code>_</code> 兩邊都有空白的話，它們就只會被當成普通的符號。</p>

<p>如果要在文字前後直接插入普通的星號或底線，你可以用反斜線：</p>

<pre><code>\*this text is surrounded by literal asterisks\*
</code></pre>

<h3 id="code">程式碼</h3>


<p>如果要標記一小段行內程式碼，你可以用反引號把它包起來（<code>`</code>），例如：</p>

<pre><code>Use the `printf()` function.
</code></pre>

<p>會產生：</p>

<pre><code>&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;
</code></pre>

<p>如果要在程式碼區段內插入反引號，你可以用多個反引號來開啟和結束程式碼區段：</p>

<pre><code>``There is a literal backtick (`) here.``
</code></pre>

<p>這段語法會產生：</p>

<pre><code>&lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt;
</code></pre>

<p>程式碼區段的起始和結束端都可以放入一個空白，起始端後面一個，結束端前面一個，這樣你就可以在區段的一開始就插入反引號：</p>

<pre><code>A single backtick in a code span: `` ` ``

A backtick-delimited string in a code span: `` `foo` ``
</code></pre>

<p>會產生：</p>

<pre><code>&lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;
</code></pre>

<p>在程式碼區段內，<code>&amp;</code> 和方括號都會被轉成 HTML 實體，這樣會比較容易插入 HTML 原始碼，Markdown 會把下面這段：</p>

<pre><code>Please don't use any `&lt;blink&gt;` tags.
</code></pre>

<p>轉為：</p>

<pre><code>&lt;p&gt;Please don't use any &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;
</code></pre>

<p>你也可以這樣寫：</p>

<pre><code>`&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.
</code></pre>

<p>以產生：</p>

<pre><code>&lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encoded
equivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt;
</code></pre>

<h3 id="img">圖片</h3>


<p>很明顯地，要在純文字應用中設計一個 「自然」的語法來插入圖片是有一定難度的。</p>

<p>Markdown 使用一種和連結很相似的語法來標記圖片，同樣也允許兩種樣式： <em>行內</em>和<em>參考</em>。</p>

<p>行內圖片的語法看起來像是：</p>

<pre><code>![Alt text](/path/to/img.jpg)

![Alt text](/path/to/img.jpg "Optional title")
</code></pre>

<p>詳細敘述如下：</p>

<ul>
<li>一個驚嘆號 <code>!</code></li>
<li>接著一個方括號，裡面放上圖片的替代文字</li>
<li>接著一個普通括號，裡面放上圖片的網址，最後還可以用引號包住並加上
選擇性的 &#8216;title&#8217; 文字。</li>
</ul>


<p>參考式的圖片語法則長得像這樣：</p>

<pre><code>![Alt text][id]
</code></pre>

<p>「id」是圖片參考的名稱，圖片參考的定義方式則和連結參考一樣：</p>

<pre><code>[id]: url/to/image  "Optional title attribute"
</code></pre>

<p>到目前為止， Markdown 還沒有辦法指定圖片的寬高，如果你需要的話，你可以使用普通的 <code>&lt;img&gt;</code> 標籤。</p>

<hr />

<h2 id="misc">其它</h2>




<h3 id="autolink">自動連結</h3>


<p>Markdown 支援比較簡短的自動連結形式來處理網址和電子郵件信箱，只要是用方括號包起來， Markdown 就會自動把它轉成連結，連結的文字就和連結位置一樣，例如：</p>

<pre><code>&lt;http://example.com/&gt;
</code></pre>

<p>Markdown 會轉為：</p>

<pre><code>&lt;a href="http://example.com/"&gt;http://example.com/&lt;/a&gt;
</code></pre>

<p>自動的郵件連結也很類似，只是 Markdown 會先做一個編碼轉換的過程，把文字字元轉成 16 進位碼的 HTML 實體，這樣的格式可以混淆一些不好的信箱地址收集機器人，例如：</p>

<pre><code>&lt;address@example.com&gt;
</code></pre>

<p>Markdown 會轉成：</p>

<pre><code>&lt;a href="&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;
&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;
&amp;#109;"&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;
&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;
</code></pre>

<p>在瀏覽器裡面，這段字串會變成一個可以點擊的「address@example.com」連結。</p>

<p>（這種作法雖然可以混淆不少的機器人，但並無法全部擋下來，不過這樣也比什麼都不做好些。無論如何，公開你的信箱終究會引來廣告信件的。）</p>

<h3 id="backslash">跳脫字元</h3>


<p>Markdown 可以利用反斜線來插入一些在語法中有其它意義的符號，例如：如果你想要用星號加在文字旁邊的方式來做出強調效果（但不用 <code>&lt;em&gt;</code> 標籤），你可以在星號的前面加上反斜線：</p>

<pre><code>\*literal asterisks\*
</code></pre>

<p>Markdown 支援在下面這些符號前面加上反斜線來幫助插入普通的符號：</p>

<pre><code>\   反斜線
`   反引號
*   星號
_   底線
{}  大括號
[]  方括號
()  括號
#   井字號
+   加號
-   減號
.   英文句點
!   驚嘆號
</code></pre>

<h2 id="acknowledgement">感謝</h2>


<p>感謝 <a href="https://twitter.com/#!/leafy7382">leafy7382</a> 協助翻譯，<a href="http://iamhlb.com/">hlb</a>、<a href="http://twitter.com/randylien">Randylien</a> 幫忙潤稿，<a href="https://twitter.com/#!/ethantw">ethantw</a> 的<a href="http://ethantw.net/projects/han/">漢字標準格式・CSS Reset</a>， <a href="http://kidwm.net/">WM</a> 回報文字錯誤。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress 像黑客一样写博客]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/01/08/031317-octopress/"/>
    <updated>2012-01-08T03:13:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/01/08/031317-octopress</id>
    <content type="html"><![CDATA[<h1>Octopress 简介</h1>

<p>Octopress is a framework designed by Brandon Mathis for Jekyll, the blog aware static site generator powering Github Pages.</p>

<h2>优点</h2>

<p>用文件方式储存数据，无需数据库
以静态方式发布，可直接挂在github等地方
用markdown格式写博客
可以轻松的配置和发布</p>

<h2>安装</h2>

<pre><code>$ git clone git://github.com/imathis/octopress.git octopress
$ mv octopress blog
$ cd blog
$ sudo gem install rake --version=0.9.2
$ sudo gem install bundler
$ bundler install
$ rake install
</code></pre>

<h2>配置GitHub</h2>

<pre><code>$ rake setup_github_pages
&gt;git@github.com:zhangchuan/zhangchuan.github.com.git
</code></pre>

<h2>常用命令</h2>

<h3>添加文章</h3>

<pre><code>$ rake new_post["title"]
$ rake generate       #发布文件到public目录
$ rake watch          #监控source和sass目录的变动
$ rake preview        #启动服务器并监控变动，通过http://localhost:4000预览
</code></pre>

<h3>发布</h3>

<pre><code>$ rake generate
$ rake deploy
</code></pre>

<h3>保存源代码</h3>

<pre><code>$ git add .
$ git commit -m 'blog'
$ git push origin source
</code></pre>

<h2>自定义样式</h2>

<pre><code>$ vi sass/custom/_styles.scss
h1 { font-size: 1.2em; }
h2 { font-size: 1.1em; }
h3 { font-size: 1.0em; }
h4 { font-size: .9em; }
h5 { font-size: .8em; }
code { font-size: 0.8em; }

p, blockquote, ul, ol, h1, h2, h3, h4, h5, h6, code {
    margin-bottom: 1.2em;
}

article {
    font-size: 0.8em;
    line-height: 1.2em;
}

body &gt; header h1 { font-size: 1.2em; }
body &gt; header h2 { font-size: 0.8em; }
body &gt; footer p:last-child {
    font-size: 0.6em;
    margin-bottom: 0;
}

#content .blog-index article h1 {
    font-size: 1.2em;
}
#blog-archives h1 h2 a time {
    font-size: 0.8em;
    margin-top: 0.2em;
    margin-bottom: 0.2em;
}

// 边栏
aside.sidebar section h1 {
    font-size: 1.2em;
}
aside.sidebar a {
    font-size: 0.9em;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
