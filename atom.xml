<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[研究中心]]></title>
  <link href="http://zhangchuan.github.com/atom.xml" rel="self"/>
  <link href="http://zhangchuan.github.com/"/>
  <updated>2012-02-24T19:04:20+08:00</updated>
  <id>http://zhangchuan.github.com/</id>
  <author>
    <name><![CDATA[Cloud.Zhang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PyMongo 创建,更新删除文档[MongoDB权威指南 第三章]]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/02/23/120934-python/"/>
    <updated>2012-02-23T12:09:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/02/23/120934-python</id>
    <content type="html"><![CDATA[<ul>
<li>#

<pre><code>from pymongo import Connection
connection = Connection()
db = connection['test']
collection = db['col_test']
</code></pre></li>
<li><p>3.1 插入并保存文档</p>

<pre><code>mongo&gt; db.foo.insert({"bar": "baz"})
#
db.foo.insert[{"bar": "baz"}]
</code></pre></li>
<li><p>3.1.1 批量插入</p></li>
<li>批量插入是单个TCP请求, 提高处理效率. 只适用将多个文档插入到一个集合.</li>
<li><p>批量插入有消息长度为16M的限制.</p>

<pre><code>mongo&gt; ???
# 批量插入对象必须是序列对象 
db.foo.insert([{"bar": "baz"}, {"baz": "bar"}])
</code></pre></li>
<li><p>3.1.2 插入: 原理和作用</p></li>
<li>在启动时打开&#8211;objecheck选项会检查输入的有效性, 但会影响效率</li>
<li><p>文档不能超过4M</p></li>
<li><p>3.2 删除文档</p>

<pre><code># 删除集合中所有文档. 但不会删除集合本身及其索引.
mongo&gt; db.foo.remove()
# 也可按指定条件删除
db.foo.remove()
db.foo.remove({"bar": "baz"})
</code></pre></li>
<li><p>删除速度</p></li>
<li>删除集合比删除文档速度更快.

<pre><code>import time
from pymongo import Connection

db = Connection().foo
collection = db.bar
# 插入测试记录
for i in range(1000000):
    collection.insert({"foo": "bar", "baz": i, "z": 10 - i})

start = time.time()
# 使用db.drop_collection("bar")代替下面两行, 速度提升会相当明显
#db.drop_collection("bar")
collection.remove()
collection.find_one()

total = time.time() - start
print "%d seconds" % total
</code></pre></li>
<li>3.3 更新文档</li>
<li>update有2个参数, 一个是查询文档, 一个是修改文档</li>
<li>3.3.1 文档替换</li>
<li>确保更新总是指向唯一文档

<pre><code>from pymongo import Connection
db = Connection().foo
# 导入测试数据
db.users.insert({"name": "joe", "friends": 32, "enemies": 2})
# mongo shell 
mongo&gt; var joe = db.users.findOne({"name": "joe"});
mongo&gt; joe.relationships = {"friends": joe.friends, "enemies": joe.enemies};
mongo&gt; joe.username = joe.name;
mongo&gt; delete joe.friends;
mongo&gt; delete joe.enemies;
mongo&gt; delete joe.name;
mongo&gt; db.users.update({"name": "joe"}, joe);
# OK 转换为python代码
joe = db.users.find_one({"name": "joe"})
joe['relationships'] = {"friends": joe['friends'], "enemies": joe['enemies']}
joe['username'] = joe['name']
del joe['friends']
del joe['enemies']
del joe['name']
# 不是子字典?
db.users.update({"username": joe['username']}, joe)
</code></pre></li>
<li>3.3.2 使用修改器

<pre><code># 每当有人访问页面的时候, 增加计数器
from pymongo import Connection
db = Connection().foo
# 导入测试数据
db.analytics.insert({"url":"www.example.com", "pageviews": 52})
# 使用$inc修改器
db.analytics.update({"url":"www.example.com"}, {"$inc": {"pageviews": 1}})
# 执行db.analytics.find()会发现"pageviews"的值增加了1
db.analytics.find().next()
</code></pre></li>
<li>1 &#8220;$set&#8221;修改器入门</li>
<li>&#8220;$set&#8221;用来指定一个键的数值,如果不存在就创建它

<pre><code># 导入测试数据
db.users.insert({"name": "joe", "age": 30, "sex": "male", "location": "Wisconsin"})
# 添加喜欢的书籍
db.users.update({"name": "joe", "age": 30}, {"$set": {"favorite book": "war and peace"}})
# 修改喜欢的书籍
db.users.update({"name": "joe", "age": 30}, {"$set": {"favorite book": "green eggs and ham"}})
# cool的是还可以修改键值的数据类型
db.users.update({"name": "joe", "age": 30}, {"$set": {"favorite book": ["cat's cradle", "foundation trilogy", "ender's game"]}}) 
# 不爱读书了, 可以试试"$unset"
db.users.update({"name": "joe", "age": 30}, {"$unset": {"favorite book": 1}})

# 也可用"$set"修改内嵌的文档
# 导入测试数据 
from pymongo import Connection
db = Connection().blog
db.posts.insert({"title": "A Blog Post", "content": "...", "author": {"name": "joe", "email": "joe@example.com"}})
# OK, 开始更新
db.posts.update({"author.name": "joe"}, {"$set": {"author.name": "joe schmoe"}})
</code></pre></li>
<li>2 增加和减少</li>
<li>&#8220;$inc&#8221; 修改器用来增加已有的键值, 或在不存在的时候创建一个键, 操作对象必须是数字类型.

<pre><code>from pymongo import Connection
db = Connection().foo
db.games.insert({"game": "pinball", "user": "joe"})
# 分数并不存在, "$inc"创建这个键后, 设定初始值
db.games.update({"game": "pinball", "user": "joe"}, {"$inc": {"score": 50}})
# 如果小球落入加分区, 要加10000分
db.games.update({"game": "pinball", "user": "joe"}, {"$inc": {"score": 10000}})
</code></pre></li>
<li>3 数组操作器</li>
<li>&#8220;$push&#8221;向已有的数据末尾加入一个元素

<pre><code>from pymongo import Connection
db = Connection().blog
# 导入测试数据
db.posts.insert({"title": "A blog post", "content": "..."})
# 下面两行有待调试
db.posts.update({"title": "A blog post"}, {"$push": {"comments": {"name": "joe", "email": "joe@example.com", "content": "nice post."}}})
db.posts.update({"title": "A blog post"}, {"$push": {"comments": {"name": "bob", "email": "bob@example.com", "content": "good post."}}})
# "$ne", 如果一个值不在数据就把它加进去
db.papers.update({"authors cited": {"$ne": "Richie"}}, {"$push": {"authors cited": "Richie"}})
# 不过有时更适合用"$addToSet"
# 导入测试数据
db.users.insert({"username": "joe", "emails": ["joe@example.com", "joe@gmail.com", "joe@yahoo.com"]})
# 用"$addToSet"可以避免重复
db.users.update({"username": "joe"}, {"$addToSet": {"emails": "joe@gmail.com"}})
db.users.update({"username": "joe"}, {"$addToSet": {"emails": "joe@gmail.com"}})
# "$addToSet"和"$each"组合起来, 可以添加多个不同的值. "$ne"和"$push"就不能实现.
db.users.update({"username": "joe"}, {"$addToSet": {"emails": {"$each": ["joe@php.net", "joe@example.com", "joe@python.org"]}}})
# 从数组删除元素, 可以使用"$pop"修改器
# 从数组末尾删除一个元素
{$pop: {key: 1}}
# 从数组头部删除
{$pop: {key: -1}}
# 基于特定条件删除元素, 可以用"$pull"
db.lists.insert({"todo": ["dishes", "laundry", "dry cleaning"]})
db.lists.update({}, {"$pull": {"todo": "laundry"}})
</code></pre></li>
<li>4 数组的定位修改器

<pre><code># 若数组包含多个值, 针对某一特定值的修改需要使用定位操作符"$"定位操作,数组下标以0开始
# 导入测试数据
db.posts.insert({"content": "...", "comments": [{"comment": "good post", "author": "John", "votes":0},
{"comment": "i thought it was too short", "author": "Claire", "votes":3},
{"comment": "free watches", "author": "Alice", "votes":-1}]})
# 增加第一个评论的投票数量
db.posts.update({"content": "..."}, {"$inc": {"comments.0.votes": 1}})
# 但是有时怎么会预先知道下标呢? 比如上面的comments.0.votes. 这时就要用到"$"去更新,如果有多个匹配,只会更新第一个匹配元素
db.posts.update({"comments.author": "John"}, {"$set": {"comments.$.author": "Jim"}})
</code></pre></li>
<li>5 修改器的速度</li>
<li><p>在不改变文档大小的前提下,更新会很快. &#8220;$inc&#8221;, &#8220;$set&#8221;相对更快.&#8221;$push&#8221;, &#8220;$pull&#8221;相对更慢</p>

<pre><code>from pymongo import Connection
import time

db = Connection().performance_test
db.drop_collection("updates")
collection = db.updates

collection.insert({"x": 1})
# make sure the insert is complete before we start timing
collection.find_one()

start = time.time()

for i in range(100000):
    collection.update({}, {"$inc": {"x": 1}})
    # 如果改用"$push"的话. 速度就很悲剧了
    collection.update({}, {"$push": {"x": 1}})

# make sure the updates are complete before we stop timing
collection.find_one()

print time.time() - start
</code></pre></li>
<li><p>3.3.3 upsert</p></li>
<li><p>upsert是一种特殊的更新. 如果文档不符合更新条件, 则会以这个条件和更新文档为基础创建一个新文档</p>

<pre><code># update 第3个参数表示这个是upsert. &lt;-true
db.analytics.update({"url": "/blog"}, {"$inc": {"visits": 1}}, True)
db.math.remove()
db.math.update({"count": 25}, {"$inc": {"count": 3}}, true)
db.math.find_one()
# 下面会再新建一个文档. 为什么, 因为上面的count已经是28, 由于没有匹配
db.math.update({"count": 25}, {"$inc": {"count": 3}}, true)
</code></pre></li>
<li><p>save是一个shell函数, 可以在文档不存在时插入(文档不含有_id), 存在时更新(含有_id), 调用upsert</p>

<pre><code>x = db.math.find_one()
x['count'] = 20
db.math.save(x)
</code></pre></li>
<li>3.3.4 更新多个文档</li>
<li>默认只更新第一个匹配的文档, 如要要让所有文档更新, 可以设置update的第4个参数为true

<pre><code># 给所有在特定日期过生的用户发一份礼物.
# help(db.users.update)
db.users.update({"birthday": "10/13/1978"}, {"$set": {"gift": "Happy Birtday!"}}, False, multi=True)
# 想要知道到底更新了多少条文档
db.count.update({x: 1}, {"$inc": {x: 1}}, False, multi=True)
mongo&gt; db.runCommand({getLastError: 1})
</code></pre></li>
<li>3.3.5 返回已更新的文档</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[monogodb 大杂烩]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/02/22/141006-mongodb/"/>
    <updated>2012-02-22T14:10:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/02/22/141006-mongodb</id>
    <content type="html"><![CDATA[<h1>一, 安装</h1>

<p><a href="http://www.mongodb.org/downloads">下载连接</a></p>

<pre><code># mkdir -p /usr/local/mongo/{etc,bin,log}
# mkdir -p /data

# /usr/local/mongo/etc/mongodb.conf
# 数据文件存放路径
dbpath=/var/lib/mongodb

# 错误日志文件
logpath=/var/log/mongodb/mongodb.log

# 错误日志文件采用追加模式,默认是覆盖模式
logappend=true

# 对外服务绑定IP. 根据业务需要, 尽量不要放公网.
#bind_ip

# 对外服务绑定端口,Web管理端口在这个port的基础上+1000 
port = 27017
# 开启简单的rest API, 提供Web管理界面操作支持
rest = true

# 定期显示CPU的CPU利用率和iowait
#cpu = true

# 关闭验证(默认)
#noauth = true
# 启用验证
#auth = true

# 详细输出
#verbose = true
# 安静输出
#quiet = true

# 在收到客户数据,检查数据的有效性
#objcheck = true

# 限制每个数据库的文件数，设置默认为8
#quota = true
# Set oplogging level where n is
#   0=off (default)
#   1=W
#   2=R
#   3=both
#   7=W+some reads
# 规定每个数据库允许的文件数
#quotaFiles

# diaglog选项 0=off 1=W 2=R 3=both 7=W+some reads
# 提供的方式，是只读，只写，还是读写都行，还是主要写+部分的读模式
#diaglog = 0

# 调试诊断选项
#nocursors = true
# 忽略查询命中率
#nohints = true
# 关闭http接口访问
#nohttpinterface = true
# 禁用脚本引擎
#noscripting = true
# 不允许表扫描
#notablescan = true
# 禁用数据文件预分配(往往影响性能)
#noprealloc = true
# 设置信数据库.ns文件大小(MB) =16
#nssize = &lt;size&gt;

#修复所有数据库
#repair
#修复库生成的文件的目录,默认为目录名称dbpath
#repairpath
#数据写入磁盘的时间秒数(0=never,不推荐),默认60
#syncdelay

# Accout token for Mongo monitoring server.
#mms-token = &lt;token&gt;
# Server name for Mongo monitoring server.
#mms-name = &lt;server-name&gt;
# Ping interval for Mongo monitoring server.
#mms-interval = &lt;seconds&gt;

# 从一个dbpath里启用从库复制服务，该dbpath的数据库是主库的快照，可用于快速启用同步
#fastsync
# 如果从库与主库同步数据差得多，自动重新同步
#autoresync
# pair???
#pairwith
# 仲裁服务器，在主从和pair中用到
#arbiter
# 设置操作日志的大小(MB)
#oplogSize
# 设置存储操作日志的内存大小
#opIdMem

# 从库模式
#slave = true
# 当为从时，指定主的地址和端口
#source = master.example.com
# 设置从库同步主库的延迟时间
#slavedelay
# 指定单一的数据库复制
#only = master.example.com
# 主库模式
#master = true
#source = slave.example.com
# 设置副本集名称
# replSet = setname

# 声明这是一个集群的config服务,默认端口27019，默认目录/data/configdb
#configsvr
# 声明这是一个集群的分片,默认端口27018
#shardsvr
# 关闭偏执为moveChunk数据保存
#noMoveParanoia

# tree /usr/local/mongo/bin
|-- bsondump
|-- mongo
|-- mongod
|-- mongodump
|-- mongoexport
|-- mongofiles
|-- mongoimport
|-- mongorestore
|-- mongos
|-- mongosniff
|-- mongostat
|-- mongotopmongosniff

# mongostat --help
Fields
inserts      - # of inserts per second
query        - # of queries per second
update       - # of updates per second
delete       - # of deletes per second
getmore      - # of get mores (cursor batch) per second
command      - # of commands per second
flushes      - # of fsync flushes per second
mapped       - amount of data mmaped (total data size) megabytes
visze        - virtual size of process in megabytes
res          - resident size of process in megabytes
faults       - # of pages faults per sec (linux only)
locked       - percent of time in global write lock
idx miss     - percent of btree page misses (sampled)
qr|qw        - queue lengths for clients waiting (read|write)
ar|aw        - active clients (read|write)
netIn        - network traffic in - bits
netOut       - network traffic out - bits
conn         - number of open connections

# Python API
#easy_install pymongo
# -- python code --
from pymongo import Connection

# Making a Connection
#connection = Connection() #default host and port
connection = Connection('localhost', 27017)

# Getting a Database
#db = connection.test_database
db = connection['test-database']

# Getting a Collection
#collection = db.test_collection
collection = db['test-collection']

# Documents
import datetime

post = {"author": "Mike",
"text": "My first blog post!",
"tags": ["mongodb", "python", "pymongo"],
"date": datetime.datetime.utcnow()}

# Inserting a Document
posts = db.posts
posts.insert(post)
db.collection_names()

# Getting a Single Document With find_one()
print posts.find_one()
print posts.find_one({"author": "Mike"})
print posts.find_one({"author": "Eliot"})

# Bulk Inserts
new_posts = [{"author": "Mike",
    "text": "Another post!",
    "tags": ["bulk", "insert"],
    "date": datetime.datetime(2009, 11, 12, 11, 14)},
    {"author": "Eliot",
    "title": "MongoDB is fun",
    "text": "and pretty easy too!",
    "date": datetime.datetime(2009, 11, 10, 10, 45)}]
posts.insert(new_posts)

# Querying for More Than One Document
for post in posts.find():
    print post

for post in posts.find({"author": "Mike"}):
    print post

# Counting
posts.count()
posts.find({"author": "Mike"}).count()

# Range Queries
d = datetime.datetime(2009, 11, 12, 12)
for post in posts.find({"date": {"$lt": d}}).sort("author"):
    print post

# Indexing
posts.find({"date": {"$lt": d}}).sort("author").explain()["cursor"]
posts.find({"date": {"$lt": d}}).sort("author").explain()["nscanned"]

from pymongo import ASCENDING, DESCENDING
posts.create_index([("date", DESCENDING), ("author", ASCENDING)])
posts.find({"date": {"$lt": d}}).sort("author").explain()["cursor"]
posts.find({"date": {"$lt": d}}).sort("author").explain()["nscanned"]
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[scribe安装]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/02/15/143830-scribe/"/>
    <updated>2012-02-15T14:38:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/02/15/143830-scribe</id>
    <content type="html"><![CDATA[<ul>
<li>ubuntu安装依赖libboost-all-dev, python-dev</li>
<li>centos安装依赖boost-devel, python-devel</li>
<li><p>boost库文件必须高于1.36版本, centos通常自带的boost版本较低,需编译安装.</p></li>
<li><p>编译thrift,不提供php与ruby支持.</p>

<pre><code>./configure --without-php_extension --without-php --without-ruby
make &amp;&amp; make install
cd lib/py
python setup.py install
cd ../../contrib/fb303/
./bootstrap.sh
make &amp;&amp; make install
cd py
python setup.py install

# 编译scribe
./bootstrap.sh 
make &amp;&amp; make install
mkdir /etc/scribe
cp -av examples/* /etc/scribe/
cd lib/py
python setup.py install
</code></pre></li>
</ul>


<h1>参考资料:</h1>

<p>http://agiletesting.blogspot.com/2009/10/compiling-installing-and-test-running.html
http://silas.sewell.org/blog/2009/05/12/pipe-apache-or-any-logs-to-scribe/</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Tips]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/02/10/163323-python/"/>
    <updated>2012-02-10T16:33:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/02/10/163323-python</id>
    <content type="html"><![CDATA[<h1>读取管道内容</h1>

<h1>print sys.stdin.read()</h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python 参考手册 第21章]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/01/19/095304-python/"/>
    <updated>2012-01-19T09:53:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/01/19/095304-python</id>
    <content type="html"><![CDATA[<h1>第21章 网络编程和套接字</h1>

<ul>
<li><a href="#21.1">21.1 网络编程基础</a></li>
<li><a href="#21.2">21.2 asynchat模块</a></li>
</ul>


<h1 id=21.1>21.1 网络编程基础</h1>


<ul>
<li>python网络编程模块支持TCP和UDP两种Internet协议。</li>
<li>TCP协议是面向连接的可靠协议。</li>
<li>UDP是以数据包为基础的协议。</li>
<li>套接字类似文件的对象，使程序能够接受传入连接，进行传出连接，发送和接受数据。</li>
<li>接受连接的机器(服务器)必须将套接字绑定到已知端口，提供服务。(0-1023是保留端口)</li>
<li>使用socket模块编写TCP协议。

<pre><code># 时间服务器程序
from socket import *
import time

s = socket(AF_INET, SOCK_STREAM)  # 创建TCP套接字
s.bind(('', 8888))                # 绑定到端口8888
s.listen(5)                       # 监听，但只能挂起5个以下的连接

While True:
    client,addr = s.accept()      # 连接
    print("Got a connection from %s" % str(addr))
    timestr = time.ctime(time.time()) + "\r\n"
    client.send(timestr.encode('ascii'))
    client.close()

# 客户端程序:
from socket import *
s = socket(AF_INET, SOCK_STREAM)  # 创建TCP套接字
s.connect(('localhost', 8888)     # 连接到服务器
tm = s.recv(1024)                 # 最多接收1024个字节
s.close()
print("The time is %s" % tm.decode('ascii'))
</code></pre></li>
<li>网络协议经常以文本方式传输数据，要进行编码，解码处理。python3 默认使用Unicode编码。</li>
</ul>


<h1 id=21.2>21.2 asynchat 模块</h1>


<ul>
<li>简化了异步网络应用程序的实现过程。包装了asyncore的低级I/O功能和一个高级编程接口。</li>
<li>使用该模块，必须定义继承自async_chat的类。并定义两个方法：collect_incoming_data()和found_terminator()。</li>
<li>asynchat模块总是和asyncore模块一起使用。

<pre><code># 使用asynchat的异步HTTP服务器
import asynchat, asyncore, socket
import os
import mimetypes
try:
    from http.client import responses     # python3
except ImportError:
    from httplib import responses         # python2
# 该类插入到asyncore模块，仅处理接受的事件
class async_http(asyncore.dispatcher):
    def __init__(self, port):
        asyncore.dispatcher.__init__(self)
        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
        self.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.bind(('', port))
        self.listen(5)
    def handle_accept(self):
        client.addr = self.accept()
        return async_http_handler(client)

# 处理异步HTTP请求的类
class async_http_handler(asynchat.async_chat):
    def __init__(self, conn=None):
        asynchat.asycn_chat_.__init__(self.conn)
        self.data = []
        self.got_header = False
        self.set_terminator(b"\r\n\r\n")

    # 获取传入数据并添加到数据缓冲区
    def collect_incoming_data(self, data):
        if not self.got_header:
            self.data.append(data)

    # 到达终止符(空白行)
    def found_terminator(self):
        self.got_header = True
        header_data = b"".join(self.data)
        # 将报头数据(二进制)解码为文本以便进一步处理
        header_text = header_data.decode('latin-1')
        header_lines = header_text.splitlines()
        request = header_lines[0].split()
        op = request[0]
        url = request[1][1:]
        self.process_request(op, url)

    # 将文本加入到传出流，但首先要解码
    def push_text(self, text):
        self.push(text.encode('latin-1'))

    # 处理请求
    def process_request(self, op, url):
        if op == "GET":
            if not os.path.exists(url):
                self.send_error(404, "File %s not found\r\n")
            else:
                type, encoding = mimetypes.guess_type(url)
                size = os.path.getsize(url)
                self.path_text("HTTP/1.0 200 OK\r\n")
                self.push_text("Content-length: %s\r\n" % size) 
                self.push_text("Content-type: %s\r\n" % type)
                self.push_text("\r\n")
                self.push_with_producer(file_producer(url))
        else:
            self.send_error(501, "%s method not implemented" % op)

    # 错误处理  
    def send_error(self, code, message):
        self.push_text("HTTP/1.0 %s %s\r\n" % (code, responses[code]))
        self.push_text("Content-type: text/plain\r\n")
        self.push_text("\r\n")
        self.push_text(message)

class file_producer(object):
    def __init__(self, filename, buffer_size=512):
        self.f = open(filename, "rb")
        self.buffer_size = buffer_size
    def more(self):
        data = self.f.read(self.buffer_size)
        if not data:
            self.f.close()
        return data
a = async_http(8080)
asyncore.loop()
# 要测试该实例，需要提供一个URL，并且该URL必须对应运行服务器那个目录中的文件。
</code></pre></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python hiredis模块]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/01/18/175036-python/"/>
    <updated>2012-01-18T17:50:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/01/18/175036-python</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/pietern/hiredis-py">官方手册</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python lxml模块]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/01/16/162542-python/"/>
    <updated>2012-01-16T16:25:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/01/16/162542-python</id>
    <content type="html"><![CDATA[<p><strong>内置方法</strong></p>

<p><strong>[&#8216;CheckboxGroup&#8217;, &#8216;CheckboxValues&#8217;, &#8216;DictMixin&#8217;, &#8216;Element&#8217;, &#8216;FieldsDict&#8217;, &#8216;FormElement&#8217;, &#8216;HTMLParser&#8217;, &#8216;HtmlComment&#8217;, &#8216;HtmlElement&#8217;, &#8216;HtmlElementClassLookup&#8217;, &#8216;HtmlEntity&#8217;, &#8216;HtmlMixin&#8217;, &#8216;HtmlProcessingInstruction&#8217;, &#8216;InputElement&#8217;, &#8216;InputGetter&#8217;, &#8216;InputMixin&#8217;, &#8216;LabelElement&#8217;, &#8216;MultipleSelectOptions&#8217;, &#8216;RadioGroup&#8217;, &#8216;SelectElement&#8217;, &#8216;SetMixin&#8217;, &#8216;TextareaElement&#8217;, &#8216;XHTMLParser&#8217;, &#8216;XHTML_NAMESPACE&#8217;, &#8217;<em>MethodFunc&#8217;, &#8217;<strong>all</strong>&#8217;, &#8217;<strong>builtins</strong>&#8217;, &#8217;<strong>bytes_replace_meta_content_type&#8217;, &#8217;</strong>doc<strong>&#8217;, &#8217;</strong>file<strong>&#8217;, &#8217;</strong>fix_docstring&#8217;, &#8217;<strong>name</strong>&#8217;, &#8217;<strong>package</strong>&#8217;, &#8217;<strong>path</strong>&#8217;, &#8216;__str_replace_meta_content_type&#8217;, &#8217;</em>archive_re&#8217;, &#8217;<em>class_xpath&#8217;, &#8217;</em>collect_string_content&#8217;, &#8217;<em>contains_block_level_tag&#8217;, &#8217;</em>css_import_re&#8217;, &#8217;<em>css_url_re&#8217;, &#8217;</em>element_name&#8217;, &#8217;<em>forms_xpath&#8217;, &#8217;</em>id_xpath&#8217;, &#8217;<em>label_xpath&#8217;, &#8217;</em>nons&#8217;, &#8217;<em>options_xpath&#8217;, &#8217;</em>rel_links_xpath&#8217;, &#8217;<em>setmixin&#8217;, &#8217;</em>transform_result&#8217;, &#8216;_unquote_match&#8217;, &#8216;basestring&#8217;, &#8216;bytes&#8217;, &#8216;copy&#8217;, &#8216;cssselect&#8217;,&#8217;defs&#8217;, &#8216;document_fromstring&#8217;, &#8216;etree&#8217;, &#8216;find_class&#8217;, &#8216;find_rel_links&#8217;, &#8216;fragment_fromstring&#8217;, &#8216;fragments_fromstring&#8217;, &#8216;fromstring&#8217;, &#8216;html_parser&#8217;, &#8216;html_to_xhtml&#8217;, &#8216;iterlinks&#8217;, &#8216;make_links_absolute&#8217;, &#8216;open_http_urllib&#8217;, &#8216;open_in_browser&#8217;, &#8216;parse&#8217;, &#8216;re&#8217;, &#8216;resolve_base_href&#8217;, &#8216;rewrite_links&#8217;, &#8216;submit_form&#8217;, &#8216;threading&#8217;, &#8216;tostring&#8217;, &#8216;unicode&#8217;, &#8216;urljoin&#8217;, &#8216;xhtml_parser&#8217;, &#8216;xhtml_to_html&#8217;]</strong></p>

<ul>
<li><p><strong>实例应用</strong>:</p></li>
<li><p>简单爬虫程序</p></li>
<li>注意点：</li>
<li>1. 从性能考虑应用xpath替换正则匹配。</li>
<li>2. 多线程，双队列，其中一个队列负责发送页面链接。另一个队列负责解析链接。</li>
<li>3. 线程应设置合理延迟，能降低被封的可能性。</li>
<li>4. 存储池，</li>
<li>5. 前端管理，Django</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">LxmlType</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="s">&#39;lxml&#39;</span>
</span><span class='line'>    <span class="n">description</span> <span class="o">=</span> <span class="s">&#39;lxml.html&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="kn">from</span> <span class="nn">lxml.html</span> <span class="kn">import</span> <span class="n">parse</span><span class="p">,</span> <span class="n">tostring</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">parse</span> <span class="o">=</span> <span class="n">parse</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">tostring</span> <span class="o">=</span> <span class="n">tostring</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">parse_file</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">filename</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span><span class="o">.</span><span class="n">getroot</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">serialize</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">doc</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">tostring</span><span class="p">(</span><span class="n">doc</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>XPath语法摘记</strong></li>
<li>路径表达式

<pre><code>nodename    选取此节点的所有子节点。
/           从根节点选取。
//          从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。
.           选取当前节点。
..          选取当前节点的父节点。
@           选取属性。
bookstore   选取 bookstore 元素的所有子节点。
/bookstore        选取根元素 bookstore。
                  注释：假如路径起始于正斜杠( / )，则此路径始终代表到某元素的绝对路径！
bookstore/book    选取属于 bookstore 的子元素的所有 book 元素。
//book            选取所有 book 子元素，而不管它们在文档中的位置。
bookstore//book   选择属于 bookstore 元素的后代的所有 book 元素，而不管它们位于 bookstore 之下的什么位置。
//@lang           选取名为lang 的所有属性。
/bookstore/book[1]                    选取属于 bookstore 子元素的第一个 book 元素。
/bookstore/book[last()]               选取属于 bookstore 子元素的最后一个 book 元素。
/bookstore/book[last()-1]             选取属于 bookstore 子元素的倒数第二个 book 元素。
/bookstore/book[position()&lt;3]         选取最前面的两个属于 bookstore 元素的子元素的 book 元素。
//title[@lang]                        选取所有拥有名为 lang 的属性的 title 元素。
//title[@lang='eng']                  选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。
/bookstore/book[price&gt;35.00]          选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。
/bookstore/book[price&gt;35.00]/title    选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须                                             大于 35.00。
*             匹配任何元素节点。
@*            匹配任何属性节点。
node()        匹配任何类型的节点。
/bookstore/*  选取 bookstore 元素的所有子元素。
//*           选取文档中的所有元素。
//title[@*]   选取所有带有属性的 title 元素。
//book/title | //book/price           选取 book 元素的所有 title 和 price 元素。
//title | //price                     选取文档中的所有 title 和 price 元素。
/bookstore/book/title | //price       选取属于 bookstore 元素的 book 元素的所有 title 元素，以及文档中所有的 price 元素。
</code></pre></li>
<li>XPath 轴

<pre><code>ancestor              选取当前节点的所有先辈（父、祖父等）。
ancestor-or-self      选取当前节点的所有先辈（父、祖父等）以及当前节点本身。
attribute             选取当前节点的所有属性。
child                 选取当前节点的所有子元素。
descendant            选取当前节点的所有后代元素（子、孙等）。
descendant-or-self    选取当前节点的所有后代元素（子、孙等）以及当前节点本身。
following             选取文档中当前节点的结束标签之后的所有节点。
namespace             选取当前节点的所有命名空间节点。
parent                选取当前节点的父节点。
preceding             选取文档中当前节点的开始标签之前的所有节点。
preceding-sibling     选取当前节点之前的所有同级节点。
self                  选取当前节点。
</code></pre></li>
</ul>


<h1>参考资料:</h1>

<ul>
<li><h3><a href="http://simple-is-better.com/news/406">Python HTML 解析器性能评测</a></h3></li>
<li><h3><a href="http://www.w3school.com.cn/xpath/xpath_syntax.asp">XPath语法</a></h3></li>
<li><h3><a href="http://lxml.de/FAQ.html">lxml FAQ</a></h3></li>
<li><h3><a href="http://codespeak.net/pipermail/lxml-dev/2009-February/004386.html">LXML utf-8 problem</a></h3></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis的七种武器及其适合的应用场景]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/01/15/155751-redis/"/>
    <updated>2012-01-15T15:57:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/01/15/155751-redis</id>
    <content type="html"><![CDATA[<ul>
<li><p>2012年01月11日 00:05 来源：nosqlfan 作者：NoSQLfan 编辑：王玉圆</p></li>
<li><p><strong>【IT168 技术】长生剑、孔雀翎、碧玉刀、多情环、离别钩、霸王枪、拳头是古龙笔下的七种武器，而本文打算将Redis的几种使用方式 Strings、Hashs、Lists、Sets、Sorted Sets、Pub/Sub、Transactions 也比作七种武器，为大家讲解Redis的七种特性，并列举其适合的应用场景。</strong></p></li>
<li><strong>武器一：Strings</strong></li>
<li>Strings 数据结构是简单的key-value类型，value其实不仅是String，也可以是数字。使用Strings类型，你可以完全实现目前 Memcached 的功能，并且效率更高。还可以享受Redis的定时持久化，操作日志及 Replication等功能。除了提供与 Memcached 一样的get、set、incr、decr 等操作外，Redis还提供了下面一些操作：</li>
<li>·获取字符串长度</li>
<li>·往字符串append内容</li>
<li>·设置和获取字符串的某一段内容</li>
<li>·设置及获取字符串的某一位(bit)</li>
<li><p>·批量设置一系列字符串的内容</p></li>
<li><p><strong>武器二：Hashs</strong></p></li>
<li><p>在Memcached中，我们经常将一些结构化的信息打包成hashmap，在客户端序列化后存储为一个字符串的值，比如用户的昵称、年龄、性别、积分等，这时候在需要修改其中某一项时，通常需要将所有值取出反序列化后，修改某一项的值，再序列化存储回去。这样不仅增大了开销，也不适用于一些可能并发操作的场合(比如两个并发的操作都需要修改积分)。而Redis的Hash结构可以使你像在数据库中Update一个属性一样只修改某一项属性值。</p></li>
<li><p><strong>武器三：Lists</strong></p></li>
<li><p>Lists 就是链表，相信略有数据结构知识的人都应该能理解其结构。使用Lists结构，我们可以轻松地实现最新消息排行等功能。Lists的另一个应用就是消息队列，可以利用Lists的PUSH操作，将任务存在Lists中，然后工作线程再用POP操作将任务取出进行执行。Redis还提供了操作Lists中某一段的api，你可以直接查询，删除Lists中某一段的元素。</p></li>
<li><p><strong>武器四：Sets</strong></p></li>
<li><p>Sets 就是一个集合，集合的概念就是一堆不重复值的组合。利用Redis提供的Sets数据结构，可以存储一些集合性的数据，比如在微博应用中，可以将一个用户所有的关注人存在一个集合中，将其所有粉丝存在一个集合。Redis还为集合提供了求交集、并集、差集等操作，可以非常方便的实现如共同关注、共同喜好、二度好友等功能，对上面的所有集合操作，你还可以使用不同的命令选择将结果返回给客户端还是存集到一个新的集合中。</p></li>
<li><p><strong>武器五：Sorted Sets</strong></p></li>
<li><p>和Sets相比，Sorted Sets增加了一个权重参数score，使得集合中的元素能够按score进行有序排列，比如一个存储全班同学成绩的Sorted Sets，其集合value可以是同学的学号，而score就可以是其考试得分，这样在数据插入集合的时候，就已经进行了天然的排序。另外还可以用Sorted Sets来做带权重的队列，比如普通消息的score为1，重要消息的score为2，然后工作线程可以选择按score的倒序来获取工作任务。让重要的任务优先执行。</p></li>
<li><p><strong>武器六：Pub/Sub</strong></p></li>
<li><p>Pub/Sub 从字面上理解就是发布(Publish)与订阅(Subscribe)，在Redis中，你可以设定对某一个key值进行消息发布及消息订阅，当一个key值上进行了消息发布后，所有订阅它的客户端都会收到相应的消息。这一功能最明显的用法就是用作实时消息系统，比如普通的即时聊天，群聊等功能。</p></li>
<li><p><strong>武器七：Transactions</strong></p></li>
<li>谁说NoSQL都不支持事务，虽然Redis的Transactions提供的并不是严格的ACID的事务(比如一串用EXEC提交执行的命令，在执行中服务器宕机，那么会有一部分命令执行了，剩下的没执行)，但是这个Transactions还是提供了基本的命令打包执行的功能(在服务器不出问题的情况下，可以保证一连串的命令是顺序在一起执行的，中间有会有其它客户端命令插进来执行)。Redis还提供了一个Watch功能，你可以对一个key进行Watch，然后再执行Transactions，在这过程中，如果这个Watched的值进行了修改，那么这个Transactions会发现并拒绝执行。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python 参考手册 第3章]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/01/15/143703-python/"/>
    <updated>2012-01-15T14:37:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/01/15/143703-python</id>
    <content type="html"><![CDATA[<h1>第3章 类型与对象</h1>

<ul>
<li><a href="#3.1">3.1 术语</a></li>
<li><a href="#3.2">3.2 对象的身份与类型</a></li>
<li><a href="#3.3">3.3 引用计数与垃圾收集</a></li>
<li><a href="#3.4">3.4 引用与复制</a></li>
<li><a href="#3.5">3.5 第一类对象</a></li>
<li><a href="#3.6">3.6 表示数据的内置类型</a></li>
<li><a href="#3.7">3.7 表示程序结构的内置类型</a></li>
<li><a href="#3.8">3.8 解释器内部使用的内置类型</a></li>
<li><a href="#3.9">3.9 对象行为与特殊方法</a></li>
</ul>


<h1 id=3.1>3.1 术语</h1>


<ul>
<li>程序中所有存储的数据都是对象：身份，类型，和值。</li>
<li>对象身份是指向对象值所处位置的指针。例如a=42, 用值42创建一个整数对象，a是引用这个位置的具体名称。</li>
<li>数据属性和方法，属性是对象相关的值，方法是在对象上执行的某些函数，使用(.)访问。

<pre><code>a = 3 + 4j    # 创建以改革复数
r = a.real    # 获得实部(属性之一)
b = [1, 2, 3] # 创建一个列表
b.append(7)   # 使用append方法添加一个新元素
</code></pre></li>
</ul>


<h1 id=3.2>3.2 对象的身份与类型</h1>


<ul>
<li>内置函数id()返回对象身份，返回值为整数。</li>
<li>is运算符用于比较两个对象的身份。</li>
<li>内置函数type()返回对象类型。

<pre><code># 比较两个对象
def compare(a,b):
    if a is b:
        # a和b是同一个对象
        statements
    if a == b:
        # a和b具有相同的值
        statements
    if type(a) is type(b):
        # a和b具有相同类型
        statements
</code></pre></li>
<li>对象本身也是一个对像，称作对象的类。所有类型对象都有一个指定名称，例如list, dict和file

<pre><code>if type(s) is list:
    s.append(item)
if type(d) is dict:
    s.update(t)
</code></pre></li>
<li>检查类型的最佳方式：isinstance(object, type)

<pre><code>if isinstance(s, list):
    s.append(item)
if isinstance(d, dict):
    d.update(t)
</code></pre></li>
</ul>


<h1 id=3.3>3.3 引用计数和垃圾收集</h1>


<ul>
<li>所有对象都有引用计数，在给对象分配一个新的名称，或放入一个新的容器时，该对象的引用计数都会增加。

<pre><code># 至始至终只有一个包含37的对象，其他操作只是创建类该对象的引用。
a = 37        # 创建一个值为37的对象
b = a         # 增加37的引用计数
c = []
c.append(b)   # 增加37的引用计数
</code></pre></li>
<li>使用del语句或者引用操作作用域或者被重新赋值，对象的引用计数会减少。

<pre><code>del a         # 减少37的引用计数
b = 42        # 减少37的引用计数
c[0] = 2.0    # 减少37的引用计数
</code></pre></li>
<li>使用sys.getrefcount()函数可获得对象的当前引用计数。

<pre><code>&gt;&gt;&gt; a = 37
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.gerefcount(a)
</code></pre></li>
<li>当一个对象引用计数归零时，它讲被垃圾回收机制处理掉。

<pre><code>a = {}
b = {}
a['b'] = b    # a包含b的引用
b['a'] = a    # b包含a的引用
del a
del b
</code></pre></li>
</ul>


<h1 id=3.4>3.4 引用和赋值</h1>


<ul>
<li>a = b 这样的赋值，会创建一个对b的新引用。对于可变对象，赋值实际是创建了b的一个副本。

<pre><code>&gt;&gt;&gt; a = [1, 2, 3, 4]
&gt;&gt;&gt; b = a     # b是对a的引用
&gt;&gt;&gt; b is a
True
&gt;&gt;&gt; b[2] = -100   # 修改b中的一个元素
&gt;&gt;&gt; a
[1, 2, -100, 4]
&gt;&gt;&gt;
</code></pre></li>
<li>浅复制和深复制。

<pre><code># 浅复制是创建一个新对象，但它包含的是对原始对象中的包含项的引用。
&gt;&gt;&gt; a = [1, 2, [3,4]]
&gt;&gt;&gt; b = list(a)           # 创建a的一个浅复制
&gt;&gt;&gt; b is a
False
&gt;&gt;&gt; b.append(100)         # 给b追加一个元素
&gt;&gt;&gt; b
[1, 2, [3,4], 100]
&gt;&gt;&gt; a                     # 注意a没有变化
[1, 2, [3,4]]
&gt;&gt;&gt; b[2][0] = -100        # 修改b的一个元素
[1, 2, [-100,4], 100]
&gt;&gt;&gt; a                     # 注意a中的变化
[1, 2, [-100,4]]

# 深复制将创建一个新对象，并且递归复制它包含的所有对象。使用标准库中的copy.deepcopy()函数。
&gt;&gt;&gt; import copy
&gt;&gt;&gt; a = [1, 2, [3,4]]
&gt;&gt;&gt; b = copy.deepcopy(a)
&gt;&gt;&gt; b[2][0] = -100
&gt;&gt;&gt; b
[1, 2, [-100,4]]
&gt;&gt;&gt; a             # 注意a没变化
[1, 2, [3,4]]
</code></pre></li>
</ul>


<h1 id=3.5>3.5 第一类对象</h1>


<ul>
<li>能够使用标识符命名的所有对象都可以当作数据处理。

<pre><code>items = {
    'number' : 42
    'text'   : "Hello World"
}
# 一些不平常的项
items["func"] = abs       # 添加abs()函数
import math
items["mod"] = math       # 添加一个模块
items["error"] = ValueError   # 添加一个异常类型
nums = [1, 2, 3, 4]
items["append"] = nums.append # 添加另一个对象的一个方法
#
&gt;&gt;&gt; items["func"](-45)        # 执行abs(-45)
45
&gt;&gt;&gt; items["mod"].sqrt(4)      # 执行match.sqrt(4)
2.0
&gt;&gt;&gt; try:
...     x = int("a lot")
... expect items["error"] as e:   # e等同于except ValueError
...     print("Couldn't convert")
...
Couldn't convert
&gt;&gt;&gt; items["append"](100)      # 执行nums.append(100)
&gt;&gt;&gt; nums
[1, 2, 3, 4, 100]
&gt;&gt;&gt;
# 通过正确的类型把文本GOOG, 100, 490.10转换为一个字段列表。
&gt;&gt;&gt; line = "GOOG, 100, 490.10"
&gt;&gt;&gt; field_types = [str, int, float]
&gt;&gt;&gt; raw_fields = line.split(',')
&gt;&gt;&gt; fields = [ty(val) for ty,val in zip(field_types, raw_fields)]
&gt;&gt;&gt; fields
['GOOG', 100, 490.1,]
</code></pre></li>
</ul>


<h1 id=3.6>3.6 表示数据的内置类型</h1>


<ul>
<li>表3-1 表示数据的内置类型

<h2>3.6.1 None类型</h2></li>
<li>None类型表示一个null对象。在程序中表示为None，如果一个函数没有显式返回值，则返回该对象。布尔值为False。

<h2>3.6.2 数字类型</h2></li>
<li>布尔性，整数，长整数，浮点数，复数。除了布尔值所有数字对象都是有符号的。</li>
<li>布尔值包括True和False两个值，分别映射为1和0。</li>
<li>整数表示范围在-2147483648和2147483647之间。长整数没有范围限制，取决于内存。在对整数值进行显式类型检查时，如果x是长整性，isinstance(x, int)将返回False。</li>
<li>浮点数是本机双精度(64bit)的表示。精度范围是-308到308的指数。</li>
<li>复数使用一对浮点数表示，实部与虚部分别用real和imag方法访问。方法conjugate()用于计算复数的共轭数。

<h2>3.6.3 序列类型</h2></li>
<li>序列表示索引为非负数的有序对象集合，包括字符串，列表和元组。所有序列都支持迭代。</li>
<li>1. 所有序列的通用操作</li>
<li>索引运算符[]可以访问序列的元素。s[i]访问序列s的元素i，</li>
<li>len()函数可以返回任意序列的长度。</li>
<li>max(),min()函数返回序列的最小值和最大值。</li>
<li>sun()函数对序列中各项求和，只仅限于数字对象。</li>
<li>2. 列表</li>
<li>list()函数可将任意可迭代类型转换为列表。</li>
<li>append方法用于将一个新元素追加到列表结尾。</li>
<li>index方式用于搜索列表中首次出现的元素。</li>
<li>remove方法用于删除列表中首次出现的元素。</li>
<li>extend方法用于将序列点元素追加到列表中。</li>
<li>sort方法用于对列表中的元素排序。</li>
<li>reverse方法用于对列表中的元素逆排序。</li>
<li>3. 字符串</li>
<li>两种字符串类型：字节字符串(8bit)，Unicode字符串(16bit)。</li>
<li>所有方法操作不会修改原始字符串。</li>
<li>4. xrange对象</li>
<li>不支持切片操作。python3更名为range()。

<h2>3.6.4 映射类型</h2></li>
<li>映射对象是无序的。</li>
<li>字典是唯一内置的映射类型。</li>
<li>任何不可变对象可作为字典键值。

<h2>3.6.5 集合类型</h2></li>
<li>set是可变集合，frozenset是不可变集合。

<pre><code>s = set([1,5,10,15])
f = frozenset(['a',37,'hello'])
</code></pre></li>
<li>difference方法，求差集。</li>
<li>intersection方法，求交集。</li>
<li>symmetric_difference，求对称查集。</li>
</ul>


<h1 id=3.7>3.7 表示程序结构的内置类型</h1>


<ul>
<li>3.7.1 可调用类型</li>
<li>可调用类型表示支持函数操作的对象。包括</li>
<li>1 用户定义的函数

<pre><code>def foo(x,y):
    return x + y
bar = lambda x,y: x + y
dir(foo)
</code></pre></li>
<li>2 方法</li>
<li>实例方法，类方法，静态方法。

<pre><code>class Foo(object):
    def instance_method(self, arg):
        statements
    @classmethod
    def class_method(cls, arg):
        statements
    @staticmethod
    def static_method(arg):
        statements
</code></pre></li>
<li>实例方法是操作指定类的实例的方法。实例作为第一个参数传递给方法，self</li>
<li>类方法是把类本身当作一个对象进行操作，在第一个参数class中将类对象传递给类方法。</li>
<li>静态方法就是打包在类中的函数。

<pre><code>f = Foo()                 # 创建一个实例
meth = f.instance_method  # 查找方法，注意这里没有()
meth(37)`                 # 现在调用方法

umeth = Foo.instance_method   # 查找Foo上的方法instance_method
umeth(f,37)                   # 调用它，但要显式地提供self参数
</code></pre></li>
<li>3 内置函数与方法</li>
<li>4 可调用的类和实例</li>
<li>类对象和实例也可以当作可调用对象进行操作。</li>
<li>3.7.2 类，类型和实例</li>
<li>定义类时，类定义通常会生成一个type类型对象。

<pre><code>&gt;&gt;&gt; class Foo(object):
...     pass
&gt;&gt;&gt; type(Foo)
</code></pre></li>
<li>创建一个对象实例时，实例的类型就是定义它的类。

<pre><code>&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; type(f)
&lt;class '__main__.Foo'&gt;
</code></pre></li>
<li>3.7.3 模块</li>
<li>模块对象是一个容器，可保存使用import语句加载的对象。</li>
<li>模块定义了一个使用字典实现的命名空间。</li>
</ul>


<h1 id=3.8>3.8 解释器内部使用的内置类型</h1>


<ul>
<li>包括跟踪对象，代码对象，帧对象，生成器对象，切片对象，Ellipsis。</li>
<li>3.8.1 代码对象</li>
<li>由内置compile()函数返回。</li>
<li>3.8.2 帧对象</li>
<li>表示执行帧，多出现在跟踪对象中。</li>
<li>3.8.3 跟踪对象</li>
<li>出现异常会创建跟踪对象，使用sys.exc_info()函数获取栈跟踪信息。</li>
<li>3.8.4 生成器对象</li>
<li>调用生成器函数会产生生成器对象。yield会定义一个生成器函数。</li>
<li>切片对象</li>
<li>表示在扩展切片语法中指定的切片。内置slice()函数也会创建切片对象。</li>
<li>3.8.6 Ellipsis对象</li>
<li>用于表示索引查找[]中省略号是否存在。

<pre><code>class Example(object):
    def __getitem__(self, index):
        print(index)
e = Example()
e[3, ..., 4]      # 调用e.__getitem__((3, Ellipsis, 4))
</code></pre></li>
</ul>


<h1 id=3.9>3.9 对象行为与特殊方法</h1>


<ul>
<li>3.9.1 对象的创建与销毁</li>
<li><strong>new</strong>()类方法可以创建实例。<strong>init</strong>()方法初始化对象属性，<strong>del</strong>()方法减少对象引用计数。

<pre><code>x = A.__new__(A, args)
is isinstance(x, A): x.__init__(args)
</code></pre></li>
<li>3.9.2 对象字符表示</li>
<li><strong>repr</strong>()方法返回一个表达式字符串

<pre><code>a = [2,3,4,5]     # 创建一个列表
s = repr(a)       # s = '[2,3,4,5]'
b = eval(s)       # 将s变为一个列表
</code></pre></li>
<li><strong>str</strong>()方法调用str()函数打印结果。</li>
<li><strong>format</strong>()方法调用format()函数或字符串format()的方法。

<pre><code>format(x, "spec")         # 调用x.__format__("spec")
"x is (0:spec)".format(x) # 调用x.__format__("spec")
</code></pre></li>
<li>3.9.3 对象比较排序</li>
<li><strong>bool</strong>()方法用于真值测试。</li>
<li><strong>len</strong>()方法用于确定对象的真值。</li>
<li><strong>hash</strong>()方法作用于字符键对象。</li>
<li>3.9.4 类型检查</li>
<li>isinstance()与issubclass()函数。</li>
<li>3.9.5 属性访问</li>
<li>调用<strong>getattribute</strong>()方法。如果找到属性，就返回，否则调用<strong>getattr</strong>()方法，引发AttributeError异常。</li>
<li>3.9.6 属性包装与描述符</li>
<li>3.9.7 序列与映射方法

<pre><code>a = [1,2,3,4,5,6]
len(a)                # a.__len__()
x = a[2]              # x = a.__getitem__(2)
a[1] = 7              # a.__setitem__(1,7)
del a[2]              # a.__delitem__(2)
5 in a                # a.__contains__(5)
a = [1,2,3,4,5,6]
x = a[1:5]            # x = a.__getitem__(slice(1,5,None))
a[1:3] = (10,11,12)   # a.__setitem__(slice(1,3,None), (10,11,12))
del a[1:4]            # a.__delitem__(slice(1,4,None))
a = m[0:100:10]       # 带步进的切片(步进值=10)
b = m[1:10, 3:20]     # 多维切片
c = m[0:100:10, 50:75:5]  # 带步进的多维切片
m[0:5, 5:10] = n      # 扩展切片分配
del m[:10, 15:]       # 扩展切片删除
a = m[..., 10:20]     # 使用Ellipsis对象访问扩展切片
m[10:20, ...] = n
a = m[0:10, 0:100:5, ...]
# 调用__getitem__()方法如下
a = m.__getitem__((slice(0,10,None), slice(0,100,5), Ellipsis))
</code></pre></li>
<li>3.9.8 迭代</li>
<li>如果对象支迭代，必然提供obj.<strong>iter</strong>()方法。

<pre><code># for x in s 等同于
_iter = s.__iter__()
while True:
    try:
        x = _iter.next() (#__iter.__next__() python3)
</code></pre></li>
<li>3.9.9 数学操作</li>
<li>3.9.10 可调用接口

<pre><code>class DistanceFrom(object):
    def __init__(self, origin):
        self.origin = origin
    def __call__(self, x):
        return abs(x - self.origin)
nums = [1, 37, 42, 101, 13, 9, -20]
nums.sort(key=DistanceFrom(10))   # 按照与10的距离进行排序
</code></pre></li>
<li>3.9.11 上下文协议</li>
<li>语法

<pre><code>with context [ as var]:
    statements
</code></pre></li>
<li>执行with语句时，会调用<strong>enter</strong>()方法，可将返回值放入as var指定变量中。离开with语句快，会调用<strong>exit</strong>()方法。</li>
<li>对象检查与dir()</li>
<li>dir()通常用于检查对象。实现<strong>dir</strong>(self)方法后，dir()就可返回名称列表。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python 参考手册 第2章]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/01/15/093205-python/"/>
    <updated>2012-01-15T09:32:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/01/15/093205-python</id>
    <content type="html"><![CDATA[<h1>第2章 词汇和语法约定</h1>

<ul>
<li><a href="#2.1">2.1 行结构和缩进</a></li>
<li><a href="#2.2">2.2 标识符和保留字</a></li>
<li><a href="#2.3">2.3 数字字面变量</a></li>
<li><a href="#2.4">2.4 字符串字面量</a></li>
<li><a href="#2.5">2.5 容器</a></li>
<li><a href="#2.6">2.6 运算符，分割符啊哈及特殊符号</a></li>
<li><a href="#2.7">2.7 文档字符串</a></li>
<li><a href="#2.8">2.8 装饰器</a></li>
<li><a href="#2.9">2.9 源代码编码</a></li>
</ul>


<h1 id=2.1>2.1 行结构和缩进</h1>


<ul>
<li>每条语句以换行符结束。可用续航符()分行。

<pre><code>a = math.cos(3 * (x - n) + \
  math.sin(3 * (y - n))
</code></pre></li>
<li>包含在圆括号，方括号，大括号，三引号的程序部分可以跨多行。</li>
<li>缩进用于表示不同的代码块，应用空格缩经，且整个代码的缩进必须保持一致。

<pre><code>if a:
    statement1    # 缩进一致，正确
    statement2
else:
    statement3
      statement4  # 缩进不一致，错误
</code></pre></li>
<li>函数体，条件语句，循环或类较短，可放在一行。

<pre><code>if a: statement1
else: statement2
</code></pre></li>
<li>表示一个空的函数体或代码块。

<pre><code>if a:
    pass
else:
    statements
</code></pre></li>
<li>分号(;)可用于分割放在一行的多条语句。</li>
<li>\#表示次行的内容是注释。</li>
</ul>


<h1 id=2.2>2.2 标识符和保留字</h1>


<ul>
<li>标识符可包含字母，数字，下划线，必须以非数字字符开始且区分大小写。</li>
<li>保留字不能作为标识符。

<pre><code>and         del        from     nonlocal    try
as          elif       global   not         while
assert      else       if       or          with
class       exec       in       print
continue    finally    is       raise
def         for        lamba    return
</code></pre></li>
</ul>


<h1 id=2.3>2.3 数字字面变量</h1>


<ul>
<li>布尔值：True和False，整数值对应1和0。</li>
<li>整数：  分为十进制，八进制(0)，十六进制(0x)，二进制(0b)。</li>
<li>浮点数：整数后跟小数位。</li>
<li>复数：  整数/浮点数(实数)后加上j或J(虚数)。
&lt;h1.id=2.4>2.4 字符串字面量</h1></li>
<li>将文本放入单引号，双引号，三引号中构成字符串字面量。</li>
<li>反斜杠()用于转义特殊字符。</li>
<li>表2-1 标准的字符转义码</li>
<li>在字符串面量前加上前缀&#8221;u&#8221;构成Unicode字符串字面量。

<pre><code>s = u"Jalape\u00floo" #python3 不必加u前缀
</code></pre></li>
<li>在字符串面量前加上前缀&#8221;r&#8221;构成原始字符串。r必须在u之后。</li>
</ul>


<h1 id=2.5>2.5 容器</h1>


<ul>
<li>[列表] (元组) {字典}

<pre><code>a = [ 1, 3.4, 'hello' ]   # 一个列表
b = ( 10, 20, 30 )        # 一个元组
c = { 'a':3, 'b':42 }     # 一个字典
</code></pre></li>
</ul>


<h1 id=2.6>2.6 运算符，分隔符及特殊符号</h1>


<pre><code>  +    -    *    **    /    //    %    &lt;&lt;    &gt;&gt;    &amp;    |
  ^    ~    &lt;    &gt;     &lt;=   &gt;=    ==   !=    &lt;&gt;    +=
  -=   *=   /=   //=   %=   **=   &amp;=   |=    ^=    &gt;&gt;=  &lt;==
</code></pre>

<h1 id=2.7>2.7 文档字符串</h1>


<ul>
<li>模块，类或函数的第一条语句是字符串。

<pre><code>def fact(n):
    "This function computes a factorial"
    if (n &lt;=1): return 1
    else: return n * fact(n-1)
</code></pre></li>
<li>通过对象<strong>doc</strong>属性访问文档字符串

<pre><code>&gt;&gt;&gt; print fact.__doc__
</code></pre></li>
</ul>


<h1 id=2.8>2.8 装饰器</h1>


<ul>
<li>装饰器用@表示，必须在单独的行并位于函数，方法类之前。

<pre><code>@staticmethod
def bar():
    pass
</code></pre></li>
<li>使用多个装饰器

<pre><code>@foo
@bar
def spam():
    pass
</code></pre></li>
</ul>


<h1 id=2.9>2.9 源代码编码</h1>


<ul>
<li>python源程序使用7位ASCII码标准，在注释语句时，可使用Unicode编码，但其他元素只能使用ASCII字符。

<pre><code>#!/usr/bin/env python
# -*- coding: UTF-8 -*-
s = "Jalapefio"
</code></pre></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress tips]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/01/12/174442-octopress/"/>
    <updated>2012-01-12T17:44:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/01/12/174442-octopress</id>
    <content type="html"><![CDATA[<h1>Theming &amp; Customization</h1>

<h2>source/_includes/custom</h2>

<h2>Landing Page vs. Blog Index</h2>

<pre><code>$ mv source/index.html source/blog/index.html
$ rake new_page[index.html]
# add
blog_index_dir = 'source/blog'
</code></pre>

<h2>Changing the &lt;HEAD></h2>

<ul>
<li>source/_includes/custom/head.html

<pre><code>&lt;!--Fonts from Google"s Web font directory at http://google.com/webfonts --&gt;
&lt;link href="http://fonts.googleapis.com/css?family=PT+Serif:regular,italic,bold,bolditalic" rel="stylesheet" type="text/css"&gt;
&lt;link href="http://fonts.googleapis.com/css?family=PT+Sans:regular,italic,bold,bolditalic" rel="stylesheet" type="text/css"&gt;
</code></pre></li>
<li>source/_includes/custom/asides/about.html</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[redis cookbook]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/01/12/143202-redis/"/>
    <updated>2012-01-12T14:32:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/01/12/143202-redis</id>
    <content type="html"><![CDATA[<ul>
<li><a href="#1">1. An Introduction to Redis</a></li>
<li><a href="#2">2. Clients</a></li>
<li><a href="#3">3. Leveraging Redis</a></li>
<li><a href="#4">4. Redis Administration and Maintenance</a></li>
</ul>


<h1 id=2>CHAPTER 2 Clients</h1>


<p><strong>Using Redis from the Command Line</strong></p>

<pre><code>$ redis-cli -h
$ redis-cli -h serverip
$ redis-cli -p 6380
$ redis-cli INFO
$ cat command_list.txt | redis-cli &gt; command_output.txt
</code></pre>

<p><strong>Using Redis from Python with redis-py</strong></p>

<pre><code>$ pip install redis-py
$ easy_install redis

&gt;&gt;&gt; import redis
&gt;&gt;&gt; redis = redis.Redis(host='localhost', port=6379, db=0)
&gt;&gt;&gt; redis.smembers('circle:jdoe:soccer')
set(['users:toby', 'users:adam', 'users:apollo', 'users:mike'])
&gt;&gt;&gt; redis.sadd('circle:jdoe:soccer', 'users:fred')
True
&gt;&gt;&gt; redis.smembers('circle:jdoe:soccer')
set(['users:toby', 'users:adam', 'users:apollo', 'users:mike', 'users:fred'])  

$ pip install hiredis
$ easy_install hiredis
</code></pre>

<h1 id=3>CHAPTER 3 Leveraging Redis</h1>


<p><strong>Using Redis as a Key/Value Store</strong>
Storing application usage counters</p>

<pre><code># vists:pageid:totals
$ SET visits:1:totals 21389
$ SET visits:2:totals 1367894
$ INCR visits:635:totals    # visits:635:totals + 1
$ GET visits:635:totals
</code></pre>

<p>Storing object data in hashes</p>

<pre><code>redis&gt; hset users:jdoe name "John Doe"
(integer) 1
redis&gt; hset users:jdoe email "jdoe@test.com"
(integer) 1
redis&gt; hset users:jdoe phone "+1555313940"
(integer) 1
redis&gt; hincrby users:jdoe visits 1
(integer) 1

redis&gt; hget users:jdoe email
"jdoe@test.com"
redis&gt; hgetall users:jdoe
1) "name"
2) "John Doe"
3) "email"
4) "jdoe@test.com"
5) "phone"
6) "+1555313940"
7) "visits"
8) "1"


redis&gt; hkeys users:jdoe
1) "name"
2) "email"
3) "phone"
4) "visits"
redis&gt; hvals users:jdoe
1) "John Doe"
2) "jdoe@test.com"
3) "+1555313940"
4) "1"
</code></pre>

<p><strong>Storing user “Circles” using sets</strong></p>

<pre><code>redis&gt; sadd circle:jdoe:family users:anna
(integer) 1
redis&gt; sadd circle:jdoe:family users:richard
(integer) 1
redis&gt; sadd circle:jdoe:family users:mike
(integer) 1
redis&gt; sadd circle:jdoe:soccer users:mike
(integer) 1
redis&gt; sadd circle:jdoe:soccer users:adam
(integer) 1
redis&gt; sadd circle:jdoe:soccer users:toby
(integer) 1
redis&gt; sadd circle:jdoe:soccer users:apollo
(integer) 1

redis&gt; smembers circle:jdoe:family
1) "users:richard"
2) "users:mike"
3) "users:anna"
redis&gt; hgetall users:mike
(...)

redis&gt; sinter circle:jdoe:family circle:jdoe:soccer
1) "users:mike"
redis&gt; sunion circle:jdoe:family circle:jdoe:soccer
1) "users:anna"
2) "users:mike"
3) "users:apollo"
4) "users:adam"
5) "users:richard"
6) "users:toby"
</code></pre>

<p><strong>Quick Reference for Key Operations</strong></p>

<ul>
<li><strong>SET key value</strong></li>
<li>Sets the key to hold the given value. Existing data is overwritten (even if of a different data type).</li>
<li><strong>GET key</strong></li>
<li>Returns the content held by the key. Works only with string values.</li>
<li><strong>INCR key</strong></li>
<li>Increments the integer stored at key by 1.</li>
<li><strong>INCRBY key value</strong></li>
<li>Performs the same operation as INCR, but incrementing by value instead.</li>
<li><strong>DECR key</strong></li>
<li>Decrements the integer stored at key by 1.</li>
<li><strong>DECRBY key value</strong></li>
<li>Performs the same operation as DECR, but decrementing by value instead.</li>
<li><strong>Inspecting Your Data</strong></li>
<li>   redis> KEYS *</li>
<li>   redis> TYPE keyname</li>
</ul>


<p><strong>Quick Reference for Debugging</strong></p>

<ul>
<li><strong>KEYS pattern</strong></li>
<li>Lists all the keys in the current database that match the given pattern.</li>
<li><strong>TYPE key-name</strong></li>
<li>Tells the type of the key. Possible types are: string, list, hash, set, zset, and none.</li>
<li><strong>MONITOR</strong></li>
<li>Outputs the commands received by the Redis server in real time.</li>
<li><strong>Implementing OAuth on Top of Redis</strong></li>
<li>  redis> HMSET /consumers/key:dpf43f3p2l4k3l03 secret kd94hf93k423kf44 created_at 201103060000</li>
<li><pre><code>     redirect_url http://www.example.com/oauth_redirect name test_application
</code></pre></li>
</ul>


<p><strong>Quick Reference for Adding Values to Sets</strong></p>

<ul>
<li><strong>HSET hash-name key value</strong></li>
<li>Sets a value on a hash with the given key. As with other Redis commands, if the hash doesn’t exist, it’s created.</li>
<li><strong>HMSET hash-name key1 value1 [key2 value2 &#8230;]</strong></li>
<li>Allows you to set several values in a hash with a single command.

<pre><code>redis&gt; HGETALL /consumers/key:dpf43f3p2l4k3l03
redis&gt; SADD /nonces/key:dpf43f3p2l4k3l03/timestamp:20110306182600 dji430splmx33448
redis&gt; EXPIRE /nonces/key:dpf43f3p2l4k3l03/timestamp:20110306182600 1800
redis&gt; HSET /request_tokens/key:dpf43f3p2l4k3l03 hh5s93j4hdidpola hdhd0244k9j7ao03
</code></pre></li>
</ul>


<p><strong>Quick Reference for Authorization Algorithm</strong></p>

<ul>
<li><strong>HGETALL hash-name</strong></li>
<li>Returns all the key/value pairs in the given hash.</li>
<li><strong>SADD set-name element</strong></li>
<li>Adds the element to the given set unless it’s already a member. The return value is 1 if the element is added and 0 if it was already a member.</li>
<li><strong>EXPIRE key seconds</strong></li>
<li>Sets an expiration timeout on a key, after which it will be deleted. This can be used on any type of key (strings, hashes, lists, sets or sorted sets) and is one of the most powerful Redis features.</li>
<li><strong>EXPIREAT key timestamp</strong></li>
<li>Performs the same operation as EXPIRE, except you can specify a UNIX timestamp (seconds since midnight, January 1, 1970) instead of the number of elapsed seconds.</li>
<li><strong>TTL key</strong></li>
<li>Tells you the remaining time to live of a key with an expiration timeout.</li>
<li><strong>PERSIST key</strong></li>
<li>Removes the expiration timeout on the given key.</li>
<li>Redirections and consent

<pre><code>redis&gt; SET /authorizations/request_token:hh5s93j4hdidpola 16
redis&gt; HGET /consumers/key:dpf43f3p2l4k3l03 redirect_url
redis&gt; HGETALL /consumers/key:dpf43f3p2l4k3l03
redis&gt; HGET /request_tokens/key:dpf43f3p2l4k3l03 hh5s93j4hdidpola
redis&gt; GET /authorizations/request_token:hh5s93j4hdidpola
redis&gt; SADD /nonces/key:dpf43f3p2l4k3l03/timestamp:20110306182700 kllo9940pd9333jh
redis&gt; EXPIRE /nonces/key:dpf43f3p2l4k3l03/timestamp:20110306182600 1800
redis&gt; HMSET /access_tokens/consumer_key:dpf43f3p2l4k3l03/access_token:nnch734d00sl2jdk
       secret pfkkdhi9sl3r4s00 user_id 16 created_at 20110306182600
redis&gt; HDEL /request_tokens/key:dpf43f3p2l4k3l03 hh5s93j4hdidpola
redis&gt; DEL /authorizations/request_token:hh5s93j4hdidpola
redis&gt; HSET /users/user_id:16/applications dpf43f3p2l4k3l03 nnch734d00sl2jdk
redis&gt; HDEL /users/user_id:16/applications dpf43f3p2l4k3l03
redis&gt; DEL /access_tokens/consumer_key:dpf43f3p2l4k3l03/access_token:nnch734d00sl2jdk
redis&gt; EXPIRE /access_tokens/consumer_key:dpf43f3p2l4k3l03/access_token:nnch734d00sl2jdk 86400
</code></pre></li>
</ul>


<p><strong>Quick Reference for Hash Operations</strong></p>

<ul>
<li><strong>HGET hash-name key</strong></li>
<li>Returns the value at key in the given hash.</li>
<li><strong>HDEL hash-name key</strong></li>
<li>Deletes a key/value pair in the given hash.</li>
</ul>


<h1 id=4>CHAPTER 4 Redis Administration and Maintenance</h1>


<p><strong>Starting a Redis Slave</strong></p>

<pre><code>redis&gt; slaveof master-ip-or-hostname masterport
redis&gt; masterauth master-password
redis&gt; SLAVEOF master-ip-or-hostname [masterport]
redis&gt; CONFIG SET masterauth password
</code></pre>

<p><strong>Handling a Dataset Larger Than Memory</strong></p>

<pre><code>vm-enabled yes
vm-swap-file
vm-max-memory
vm-pages
vm-page-size
vm-max-threads
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[redis.conf 配置参数]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/01/11/100854-redis/"/>
    <updated>2012-01-11T10:08:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/01/11/100854-redis</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[munin 配置参数]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/01/10/181350-munin/"/>
    <updated>2012-01-10T18:13:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/01/10/181350-munin</id>
    <content type="html"><![CDATA[<p><a href="http://munin-monitoring.org/wiki/faq">Munin FAQ</a>
<a href="http://aouyar.github.com/PyMunin/">PyMunin Plugins</a>
<a href="http://anders.fupp.net/plugins/">BSD Plugins</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python 参考手册 第1章]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/01/09/175416-python/"/>
    <updated>2012-01-09T17:54:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/01/09/175416-python</id>
    <content type="html"><![CDATA[<h1>第2章 Python 简介</h1>

<ul>
<li><a href="#1.1">1.1 运行Python</a></li>
<li><a href="#1.2">1.2 变量和算术表达式</a></li>
<li><a href="#1.3">1.3 条件语句</a></li>
<li><a href="#1.4">1.4 文件输入和输出</a></li>
<li><a href="#1.5">1.5 字符串</a></li>
<li><a href="#1.6">1.6 列表</a></li>
<li><a href="#1.7">1.7 元组</a></li>
<li><a href="#1.8">1.8 集合</a></li>
<li><a href="#1.9">1.9 字典</a></li>
<li><a href="#1.10">1.10 迭代与循环</a></li>
<li><a href="#1.11">1.11 函数</a></li>
<li><a href="#1.12">1.12 生成器</a></li>
<li><a href="#1.13">1.13 协程</a></li>
<li><a href="#1.14">1.14 对象与类</a></li>
<li><a href="#1.15">1.15 异常</a></li>
<li><a href="#1.16">1.16 模块</a></li>
<li><a href="#1.17">1.17 获得帮助</a></li>
</ul>


<h1 id=1.1>1.1 运行Python</h1>


<pre><code>$ python
&gt;&gt;&gt; print "Hello World"
&gt;&gt;&gt; print("Hello World") #python 3
</code></pre>

<p>桌面计算器, _用于保存最后一次运算结果,并只在交互式环境中才有效</p>

<pre><code>&gt;&gt;&gt; 6000 + 4523.50 + 134.12
&gt;&gt;&gt; _ + 8192.32
</code></pre>

<p>创建程序, #表示整个一行都是注释</p>

<pre><code># helloworld.py
print "Hello World"
</code></pre>

<p>执行程序</p>

<pre><code>$ python helloworld.py
</code></pre>

<p>退出程序, 输入EOF. UNIX(Ctrl+D),Windows(Ctrl+Z).通过程序抛出SystemExit异常</p>

<pre><code>&gt;&gt;&gt; raise SystemExit
</code></pre>

<h1 id=1.2>1.2 变量和算术表达式</h1>


<p><strong>程序清单1-1 简单的复利计算</strong></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">principal</span> <span class="o">=</span> <span class="mi">1000</span>    <span class="c"># 初始金额</span>
</span><span class='line'><span class="n">rate</span> <span class="o">=</span> <span class="mf">0.05</span>         <span class="c"># 利率</span>
</span><span class='line'><span class="n">numyears</span> <span class="o">=</span> <span class="mi">5</span>        <span class="c"># 年数</span>
</span><span class='line'><span class="n">year</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">while</span> <span class="n">year</span> <span class="o">&lt;=</span> <span class="n">numyears</span><span class="p">:</span>
</span><span class='line'>    <span class="n">principal</span> <span class="o">=</span> <span class="n">principal</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">rate</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">year</span><span class="p">,</span> <span class="n">principal</span> <span class="c"># 注意在Python3中是print(year, principal)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Python是一种动态类型语言,变量名无类型,但在执行过程中可以引用任意类型的数据</p>

<pre><code># principal名称引用的值的类型由integer动态变为了float
principal = principal * (1 + rate)
</code></pre>

<p>换行代表一条语句的结束,也可在同一行上使用分号隔开多条语句</p>

<pre><code>principal = 1000; rate = 0.05; numyears = 5;
</code></pre>

<p>while语句对条件表达式进行判断,True执行循环主体,False退出循环.建议每个缩进层次用4个空格.</p>

<p>字符串格式化运算符%</p>

<pre><code># 将principal精度限制为2位
print "%3d %0.2f" % (year, principal)
print("%3d %0.2f" % (year, principal))  #Python 3
</code></pre>

<p>整数 &#8220;%d&#8221;, 字符串 &#8220;%s&#8221;, 浮点数 &#8220;%f&#8221;</p>

<p>更新的字符串格式方法</p>

<pre><code>print format(year, "3d"), format(principal, "0.2f")
print(format(year, "3d"), format(principal, "0.2f"))  #Python 3
</code></pre>

<p>一次格式化多个字符串</p>

<pre><code>print "{0:3d} {1:0.2f}".format(year, principal)
print("{0:3d} {1:0.2f}".format(year, principal))    #Python 3    
</code></pre>

<h1 id=1.3>1.3 条件语句</h1>


<pre><code>if a &lt; b:
    print "Computer says Yes"
else:
    print "Computer says No"
# if和elase主体用缩进表示,else子句可选.
</code></pre>

<p>用pass语句用于创建空子句</p>

<pre><code>if a &lt; b:
    pass    # Do nothing
else:
    print "Computer says No"
</code></pre>

<p>使用or, and和not关键字可以创建布尔类型表达式</p>

<pre><code>if product == "game" and type == "pirate memory" \
                     and not (age &lt; 4 or age &gt; 8):
    print "I'll take it!"
</code></pre>

<p>elif语句, 处理多个测试</p>

<pre><code>if suffix == ".htm":
    content = "text/html"
elif suffix == ".jpg":
    content = "image/jpeg"
elif suffix == ".png":
    content = "image/png"
else:
    raise RuntimeError("Unknown content type")
</code></pre>

<p>in运算符用于检查某个值是否包含在另一个对象, 返回True/False</p>

<pre><code>if 'spam' in s:
    has_spam = True
else:
    has_spam = False
# 可缩写为 has_spam = 'spam' in s
</code></pre>

<h1 id=1.4>1.4 文件输入和输出</h1>


<p>打开文件并逐行读取内容</p>

<pre><code>f = open("foo.txt")     #返回一个文件对象
line = f.readline()     #调用文件的readline()方法
while line:
    print line,         #后面跟','将忽略换行符
    # print(line, end='')   #Python 3
    line = f.readline()
f.close()
</code></pre>

<p>open()函数返回一个新的文件对象, readline()方法读取一行内容,包括结尾的换行符, 读至结尾返回空字符串</p>

<pre><code>for line in open("foo.txt"):
    print line,
</code></pre>

<p>将程序输出到文件中,print >> 文件</p>

<pre><code>f = open("out", "w")    #打开文件以便写入
while year &lt;= numyears:
    principal = principal * (1 + rate)
    print &gt;&gt;f, "%3d %0.2f" % (year, principal)
    year += 1
f.close()
</code></pre>

<p>>>语法只能用于Python 2中, Python 3:</p>

<pre><code>print("%3d %0.2f" % (year, principal), file=f)
</code></pre>

<p>文件对象支持使用write()方法写入原始数据</p>

<pre><code>f.write("%d %0.2f" % (year, principal))
</code></pre>

<p>输入流从读取sys.stdin文件,输出流写入sys.stdout文件</p>

<pre><code>import sys
sys.stdout.write("Enter your name :")
name = sys.stdin.readline()
#Python 2可简化为
name = raw_input("Enter your name :")
#Python 3 raw_input函数叫做input()
</code></pre>

<h1 id=1.5>1.5 字符串</h1>


<p>将字符串放在单引号,双引号,三引号中创建字符串</p>

<pre><code>a = "Hello World"
b = 'Python is groovy'
c = """Computer says 'No'"""
</code></pre>

<p>引号必须对应匹配,单引号和双引号的字符串必须在一个逻辑行.三引号可放于多个文本行</p>

<pre><code>print '''Content-type: text/html

&lt;h1&gt; Hello World &lt;/h1&gt;
Click &lt;a href="http://www.python.org"&gt;here&lt;/a&gt;.
'''
</code></pre>

<p>字符串存储在以0开始, 使用整数索引的字符序列中. 要提取其中一个字符, 可以使用索引运算符s[i]</p>

<pre><code>a = "Hello World"
b = a[4]    # b = 'o'
</code></pre>

<p>使用切片运算符s[i:j]提取子字符串. 省略i, 起始开始. 省略j, 结束为至</p>

<pre><code>c = a[:5]   # c = "Hello"
d = a[6:]   # d = "World"  ## d = a[5:] d = " World"
e = a[3:8]  # e = "lo Wo"
</code></pre>

<p>+运算符连接字符串</p>

<pre><code>g = a + " This is a test"
</code></pre>

<p>Python不会把字符串的值转换成数值</p>

<pre><code>x = "37"
y = "42"
z = x + y   # z = "3742" (字符串连接)
</code></pre>

<p>int(), float() 将字符串值转换为数值</p>

<pre><code>z = int(x) + int(y) # z = 79 (Integer +)
</code></pre>

<p>str(), repr(), format() 将非字符串值转换为字符串形式</p>

<pre><code>s = "The value of x is " + str(x)
s = "The value of x is " + repr(x)
s = "The value of x is " + format(x,"4d")
</code></pre>

<p>str()输出与print相同, repr()表示输出对象在程序中的值</p>

<pre><code>&gt;&gt;&gt; x = 3.4
&gt;&gt;&gt; str(x)
&gt;&gt;&gt; repr(x)     # 计算机无法精确表示十进制小数,
&gt;&gt;&gt; format(x, "0.5f")
</code></pre>

<h1 id=1.6>1.6 列表</h1>


<p>将任意对象放在方括号中创建列表</p>

<pre><code>name = [ "Dave", "Mark", "Ann", "Phil" ]
</code></pre>

<p>列表从0开始整数索引,索引运算符可访问并修改列表的项</p>

<pre><code>a = names[2]        # 返回列表的第3项"Ann"
name[0] = "Jeff"    # 将第1项改为"Jeff"
</code></pre>

<p>append(), 将新项追加到列表末尾</p>

<pre><code>names.append("Paula")
</code></pre>

<p>insert(), 将一项插入到列表</p>

<pre><code>names.insert(2, "Thomas")
</code></pre>

<p>切片运算符, 提取子列表并对其赋值</p>

<pre><code>b = names[0:2]      # 返回[ "Jeff", "Mark" ]
c = names[2:]       # 返回[ "Thomas", "Ann", "Phil", "Paula" ]
names[1] = 'Jeff'   # 将names中第第2项替换为'Jeff'
names[0:2] = ['Dave', 'Mark', 'Jeff']   #将列表的头两项替换为右边的列表
</code></pre>

<p>+运算符连接列表</p>

<pre><code>a = [1,2,3] + [4,5] # 结果是[1,2,3,4,5]
</code></pre>

<p>创建空列表</p>

<pre><code>names = []      # 一个空列表
names = list()  # 一个空列表
</code></pre>

<p>列表可以包括任意种类的Python对象,包括其他列表</p>

<pre><code>a = [1,"Dave",3.14, ["Mark", 7, 9, [100,101]], 10]
</code></pre>

<p>嵌套列表需要多次索引运算进行访问</p>

<pre><code>a[1]        # 返回"Dave"
a[3][2]     # 返回9
a[3][3][1]  # 返回101
</code></pre>

<p><strong>程序清单1-2 列表的高级特性</strong></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sys</span>              <span class="c"># 加载sys模块</span>
</span><span class='line'><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">2</span>   <span class="c"># 检查命令行参数的数量</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;Please supply a filename&quot;</span>
</span><span class='line'>    <span class="k">raise</span> <span class="ne">SystemExit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>   <span class="c"># 命令行上的文件名</span>
</span><span class='line'><span class="n">lines</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>   <span class="c"># 将所有行读取到一个列表中</span>
</span><span class='line'><span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 将所有输入值从字符串转换为浮点数</span>
</span><span class='line'><span class="n">fvalues</span> <span class="o">=</span> <span class="p">[</span><span class="nb">float</span><span class="p">(</span><span class="n">line</span><span class="p">)</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 打印最小值和最大值</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;The minimum value is &quot;</span><span class="p">,</span> <span class="nb">min</span><span class="p">(</span><span class="n">fvalues</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;The maximum value is &quot;</span><span class="p">,</span> <span class="nb">max</span><span class="p">(</span><span class="n">fvalues</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>转换值的代码可简化为</p>

<pre><code>fvalues = [float(line) for line in open(sys.argv[1])]
</code></pre>

<h1 id=1.7>1.7 元组</h1>


<p>将任意对象放在圆括号中创建列表</p>

<pre><code>stock = ('GOOG', 100, 490.10)
address = ('www.python.org', 80)
person = (first_name, last_name, phone)
</code></pre>

<p>可以省略圆括号</p>

<pre><code>stock = 'GOOG', 100, 490.10
address = 'www.python.org', 80
person = first_name, last_name, phone
</code></pre>

<p>0个和1个元素的元组</p>

<pre><code>a = ()      # 0-元组(空元组)
b = (item,) # 1-元组(注意随后的逗号)
c = (item,) # 1-元组(注意随后的逗号)
</code></pre>

<p>将元祖解包为一组变量</p>

<pre><code>name, shares, price = stock
host, port = address
first_name, last_name, phone = person
</code></pre>

<p>创建元组后不能对其修改(替换,删除,插入), 列表可以,但如果程序创建了大量小列表(项&lt;12),会造成内存浪费</p>

<p>字符串split()方法按指定的分割符将一个字符串划分为一个字段列表</p>

<pre><code># 文件中各行的格式为"name, shares, price"
filename = "portfolio.csv"
portfolio = []
for line in open(filename):
    fields = line.split(",")        # 将每行划分为一个列表
    name = fields[0]                # 提取并转换每个字段
    shares = int(fields[1])
    price = float(fields[2])
    stock = (name, shares, price)   # 创建一个元祖(name, shares, price)
    portfolio.append(stock)         # 将记录追加到列表中
&gt;&gt;&gt; portfolio[0]
&gt;&gt;&gt; portfolio[1]
&gt;&gt;&gt; portfolio[1][1]
&gt;&gt;&gt; portfolio[1][2]
# 更简单的方法
total = 0.0
for name, shares, price in portfolio:
    total += shares * price
</code></pre>

<h1 id=1.8>1.8 集合</h1>


<p>使用set函数创建集合</p>

<pre><code>s = set([3,5,9,10])     # 创建一个数值集合
t = set("Hello")        # 创建一个唯一字符的集合
</code></pre>

<p>集合是无序的</p>

<pre><code>&gt;&gt;&gt; t
set(['H', 'e', 'l', 'o'])   # 注意只出现了一个'l'
a = t | s       # t和s的并集
b = t &amp; s       # t和s的交集
c = t - s       # 求差集(项在t中,但不在s中)
d = t ^ s       # 对称基集(项在t或s中, 但不会同时出现在二者中)
</code></pre>

<p>add(), update()在集合中添加新项</p>

<pre><code>t.add('x')              # 添加一项
s.update([10,37,42])    # 在s中添加多项
</code></pre>

<p>remove() 删除一项</p>

<pre><code>t.remove('H')
</code></pre>

<h1 id=1.9>1.9 字典</h1>


<p>将关联数组或散列表放入大括号中{}创建字典</p>

<pre><code>stock = {
    "name"  : "GOOG",
    "shares": 100,
    "price" : 490.10    
}
</code></pre>

<p>访问字典成员</p>

<pre><code>name = stock["name"]
value = stock["shares"] * stock["price"]
</code></pre>

<p>插入修改对象</p>

<pre><code>stock["shares"] = 75
stock["date"]   = "June 7, 2007" 
</code></pre>

<p>可变对象不可用作关键字
字典可作为快速查找序数据的一个容器</p>

<pre><code># 股票价格
price = {
    "GOOG" : 490.10,
    "AAPL" : 123.50,
    "IBM"  : 91.50,
    "MSFT" : 52.13
}
</code></pre>

<p>创建空字典</p>

<pre><code>prices = {}     # 一个空字典
prices = dict{} # 一个空字典
</code></pre>

<p>in运算符测试是否为字典成员</p>

<pre><code>if "SCOX" in prices:
    p = prices["SCOX"]
else:
    p = 0.0
# 更简洁的方法
p = price.get("SCOX", 0.0)
</code></pre>

<p>获得字典关键字列表</p>

<pre><code>syms = list(prints) # syms = ["AAPL", "MSFT", "IBM", "GOOG"]
</code></pre>

<p>del语句删除字典元素</p>

<pre><code>del prices["MSFT"]
</code></pre>

<h1 id=1.10>1.10 迭代与循环</h1>


<p>每次迭代将列表[1,2,3,4,&#8230;&#8230;,9]中的下一个值赋给变量n.</p>

<pre><code>for n in [1,2,3,4,5,6,7,8,9]:
    print "2 to the %d power is %d" % (n, 2**n)
# 更简洁的方法
for n in range(1,10):
    print "2 to the %d power is %d" % (n, 2**n)
</code></pre>

<p>range(i,j,[,步进值]) i到j-1, i省略默认为0</p>

<pre><code>a = range(5)        # a = 0,1,2,3,4
a = range(1,8)      # a = 1,2,3,4,5,6,7
c = range(1,14,3)   # a = 0,3,6,9,12
d = range(8,1,-1)   # a = 8,7,6,5,4,3,2
</code></pre>

<p>xrange()用于处理极大范围的整数值.Python3中已更名为range()</p>

<p>for语句可迭代多种对象,包括字符串, 列表, 字典和文件</p>

<pre><code>a = "Hello World"
# 打印出a中的每个字符
for c in a:
    print c

b = ["Dave", "Mark", "Ann", "Phil"]
# 打印出一个列表的成员
for name in b:
    print name
c = { 'GOOG':490.10, 'IBM':91.50, 'AAPL':123.15 }
# 打印出一个字典的所有成员
for key in c:
    print key, c[key]

# 打印一个文件中的所有行
f = open("foo.txt")
for line in f:
    print line,
</code></pre>

<h1 id=1.11>1.11 函数</h1>


<p>使用def语句创建函数</p>

<pre><code>def remainder(a,b):
    q = a // b      # //是截断除法运算符
    r = a - q*b
    return r 
</code></pre>

<p>调用函数</p>

<pre><code>result = remainder(37,15)
</code></pre>

<p>让函数返回多个值</p>

<pre><code>def divide(a,b):
    q = q // b      # 如果a和b是整数, q就是整数
    r = a - q*b
    return (q,r)
</code></pre>

<p>讲结果放到单独的变量中</p>

<pre><code>quotient, remainder = divide(1456,33)
</code></pre>

<p>给函数参数提供默认值, 调用此函数时可省略</p>

<pre><code>def connect(hostname, port, timeout=300):
    # 函数体
connect('www.python.org', 80)
</code></pre>

<p>使用关键字参数调用函数</p>

<pre><code>connect(port=80, hostname="www.python.org")
</code></pre>

<p>变量定义在函数中,作用域只在函数体内,要修改全局变量的值, 可用global语句</p>

<pre><code>count = 0
...
def foo():
    global count
    count += 1      # 更改全局变量count
</code></pre>

<h1 id=1.12>1.12 生成器</h1>


<p>yield语句可让函数生成一个结果序列</p>

<pre><code>def countdown(n):
    print "Counting down!"
    while n &gt; 0:
        yield n     # 生成一个值(n)
        n -= 1
</code></pre>

<p>生成器创建一个对象, 连续调用next()方法生成结果序列(Python3中是<strong>next</strong>())</p>

<pre><code>&gt;&gt;&gt; c = countdown(5)
&gt;&gt;&gt; c.next()
&gt;&gt;&gt; c.next()
&gt;&gt;&gt; c.next()
&gt;&gt;&gt;
# 通常使用for 循环调用
&gt;&gt;&gt; for i in countdown(5):
    print i,
</code></pre>

<p>模拟UNIX tail -f命令</p>

<pre><code>import time
def tail(f):
    f.seek(0,2)     # 移动到EOF
    while True:
        line = f.readline() #尝试读取一个新的文件行
        if not line:
            time.sleep(0.1)
            continue
        yield line
</code></pre>

<p>在多行中查找特定字符串</p>

<pre><code>def grep(lines, searchtext):
    for line in lines:
        if searchtext in line:  yield line

# UNIX "tail -f | grep python"命令的python实现
wwwlog = tail(open("access-log"))
pylines = grep(wwwlog, "python")
for line in pylines:
    print line,
</code></pre>

<h1 id=1.13>1.13 协程</h1>


<p>以表达式(yield)形式创建协程</p>

<pre><code>def print_matches(matchtext):
    print "Looking for", matchtext
    while True:
        line = (yield)      # 获得一行文本
        if matchtext in line:
            print line
</code></pre>

<p>向前执行第一条(yield)语句, 然后用send()发送数据</p>

<pre><code>&gt;&gt;&gt; matcher = print_matches("python")
&gt;&gt;&gt; matcher.next()      # 向前执行到第一条(yield)语句
&gt;&gt;&gt; matcher.send("Hello World")
&gt;&gt;&gt; matcher.send("python is cool")
&gt;&gt;&gt; matcher.send("yow!")
&gt;&gt;&gt; matcher.close()     # 匹配器函数调用结束
</code></pre>

<p>共同使用生成器和协程的例子</p>

<pre><code># 一组匹配器协程
matchers = [
    print_matches("python"),
    print_matches("guido"),
    print_matches("jython")
]
# 通过调用next()准备所有的匹配器
for m in matchers: m.next()
# 为所有匹配器提供一个活动的日志文件, 为此
# 必须有一台活动的Web服务器将数据写入日志
wwwlog = tail(open("access-log"))
for line in wwwlog:
    for m in matchers:
        m.send(line)    # 将数据发送到每个匹配器协程中
</code></pre>

<h1 id=1.14>1.14 对象与类</h1>


<p>程序中所有值都是对象. 对象由内部数据和各种方法组成</p>

<pre><code>items = [37,42]     # 创建一个列表对象
items.append(73)    # 调用append()方法
</code></pre>

<p>列出对象可用的方法</p>

<pre><code>&gt;&gt;&gt; items = [37,42]
&gt;&gt;&gt; dir(items)
</code></pre>

<p>以双下划线开始和结束的是特殊方法</p>

<pre><code>&gt;&gt;&gt; items.__add__([73,101])
</code></pre>

<p>class语句用于定义新的对象类型. object是所有Python类型的根类型, def语句定义方法, 方法的self参数作为第一个参数, 指向对象本身. <strong>init</strong>用于初始化对象</p>

<pre><code>class Stack(object):
    def __init__(self):     # 初始化栈
        self.stack = []
    def push(self, object):
        self.stack.append(object)
    def pop(self):
        return self.stack.pop()
    def length(self):
        return len(self.stack)
</code></pre>

<p>使用类</p>

<pre><code>s = Stack()     # 创建一个栈
s.push("Dave")  # 在栈中放入一些内容
s.push(42)
s.push([3,4,5])
x = s.pop()     # x的值为[3,4,5]
y = s.pop()     # y的值为42
del s           # 删除s
</code></pre>

<p>继承list</p>

<pre><code>class Stack(list):
    # 为栈接口添加push()方法
    # 注意: 列表已提供一个pop()方法
    def push(self, object):
        self.append(object)
</code></pre>

<p>静态方法</p>

<pre><code>class EventHanlder(object):
    @staticmethod
    def dispatcherThread():
        while (1):
            # 等待请求
EventHandler.dispatcherTread()  # 像函数一样调用方法
</code></pre>

<h1 id=1.15>1.15 异常</h1>


<p>如果程序出现错误会引发异常，可以使用try和except语句捕获并处理异常</p>

<pre><code>try:
    f = open("file.txt","r")
except IOError as e:
    print e
# 如果出现IOError, 引发错误的详细信息将保存在对象e中
</code></pre>

<p>raise语句用于手工引发异常</p>

<pre><code>raise RuntimeError("Computer says no")
</code></pre>

<p>管理系统资源，</p>

<pre><code>import threading
message_lock = threading.Lock()
...
with message_lock:
    message.add(newmessage)
# with语句执行会自动获取message_lock对象, 离开with代码块后锁定会自动释放
</code></pre>

<h1 id=1.16>1.16 模块</h1>


<p>模块文件的后缀必须是.py</p>

<pre><code># file : div.py
def divide(a, b):
    q = a/b     # 如果a和b是整数, 则q也是整数
    r = a - q*b
    return (q,r)
# 在其他程序中import该模块
import div
a, b = div.divide(2305, 29)
# import语句创建新的命名空间，并在新的命名空间执行.py相关的语句.
</code></pre>

<p>使用不同的名称导入模块</p>

<pre><code>import div as foo
a ,b = foo.divide(2305, 29)     # 不再使用div前缀
</code></pre>

<p>把模块所有内容加载到当前命名空间</p>

<pre><code>from div import *
</code></pre>

<p>dir函数可列出模块内容</p>

<pre><code>&gt;&gt;&gt; import string
&gt;&gt;&gt; dir(string)
</code></pre>

<h1 id=1.17>1.17 获得帮助</h1>


<p>help()获得内置模块及Python相关信息</p>

<p>help(&#8216;模块名&#8217;)获得具体模块信息</p>

<p><strong>doc</strong>属性, 获得函数用途的文档说明</p>

<pre><code>&gt;&gt;&gt; print issubclass.__doc__
</code></pre>

<p>pydoc命令返回python模块文档</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git 命令快速参考]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/01/09/172719-git/"/>
    <updated>2012-01-09T17:27:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/01/09/172719-git</id>
    <content type="html"><![CDATA[<h2>1.创建一个新的版本库</h2>


<p>从一个压缩包中创建：</p>

<pre><code>$ tar xzf project.tar.gz
$ cd project
$ git init #Initialized empty Git repository in .git/
$ git add .
$ git commit
</code></pre>

<p>从远程版本库创建：</p>

<pre><code>$ git clone git://example.com/pub/project.git
$ cd project
</code></pre>

<h2>2.管理分支</h2>


<pre><code>$ git branch         # list all local branches in this repo
$ git checkout test  # switch working directory to branch "test"
$ git branch new     # create branch "new" starting at current HEAD
$ git branch -d new  # delete branch "new"
</code></pre>

<p>创建一个不以当前的 HEAD 为起点的分支，用：</p>

<pre><code>$ git branch new test    # branch named "test"
$ git branch new v2.6.15 # tag named v2.6.15
$ git branch new HEAD^   # commit before the most recent
$ git branch new HEAD^^  # commit before that
$ git branch new test~10 # ten commits before tip of branch "test"
</code></pre>

<p>创建并同时切换至新的分支：</p>

<pre><code>$ git checkout -b new v2.6.15
</code></pre>

<p>更新和检验从远程版本库中克隆过来的分支：</p>

<pre><code>$ git fetch             # update
$ git branch -r         # list
origin/master
origin/next
...
$ git checkout -b masterwork origin/master
</code></pre>

<p>从不同的版本库中抓取分支，并给予一个在你的版本库中新的分支名称：</p>

<pre><code>$ git fetch git://example.com/project.git theirbranch:mybranch
$ git fetch git://example.com/project.git v2.6.15:mybranch
</code></pre>

<p>给你要定期地协同工作的版本库制作一个列表：</p>

<pre><code>$ git remote add example git://example.com/project.git
$ git remote                    # list remote repositories
</code></pre>

<p>example
origin</p>

<pre><code>$ git remote show example       # get details
* remote example
URL: git://example.com/project.git
Tracked remote branches
master
next
...
$ git fetch example             # update branches from example
$ git branch -r                 # list all remote branches
</code></pre>

<h2>3.勘查历史</h2>


<pre><code>$ gitk                      # visualize and browse history
$ git log                   # list all commits
$ git log src/              # ...modifying src/
$ git log v2.6.15..v2.6.16  # ...in v2.6.16, not in v2.6.15
$ git log master..test      # ...in branch test, not in branch master
$ git log test..master      # ...in branch master, but not in test
$ git log test...master     # ...in one branch, not in both
$ git log -S'foo()'         # ...where difference contain "foo()"
$ git log --since="2 weeks ago"
$ git log -p                # show patches as well
$ git show                  # most recent commit
$ git diff v2.6.15..v2.6.16 # diff between two tagged versions
$ git diff v2.6.15..HEAD    # diff with current head
$ git grep "foo()"          # search working directory for "foo()"
$ git grep v2.6.15 "foo()"  # search old tree for "foo()"
$ git show v2.6.15:a.txt    # look at old version of a.txt
</code></pre>

<p>查找撤退点：</p>

<pre><code>$ git bisect start
$ git bisect bad                # current version is bad
$ git bisect good v2.6.13-rc2   # last known good revision
Bisecting: 675 revisions left to test after this
                            # test here, then:
$ git bisect good               # if this revision is good, or
$ git bisect bad                # if this revision is bad.
                            # repeat until done.
</code></pre>

<h2>4.制作变更</h2>


<p>配置 git</p>

<pre><code>vi ~/.gitconfig
[user]
    name = Phoenix
    email = phoenixtoday@gmail.com
[alias]
co = checkout
ci = commit -a
st = status
br = branch
oneline = log --pretty=oneline --since='2 days ago'
onelog = log -p -1
[color]
status = auto
branch = auto
ui = auto
</code></pre>

<p>选择这下次提交的时候要包含那些文件，接着制作交付：</p>

<pre><code>$ git add a.txt    # updated file
$ git add b.txt    # new file
$ git rm c.txt     # old file
$ git commit
</code></pre>

<p>或者是准备提交和创建交付一步完成：</p>

<pre><code>$ git commit d.txt # use latest content only of d.txt
$ git commit -a    # use latest content of all tracked files
</code></pre>

<h2>5.合并</h2>


<pre><code>$ git merge test   # merge branch "test" into the current branch
$ git pull git://example.com/project.git master
              # fetch and merge in remote branch
$ git pull . test  # equivalent to git merge test
</code></pre>

<h2>6.共享你的变更</h2>


<p>引入或者导出补丁：</p>

<pre><code>$ git format-patch origin..HEAD # format a patch for each commit
                            # in HEAD but not in origin
$ git am mbox # import patches from the mailbox "mbox"
</code></pre>

<p>抓取一个不同的 git 版本库的分支，并合并进当前分支：</p>

<pre><code>$ git pull git://example.com/project.git theirbranch
</code></pre>

<p>在合并至当前分支之前，将远程分支的变更保存为本地的分支：</p>

<pre><code>$ git pull git://example.com/project.git theirbranch:mybranch
</code></pre>

<p>创建了本地分支的交付之后，用这些交付更新远程分支。</p>

<pre><code>$ git push ssh://example.com/project.git mybranch:theirbranch
</code></pre>

<p>当本地和远程分支都是叫 &#8220;test&#8221; 时：</p>

<pre><code>$ git push ssh://example.com/project.git test
</code></pre>

<p>对于经常通讯的远程版本库，有快捷命令的版本：</p>

<pre><code>$ git remote add example ssh://example.com/project.git
$ git push example test
</code></pre>

<h2>7.版本库的维护</h2>


<p>检查损坏：</p>

<pre><code>$ git fsck
</code></pre>

<p>重新打包，删除无用的杂物：</p>

<pre><code>$ git gc
</code></pre>

<h2>8.其它</h2>


<p>忽略某些文件及目录</p>

<pre><code>$ vi .gitignore
</code></pre>

<p>可以使用通配符，目录最后不要加斜杠。</p>

<p>丢弃当前所有未提交内容</p>

<pre><code>$ git reset --hard HEAD
</code></pre>

<p>有未提交内容时快速切换到另一分支</p>

<pre><code>$ git stash save "work in progress for foo feature"
</code></pre>

<p>切换到另一分支，并修改、提交…
切换回原来分支</p>

<pre><code>$ git stash apply
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[markdown 语法说明]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/01/08/183821-markdown/"/>
    <updated>2012-01-08T18:38:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/01/08/183821-markdown</id>
    <content type="html"><![CDATA[<p><strong>NOTE:</strong> This is Traditional Chinese Edition Document of
Markdown Syntax. If you are seeking for English Edition
Document. Please refer to <a href="http://daringfireball.net/projects/markdown/syntax">Markdown: Syntax</a>.</p>

<h1>Markdown: Syntax</h1>

<ul>
<li><a href="#overview">概述</a>

<ul>
<li><a href="#philosophy">哲學</a></li>
<li><a href="#html">行內 HTML</a></li>
<li><a href="#autoescape">特殊字元自動轉換</a></li>
</ul>
</li>
<li><a href="#block">區塊元素</a>

<ul>
<li><a href="#p">段落和換行</a></li>
<li><a href="#header">標題</a></li>
<li><a href="#blockquote">區塊引言</a></li>
<li><a href="#list">清單</a></li>
<li><a href="#precode">程式碼區塊</a></li>
<li><a href="#hr">分隔線</a></li>
</ul>
</li>
<li><a href="#span">區段元素</a>

<ul>
<li><a href="#link">連結</a></li>
<li><a href="#em">強調</a></li>
<li><a href="#code">程式碼</a></li>
<li><a href="#img">圖片</a></li>
</ul>
</li>
<li><a href="#misc">其它</a>

<ul>
<li><a href="#backslash">跳脫字元</a></li>
<li><a href="#autolink">自動連結</a></li>
</ul>
</li>
<li><a href="#acknowledgement">感謝</a></li>
</ul>


<p><strong>注意：</strong>這份文件是用 Markdown 寫的，你可以<a href="https://github.com/othree/markdown-syntax-zhtw/blob/master/syntax.md">看看它的原始檔</a> 。</p>

<hr />

<h2 id="overview">概述</h2>




<h3 id="philosophy">哲學</h3>


<p>Markdown 的目標是實現「易讀易寫」。</p>

<p>不過最需要強調的便是它的可讀性。一份使用 Markdown 格式撰寫的文件應該可以直接以純文字發佈，並且看起來不會像是由許多標籤或是格式指令所構成。Markdown 語法受到一些既有 text-to-HTML 格式的影響，包括 <a href="http://docutils.sourceforge.net/mirror/setext.html">Setext</a>、<a href="http://www.aaronsw.com/2002/atx/">atx</a>、<a href="http://textism.com/tools/textile/">Textile</a>、<a href="http://docutils.sourceforge.net/rst.html">reStructuredText</a>、<a href="http://www.triptico.com/software/grutatxt.html">Grutatext</a> 和 <a href="http://ettext.taint.org/doc/">EtText</a>，然而最大靈感來源其實是純文字的電子郵件格式。</p>

<p>因此 Markdown 的語法全由標點符號所組成，並經過嚴謹慎選，是為了讓它們看起來就像所要表達的意思。像是在文字兩旁加上星號，看起來就像*強調*。Markdown 的清單看起來，嗯，就是清單。假如你有使用過電子郵件，區塊引言看起來就真的像是引用一段文字。</p>

<h3 id="html">行內 HTML</h3>


<p>Markdown 的語法有個主要的目的：用來作為一種網路內容的<em>寫作</em>用語言。</p>

<p>Markdown 不是要來取代 HTML，甚至也沒有要和它相似，它的語法種類不多，只和 HTML 的一部分有關係，重點<em>不是</em>要創造一種更容易寫作 HTML 文件的語法，我認為 HTML 已經很容易寫了，Markdown 的重點在於，它能讓文件更容易閱讀、編寫。HTML 是一種<em>發佈</em>的格式，Markdown 是一種<em>編寫</em>的格式，因此，Markdown 的格式語法只涵蓋純文字可以涵蓋的範圍。</p>

<p>不在 Markdown 涵蓋範圍之外的標籤，都可以直接在文件裡面用 HTML 撰寫。不需要額外標註這是 HTML 或是 Markdown；只要直接加標籤就可以了。</p>

<p>只有區塊元素──比如 <code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code> 等標籤，必需在前後加上空白，以利與內容區隔。而且這些（元素）的開始與結尾標籤，不可以用 tab 或是空白來縮排。Markdown 的產生器有智慧型判斷，可以避免在區塊標籤前後加上沒有必要的 <code>&lt;p&gt;</code> 標籤。</p>

<p>舉例來說，在 Markdown 文件裡加上一段 HTML 表格：</p>

<pre><code>This is a regular paragraph.

&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;Foo&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

This is another regular paragraph.
</code></pre>

<p>請注意，Markdown 語法在 HTML 區塊標籤中將不會被進行處理。例如，你無法在 HTML 區塊內使用 Markdown 形式的<code>*強調*</code>。</p>

<p>HTML 的區段標籤如 <code>&lt;span&gt;</code>、<code>&lt;cite&gt;</code>、<code>&lt;del&gt;</code> 則不受限制，可以在 Markdown 的段落、清單或是標題裡任意使用。依照個人習慣，甚至可以不用Markdown 格式，而採用 HTML 標籤來格式化。舉例說明：如果比較喜歡 HTML 的  <code>&lt;a&gt;</code> 或 <code>&lt;img&gt;</code> 標籤，可以直接使用這些標籤，而不用 Markdown 提供的連結或是影像標示語法。</p>

<p>HTML 區段標籤和區塊標籤不同，在區段標籤的範圍內， Markdown 的語法是有效的。</p>

<h3 id="autoescape">特殊字元自動轉換</h3>


<p>在 HTML 文件中，有兩個字元需要特殊處理： <code>&lt;</code> 和 <code>&amp;</code> 。 <code>&lt;</code> 符號用於起始標籤，<code>&amp;</code> 符號則用於標記 HTML 實體，如果你只是想要使用這些符號，你必須要使用實體的形式，像是 <code>&amp;lt;</code> 和 <code>&amp;amp;</code>。</p>

<p><code>&amp;</code> 符號其實很讓寫作網路文件的人感到困擾，如果你要打「AT&amp;T」 ，你必須要寫成「<code>AT&amp;amp;T</code>」 ，還得轉換網址內的 <code>&amp;</code> 符號，如果你要連結到：</p>

<pre><code>http://images.google.com/images?num=30&amp;q=larry+bird
</code></pre>

<p>你必須要把網址轉成：</p>

<pre><code>http://images.google.com/images?num=30&amp;amp;q=larry+bird
</code></pre>

<p>才能放到連結標籤的 <code>href</code> 屬性裡。不用說也知道這很容易忘記，這也可能是 HTML 標準檢查所檢查到的錯誤中，數量最多的。</p>

<p>Markdown 允許你直接使用這些符號，但是你要小心跳脫字元的使用，如果你是在HTML 實體中使用 <code>&amp;</code> 符號的話，它不會被轉換，而在其它情形下，它則會被轉換成 <code>&amp;amp;</code>。所以你如果要在文件中插入一個著作權的符號，你可以這樣寫：</p>

<pre><code>&amp;copy;
</code></pre>

<p>Markdown 將不會對這段文字做修改，但是如果你這樣寫：</p>

<pre><code>AT&amp;T
</code></pre>

<p>Markdown 就會將它轉為：</p>

<pre><code>AT&amp;amp;T
</code></pre>

<p>類似的狀況也會發生在 <code>&lt;</code> 符號上，因為 Markdown 支援 <a href="#html">行內 HTML</a> ，如果你是使用 <code>&lt;</code> 符號作為 HTML 標籤使用，那 Markdown 也不會對它做任何轉換，但是如果你是寫：</p>

<pre><code>4 &lt; 5
</code></pre>

<p>Markdown 將會把它轉換為：</p>

<pre><code>4 &amp;lt; 5
</code></pre>

<p>不過需要注意的是，code 範圍內，不論是行內還是區塊， <code>&lt;</code> 和 <code>&amp;</code> 兩個符號都<em>一定</em>會被轉換成 HTML 實體，這項特性讓你可以很容易地用 Markdown 寫 HTML code （和 HTML 相對而言， HTML 語法中，你要把所有的 <code>&lt;</code> 和 <code>&amp;</code> 都轉換為 HTML 實體，才能在 HTML 文件裡面寫出 HTML code。）</p>

<hr />

<h2 id="block">區塊元素</h2>




<h3 id="p">段落和換行</h3>


<p>一個段落是由一個以上相連接的行句組成，而一個以上的空行則會切分出不同的段落（空行的定義是顯示上看起來像是空行，便會被視為空行。比方說，若某一行只包含空白和 tab，則該行也會被視為空行），一般的段落不需要用空白或斷行縮排。</p>

<p>「一個以上相連接的行句組成」這句話其實暗示了 Markdown 允許段落內的強迫斷行，這個特性和其他大部分的 text-to-HTML 格式不一樣（包括 MovableType 的「Convert Line Breaks」選項），其它的格式會把每個斷行都轉成 <code>&lt;br /&gt;</code> 標籤。</p>

<p>如果你<em>真的</em>想要插入 <code>&lt;br /&gt;</code> 標籤的話，在行尾加上兩個以上的空白，然後按 enter。</p>

<p>是的，這確實需要花比較多功夫來插入 <code>&lt;br /&gt;</code> ，但是「每個換行都轉換為 <code>&lt;br /&gt;</code>」的方法在 Markdown 中並不適合， Markdown 中 email 式的 <a href="#blockquote">區塊引言</a> 和多段落的 <a href="#list">清單</a> 在使用換行來排版的時候，不但更好用，還更好閱讀。</p>

<h3 id="header">標題</h3>


<p>Markdown 支援兩種標題的語法，<a href="http://docutils.sourceforge.net/mirror/setext.html">Setext</a> 和 <a href="http://www.aaronsw.com/2002/atx/">atx</a> 形式。</p>

<p>Setext 形式是用底線的形式，利用 <code>=</code> （最高階標題）和 <code>-</code> （第二階標題），例如：</p>

<pre><code>This is an H1
=============

This is an H2
-------------
</code></pre>

<p>任何數量的 <code>=</code> 和 <code>-</code> 都可以有效果。</p>

<p>Atx 形式則是在行首插入 1 到 6 個 <code>#</code> ，對應到標題 1 到 6 階，例如：</p>

<pre><code># This is an H1

## This is an H2

###### This is an H6
</code></pre>

<p>你可以選擇性地「關閉」atx 樣式的標題，這純粹只是美觀用的，若是覺得這樣看起來比較舒適，你就可以在行尾加上 <code>#</code>，而行尾的 <code>#</code> 數量也不用和開頭一樣（行首的井字數量決定標題的階數）：</p>

<pre><code># This is an H1 #

## This is an H2 ##

### This is an H3 ######
</code></pre>

<h3 id="blockquote">Blockquotes</h3>


<p>Markdown 使用 email 形式的區塊引言，如果你很熟悉如何在 email 信件中引言，你就知道怎麼在 Markdown 文件中建立一個區塊引言，那會看起來像是你強迫斷行，然後在每行的最前面加上 <code>&gt;</code> ：</p>

<pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.
&gt; 
&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
&gt; id sem consectetuer libero luctus adipiscing.
</code></pre>

<p>Markdown 也允許你只在整個段落的第一行最前面加上 <code>&gt;</code> ：</p>

<pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.

&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.
</code></pre>

<p>區塊引言可以有階層（例如：引言內的引言），只要根據層數加上不同數量的 <code>&gt;</code> ：</p>

<pre><code>&gt; This is the first level of quoting.
&gt;
&gt; &gt; This is nested blockquote.
&gt;
&gt; Back to the first level.
</code></pre>

<p>引言的區塊內也可以使用其他的 Markdown 語法，包括標題、清單、程式碼區塊等：</p>

<pre><code>&gt; ## This is a header.
&gt; 
&gt; 1.   This is the first list item.
&gt; 2.   This is the second list item.
&gt; 
&gt; Here's some example code:
&gt; 
&gt;     return shell_exec("echo $input | $markdown_script");
</code></pre>

<p>任何標準的文字編輯器都能簡單地建立 email 樣式的引言，例如 BBEdit ，你可以選取文字後然後從選單中選擇<em>增加引言階層</em>。</p>

<h3 id="list">清單</h3>


<p>Markdown 支援有序清單和無序清單。</p>

<p>無序清單使用星號、加號或是減號作為清單標記：</p>

<pre><code>*   Red
*   Green
*   Blue
</code></pre>

<p>等同於：</p>

<pre><code>+   Red
+   Green
+   Blue
</code></pre>

<p>也等同於：</p>

<pre><code>-   Red
-   Green
-   Blue
</code></pre>

<p>有序清單則使用數字接著一個英文句點：</p>

<pre><code>1.  Bird
2.  McHale
3.  Parish
</code></pre>

<p>很重要的一點是，你在清單標記上使用的數字並不會影響輸出的 HTML 結果，上面的清單所產生的 HTML 標記為：</p>

<pre><code>&lt;ol&gt;
&lt;li&gt;Bird&lt;/li&gt;
&lt;li&gt;McHale&lt;/li&gt;
&lt;li&gt;Parish&lt;/li&gt;
&lt;/ol&gt;
</code></pre>

<p>如果你的清單標記寫成：</p>

<pre><code>1.  Bird
1.  McHale
1.  Parish
</code></pre>

<p>或甚至是：</p>

<pre><code>3. Bird
1. McHale
8. Parish
</code></pre>

<p>你都會得到完全相同的 HTML 輸出。重點在於，你可以讓 Markdown 文件的清單數字和輸出的結果相同，或是你懶一點，你可以完全不用在意數字的正確性。</p>

<p>如果你使用懶惰的寫法，建議第一個項目最好還是從 1. 開始，因為 Markdown 未來可能會支援有序清單的 start 屬性。</p>

<p>清單項目標記通常是放在最左邊，但是其實也可以縮排，最多三個空白，項目標記後面則一定要接著至少一個空白或 tab。</p>

<p>要讓清單看起來更漂亮，你可以把內容用固定的縮排整理好：</p>

<pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
    viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
    Suspendisse id sem consectetuer libero luctus adipiscing.
</code></pre>

<p>但是如果你很懶，那也不一定需要：</p>

<pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
Suspendisse id sem consectetuer libero luctus adipiscing.
</code></pre>

<p>如果清單項目間用空行分開， Markdown 會把項目的內容在輸出時用 <code>&lt;p&gt;</code>
標籤包起來，舉例來說：</p>

<pre><code>*   Bird
*   Magic
</code></pre>

<p>會被轉換為：</p>

<pre><code>&lt;ul&gt;
&lt;li&gt;Bird&lt;/li&gt;
&lt;li&gt;Magic&lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p>但是這個：</p>

<pre><code>*   Bird

*   Magic
</code></pre>

<p>會被轉換為：</p>

<pre><code>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p>清單項目可以包含多個段落，每個項目下的段落都必須縮排 4 個空白或是一個 tab ：</p>

<pre><code>1.  This is a list item with two paragraphs. Lorem ipsum dolor
    sit amet, consectetuer adipiscing elit. Aliquam hendrerit
    mi posuere lectus.

    Vestibulum enim wisi, viverra nec, fringilla in, laoreet
    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum
    sit amet velit.

2.  Suspendisse id sem consectetuer libero luctus adipiscing.
</code></pre>

<p>如果你每行都有縮排，看起來會看好很多，當然，再次地，如果你很懶惰，Markdown 也允許：</p>

<pre><code>*   This is a list item with two paragraphs.

    This is the second paragraph in the list item. You're
only required to indent the first line. Lorem ipsum dolor
sit amet, consectetuer adipiscing elit.

*   Another item in the same list.
</code></pre>

<p>如果要在清單項目內放進引言，那 <code>&gt;</code> 就需要縮排：</p>

<pre><code>*   A list item with a blockquote:

    &gt; This is a blockquote
    &gt; inside a list item.
</code></pre>

<p>如果要放程式碼區塊的話，該區塊就需要縮排<em>兩次</em>，也就是 8 個空白或是兩個 tab：</p>

<pre><code>*   A list item with a code block:

        &lt;code goes here&gt;
</code></pre>

<p>當然，項目清單很可能會不小心產生，像是下面這樣的寫法：</p>

<pre><code>1986. What a great season.
</code></pre>

<p>換句話說，也就是在行首出現<em>數字-句點-空白</em>，要避免這樣的狀況，你可以在句點前面加上反斜線。</p>

<pre><code>1986\. What a great season.
</code></pre>

<h3 id="precode">程式碼區塊</h3>


<p>和程式相關的寫作或是標籤語言原始碼通常會有已經排版好的程式碼區塊，通常這些區塊我們並不希望它以一般段落文件的方式去排版，而是照原來的樣子顯示，Markdown 會用 <code>&lt;pre&gt;</code> 和 <code>&lt;code&gt;</code> 標籤來把程式碼區塊包起來。</p>

<p>要在 Markdown 中建立程式碼區塊很簡單，只要簡單地縮排 4 個空白或是 1 個 tab 就可以，例如，下面的輸入：</p>

<pre><code>This is a normal paragraph:

    This is a code block.
</code></pre>

<p>Markdown 會轉換成：</p>

<pre><code>&lt;p&gt;This is a normal paragraph:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;This is a code block.
&lt;/code&gt;&lt;/pre&gt;
</code></pre>

<p>這個每行一階的縮排（4 個空白或是 1 個 tab），都會被移除，例如：</p>

<pre><code>Here is an example of AppleScript:

    tell application "Foo"
        beep
    end tell
</code></pre>

<p>會被轉換為：</p>

<pre><code>&lt;p&gt;Here is an example of AppleScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tell application "Foo"
    beep
end tell
&lt;/code&gt;&lt;/pre&gt;
</code></pre>

<p>一個程式碼區塊會一直持續到沒有縮排的那一行（或是文件結尾）。</p>

<p>在程式碼區塊裡面， <code>&amp;</code> 、 <code>&lt;</code> 和 <code>&gt;</code> 會自動轉成 HTML 實體，這樣的方式讓你非常容易使用 Markdown 插入範例用的 HTML 原始碼，只需要複製貼上，再加上縮排就可以了，剩下的 Markdown 都會幫你處理，例如：</p>

<pre><code>    &lt;div class="footer"&gt;
        &amp;copy; 2004 Foo Corporation
    &lt;/div&gt;
</code></pre>

<p>會被轉換為：</p>

<pre><code>&lt;pre&gt;&lt;code&gt;&amp;lt;div class="footer"&amp;gt;
    &amp;amp;copy; 2004 Foo Corporation
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</code></pre>

<p>程式碼區塊中，一般的 Markdown 語法不會被轉換，像是星號便只是星號，這表示你可以很容易地以 Markdown 語法撰寫 Markdown 語法相關的文件。</p>

<h3 id="hr">分隔線</h3>


<p>你可以在一行中用三個或以上的星號、減號、底線來建立一個分隔線，行內不能有其他東西。你也可以在星號中間插入空白。下面每種寫法都可以建立分隔線：</p>

<pre><code>* * *

***

*****

- - -

---------------------------------------
</code></pre>

<hr />

<h2 id="span">區段元素</h2>




<h3 id="link">連結</h3>


<p>Markdown 支援兩種形式的連結語法： <em>行內</em>和<em>參考</em>兩種形式。</p>

<p>不管是哪一種，連結的文字都是用 [方括號] 來標記。</p>

<p>要建立一個行內形式的連結，只要在方塊括號後面馬上接著括號並插入網址連結即可，如果你還想要加上連結的 title 文字，只要在網址後面，用雙引號把 title 文字包起來即可，例如：</p>

<pre><code>This is [an example](http://example.com/ "Title") inline link.

[This link](http://example.net/) has no title attribute.
</code></pre>

<p>會產生：</p>

<pre><code>&lt;p&gt;This is &lt;a href="http://example.com/" title="Title"&gt;
an example&lt;/a&gt; inline link.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://example.net/"&gt;This link&lt;/a&gt; has no
title attribute.&lt;/p&gt;
</code></pre>

<p>如果你是要連結到同樣主機的資源，你可以使用相對路徑：</p>

<pre><code>See my [About](/about/) page for details.   
</code></pre>

<p>參考形式的連結使用另外一個方括號接在連結文字的括號後面，而在第二個方括號裡面要填入用以辨識連結的標籤：</p>

<pre><code>This is [an example][id] reference-style link.
</code></pre>

<p>你也可以選擇性地在兩個方括號中間加上空白：</p>

<pre><code>This is [an example] [id] reference-style link.
</code></pre>

<p>接著，在文件的任意處，你可以把這個標籤的連結內容定義出來：</p>

<pre><code>[id]: http://example.com/  "Optional Title Here"
</code></pre>

<p>連結定義的形式為：</p>

<ul>
<li>方括號，裡面輸入連結的辨識用標籤</li>
<li>接著一個冒號</li>
<li>接著一個以上的空白或 tab</li>
<li>接著連結的網址</li>
<li>選擇性地接著 title 內容，可以用單引號、雙引號或是括弧包著</li>
</ul>


<p>下面這三種連結的定義都是相同：</p>

<pre><code>[foo]: http://example.com/  "Optional Title Here"
[foo]: http://example.com/  'Optional Title Here'
[foo]: http://example.com/  (Optional Title Here)
</code></pre>

<p><strong>請注意：</strong>有一個已知的問題是 Markdown.pl 1.0.1 會忽略單引號包起來的連結 title。</p>

<p>連結網址也可以用方括號包起來：</p>

<pre><code>[id]: &lt;http://example.com/&gt;  "Optional Title Here"
</code></pre>

<p>你也可以把 title 屬性放到下一行，也可以加一些縮排，網址太長的話，這樣會比較好看：</p>

<pre><code>[id]: http://example.com/longish/path/to/resource/here
    "Optional Title Here"
</code></pre>

<p>網址定義只有在產生連結的時候用到，並不會直接出現在文件之中。</p>

<p>連結辨識標籤可以有字母、數字、空白和標點符號，但是並<em>不</em>區分大小寫，因此下面兩個連結是一樣的：</p>

<pre><code>[link text][a]
[link text][A]
</code></pre>

<p><em>預設的連結標籤</em>功能讓你可以省略指定連結標籤，這種情形下，連結標籤和連結文字會視為相同，要用預設連結標籤只要在連結文字後面加上一個空的方括號，如果你要讓 &#8220;Google&#8221; 連結到 google.com，你可以簡化成：</p>

<pre><code>[Google][]
</code></pre>

<p>然後定義連結內容：</p>

<pre><code>[Google]: http://google.com/
</code></pre>

<p>由於連結文字可能包含空白，所以這種簡化的標籤內也可以包含多個文字：</p>

<pre><code>Visit [Daring Fireball][] for more information.
</code></pre>

<p>然後接著定義連結：</p>

<pre><code>[Daring Fireball]: http://daringfireball.net/
</code></pre>

<p>連結的定義可以放在文件中的任何一個地方，我比較偏好直接放在連結出現段落的後面，你也可以把它放在文件最後面，就像是註解一樣。</p>

<p>下面是一個參考式連結的範例：</p>

<pre><code>I get 10 times more traffic from [Google] [1] than from
[Yahoo] [2] or [MSN] [3].

  [1]: http://google.com/        "Google"
  [2]: http://search.yahoo.com/  "Yahoo Search"
  [3]: http://search.msn.com/    "MSN Search"
</code></pre>

<p>如果改成用連結名稱的方式寫：</p>

<pre><code>I get 10 times more traffic from [Google][] than from
[Yahoo][] or [MSN][].

  [google]: http://google.com/        "Google"
  [yahoo]:  http://search.yahoo.com/  "Yahoo Search"
  [msn]:    http://search.msn.com/    "MSN Search"
</code></pre>

<p>上面兩種寫法都會產生下面的 HTML。</p>

<pre><code>&lt;p&gt;I get 10 times more traffic from &lt;a href="http://google.com/"
title="Google"&gt;Google&lt;/a&gt; than from
&lt;a href="http://search.yahoo.com/" title="Yahoo Search"&gt;Yahoo&lt;/a&gt;
or &lt;a href="http://search.msn.com/" title="MSN Search"&gt;MSN&lt;/a&gt;.&lt;/p&gt;
</code></pre>

<p>下面是用行內形式寫的同樣一段內容的 Markdown 文件，提供作為比較之用：</p>

<pre><code>I get 10 times more traffic from [Google](http://google.com/ "Google")
than from [Yahoo](http://search.yahoo.com/ "Yahoo Search") or
[MSN](http://search.msn.com/ "MSN Search").
</code></pre>

<p>參考式的連結其實重點不在於它比較好寫，而是它比較好讀，比較一下上面的範例，使用參考式的文章本身只有 81 個字元，但是用行內形式的連結卻會增加到 176 個字元，如果是用純 HTML 格式來寫，會有 234 個字元，在 HTML 格式中，標籤比文字還要多。</p>

<p>使用 Markdown 的參考式連結，可以讓文件更像是瀏覽器最後產生的結果，讓你可以把一些標記相關的資訊移到段落文字之外，你就可以增加連結而不讓文章的閱讀感覺被打斷。</p>

<h3 id="em">強調</h3>


<p>Markdown 使用星號（<code>*</code>）和底線（<code>_</code>）作為標記強調字詞的符號，被 <code>*</code> 或 <code>_</code> 包圍的字詞會被轉成用 <code>&lt;em&gt;</code> 標籤包圍，用兩個 <code>*</code> 或 <code>_</code> 包起來的話，則會被轉成 <code>&lt;strong&gt;</code>，例如：</p>

<pre><code>*single asterisks*

_single underscores_

**double asterisks**

__double underscores__
</code></pre>

<p>會轉成：</p>

<pre><code>&lt;em&gt;single asterisks&lt;/em&gt;

&lt;em&gt;single underscores&lt;/em&gt;

&lt;strong&gt;double asterisks&lt;/strong&gt;

&lt;strong&gt;double underscores&lt;/strong&gt;
</code></pre>

<p>你可以隨便用你喜歡的樣式，唯一的限制是，你用什麼符號開啟標籤，就要用什麼符號結束。</p>

<p>強調也可以直接插在文字中間：</p>

<pre><code>un*frigging*believable
</code></pre>

<p>但是如果你的 <code>*</code> 和 <code>_</code> 兩邊都有空白的話，它們就只會被當成普通的符號。</p>

<p>如果要在文字前後直接插入普通的星號或底線，你可以用反斜線：</p>

<pre><code>\*this text is surrounded by literal asterisks\*
</code></pre>

<h3 id="code">程式碼</h3>


<p>如果要標記一小段行內程式碼，你可以用反引號把它包起來（<code>`</code>），例如：</p>

<pre><code>Use the `printf()` function.
</code></pre>

<p>會產生：</p>

<pre><code>&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;
</code></pre>

<p>如果要在程式碼區段內插入反引號，你可以用多個反引號來開啟和結束程式碼區段：</p>

<pre><code>``There is a literal backtick (`) here.``
</code></pre>

<p>這段語法會產生：</p>

<pre><code>&lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt;
</code></pre>

<p>程式碼區段的起始和結束端都可以放入一個空白，起始端後面一個，結束端前面一個，這樣你就可以在區段的一開始就插入反引號：</p>

<pre><code>A single backtick in a code span: `` ` ``

A backtick-delimited string in a code span: `` `foo` ``
</code></pre>

<p>會產生：</p>

<pre><code>&lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;
</code></pre>

<p>在程式碼區段內，<code>&amp;</code> 和方括號都會被轉成 HTML 實體，這樣會比較容易插入 HTML 原始碼，Markdown 會把下面這段：</p>

<pre><code>Please don't use any `&lt;blink&gt;` tags.
</code></pre>

<p>轉為：</p>

<pre><code>&lt;p&gt;Please don't use any &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;
</code></pre>

<p>你也可以這樣寫：</p>

<pre><code>`&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.
</code></pre>

<p>以產生：</p>

<pre><code>&lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encoded
equivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt;
</code></pre>

<h3 id="img">圖片</h3>


<p>很明顯地，要在純文字應用中設計一個 「自然」的語法來插入圖片是有一定難度的。</p>

<p>Markdown 使用一種和連結很相似的語法來標記圖片，同樣也允許兩種樣式： <em>行內</em>和<em>參考</em>。</p>

<p>行內圖片的語法看起來像是：</p>

<pre><code>![Alt text](/path/to/img.jpg)

![Alt text](/path/to/img.jpg "Optional title")
</code></pre>

<p>詳細敘述如下：</p>

<ul>
<li>一個驚嘆號 <code>!</code></li>
<li>接著一個方括號，裡面放上圖片的替代文字</li>
<li>接著一個普通括號，裡面放上圖片的網址，最後還可以用引號包住並加上
選擇性的 &#8216;title&#8217; 文字。</li>
</ul>


<p>參考式的圖片語法則長得像這樣：</p>

<pre><code>![Alt text][id]
</code></pre>

<p>「id」是圖片參考的名稱，圖片參考的定義方式則和連結參考一樣：</p>

<pre><code>[id]: url/to/image  "Optional title attribute"
</code></pre>

<p>到目前為止， Markdown 還沒有辦法指定圖片的寬高，如果你需要的話，你可以使用普通的 <code>&lt;img&gt;</code> 標籤。</p>

<hr />

<h2 id="misc">其它</h2>




<h3 id="autolink">自動連結</h3>


<p>Markdown 支援比較簡短的自動連結形式來處理網址和電子郵件信箱，只要是用方括號包起來， Markdown 就會自動把它轉成連結，連結的文字就和連結位置一樣，例如：</p>

<pre><code>&lt;http://example.com/&gt;
</code></pre>

<p>Markdown 會轉為：</p>

<pre><code>&lt;a href="http://example.com/"&gt;http://example.com/&lt;/a&gt;
</code></pre>

<p>自動的郵件連結也很類似，只是 Markdown 會先做一個編碼轉換的過程，把文字字元轉成 16 進位碼的 HTML 實體，這樣的格式可以混淆一些不好的信箱地址收集機器人，例如：</p>

<pre><code>&lt;address@example.com&gt;
</code></pre>

<p>Markdown 會轉成：</p>

<pre><code>&lt;a href="&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;
&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;
&amp;#109;"&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;
&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;
</code></pre>

<p>在瀏覽器裡面，這段字串會變成一個可以點擊的「address@example.com」連結。</p>

<p>（這種作法雖然可以混淆不少的機器人，但並無法全部擋下來，不過這樣也比什麼都不做好些。無論如何，公開你的信箱終究會引來廣告信件的。）</p>

<h3 id="backslash">跳脫字元</h3>


<p>Markdown 可以利用反斜線來插入一些在語法中有其它意義的符號，例如：如果你想要用星號加在文字旁邊的方式來做出強調效果（但不用 <code>&lt;em&gt;</code> 標籤），你可以在星號的前面加上反斜線：</p>

<pre><code>\*literal asterisks\*
</code></pre>

<p>Markdown 支援在下面這些符號前面加上反斜線來幫助插入普通的符號：</p>

<pre><code>\   反斜線
`   反引號
*   星號
_   底線
{}  大括號
[]  方括號
()  括號
#   井字號
+   加號
-   減號
.   英文句點
!   驚嘆號
</code></pre>

<h2 id="acknowledgement">感謝</h2>


<p>感謝 <a href="https://twitter.com/#!/leafy7382">leafy7382</a> 協助翻譯，<a href="http://iamhlb.com/">hlb</a>、<a href="http://twitter.com/randylien">Randylien</a> 幫忙潤稿，<a href="https://twitter.com/#!/ethantw">ethantw</a> 的<a href="http://ethantw.net/projects/han/">漢字標準格式・CSS Reset</a>， <a href="http://kidwm.net/">WM</a> 回報文字錯誤。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress 像黑客一样写博客]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/01/08/031317-octopress/"/>
    <updated>2012-01-08T03:13:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/01/08/031317-octopress</id>
    <content type="html"><![CDATA[<h1>Octopress 简介</h1>

<p>Octopress is a framework designed by Brandon Mathis for Jekyll, the blog aware static site generator powering Github Pages.</p>

<h2>优点</h2>

<p>用文件方式储存数据，无需数据库
以静态方式发布，可直接挂在github等地方
用markdown格式写博客
可以轻松的配置和发布</p>

<h2>安装</h2>

<pre><code>$ git clone git://github.com/imathis/octopress.git octopress
$ mv octopress blog
$ cd blog
$ sudo gem install rake --version=0.9.2
$ sudo gem install bundler
$ bundler install
$ rake install
</code></pre>

<h2>配置GitHub</h2>

<pre><code>$ rake setup_github_pages
&gt;git@github.com:zhangchuan/zhangchuan.github.com.git
</code></pre>

<h2>常用命令</h2>

<h3>添加文章</h3>

<pre><code>$ rake new_post["title"]
$ rake generate       #发布文件到public目录
$ rake watch          #监控source和sass目录的变动
$ rake preview        #启动服务器并监控变动，通过http://localhost:4000预览
</code></pre>

<h3>发布</h3>

<pre><code>$ rake generate
$ rake deploy
</code></pre>

<h3>保存源代码</h3>

<pre><code>$ git add .
$ git commit -m 'blog'
$ git push origin source
</code></pre>

<h2>自定义样式</h2>

<pre><code>$ vi sass/custom/_styles.scss
h1 { font-size: 1.2em; }
h2 { font-size: 1.1em; }
h3 { font-size: 1.0em; }
h4 { font-size: .9em; }
h5 { font-size: .8em; }
code { font-size: 0.8em; }

p, blockquote, ul, ol, h1, h2, h3, h4, h5, h6, code {
    margin-bottom: 1.2em;
}

article {
    font-size: 0.8em;
    line-height: 1.2em;
}

body &gt; header h1 { font-size: 1.2em; }
body &gt; header h2 { font-size: 0.8em; }
body &gt; footer p:last-child {
    font-size: 0.6em;
    margin-bottom: 0;
}

#content .blog-index article h1 {
    font-size: 1.2em;
}
#blog-archives h1 h2 a time {
    font-size: 0.8em;
    margin-top: 0.2em;
    margin-bottom: 0.2em;
}

// 边栏
aside.sidebar section h1 {
    font-size: 1.2em;
}
aside.sidebar a {
    font-size: 0.9em;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
