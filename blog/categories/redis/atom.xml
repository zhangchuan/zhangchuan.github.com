<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Redis | 研究中心]]></title>
  <link href="http://zhangchuan.github.com/blog/categories/redis/atom.xml" rel="self"/>
  <link href="http://zhangchuan.github.com/"/>
  <updated>2012-03-06T16:50:18+08:00</updated>
  <id>http://zhangchuan.github.com/</id>
  <author>
    <name><![CDATA[Cloud.Zhang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[redis 入门手册]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/03/06/160015-redis/"/>
    <updated>2012-03-06T16:00:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/03/06/160015-redis</id>
    <content type="html"><![CDATA[<ul>
<li><h1>数据类型</h1></li>
<li><h2>Redis的Key</h2></li>
<li>Redis的key是字符串类型</li>
<li><h3>key相关指令</h3></li>
<li>  exits key 检测指定 key 是否存在，返回 1 表示存在，0 不存在</li>
<li>  del key1 key2 ...... keyN 删除给定 key,返回删除 key 的数目，0 表示给定 key 都不存在</li>
<li>  type key 返回给定 key 值的类型。 返回 none 表示 key 不存在,string 字符类型， list 链表类型 set 无序集合类型......</li>
<li>  keys pattern 返回匹配指定模式的所有 key</li>
<li>  randomkey 返回从当前数据库中随机选择的一个 key,如果当前数据库是空的，返回空串</li>
<li>  rename oldkey newkey 重命名一个 key,如果 newkey 存在，将会被覆盖，返回 1 表示成功，0 失败。可能是 oldkey 不存在或者和 newkey 相同。</li>
<li>  renamenx oldkey newkey 同上，但是如果 newkey 存在返回失败。</li>
<li>  expire key seconds 为 key 指定过期时间，单位是秒。返回 1 成功，0 表示 key 已经设置过过期时间或者不存在。</li>
<li>  ttl key 返回设置过过期时间key的剩余过期秒数。-1表示key不存在或者未设置过期时间。</li>
<li>  select db-index 通过索引选择数据库，默认连接的数据库是 0,默认数据库数是 16 个。返回 1表示成功，0 失败。</li>
<li>  move key db-index 将 key 从当前数据库移动到指定数据库。返回 1 表示成功。0 表示 key
不存在或者已经在指定数据库中。</li>
<li><h2>Redis的vaule</h2></li>
<li>Redis提供五种数据类型: string, hash, list, set及sorted set</li>
<li>string 类型数据操作指令简介</li>
<li>  set key value 设置 key 对应 string 类型的值，返回 1 表示成功，0 失败。</li>
<li>  setnx key value 如果 key 不存在，设置 key 对应 string 类型的值。如果 key 已经存在，返回 0。</li>
<li>  get key 获取 key 对应的 string 值,如果 key 不存在返回 nil</li>
<li>  getset key value 先获取 key 的值，再设置 key 的值。如果 key 不存在返回 nil。</li>
<li>  mget key1 key2 ...... keyN 一次获取多个 key 的值，如果对应 key 不存在，则对应返回 nil。</li>
<li>  mset key1 value1 ...... keyN valueN 一次设置多个 key 的值， 成功返回 1 表示所有的值都设置了，失败返回 0 表示没有任何值被设置。</li>
<li>  msetnx key1 value1 ...... keyN valueN 一次设置多个 key 的值，但是不会覆盖已经存在的 key</li>
<li>  incr key 对 key 的值做++操作，并返回新的值。注意 incr 一个不是 int 的 value 会返回错误，incr 一个不存在的 key，则设置 key 值为 1。</li>
<li>  decr key 对 key 的值做--操作，decr 一个不存在 key，则设置 key 值为-1。</li>
<li>  incrby key integer 对 key 加上指定值 ，key 不存在时候会设置 key，并认为原来的 value是 0。</li>
<li>  decrby key integer 对 key 减去指定值。 decrby 完全是为了可读性， 我们完全可以通过 incrby一个负值来实现同样效果，反之一样。</li>
<li>hash 类型数据操作指令简介</li>
<li>  hset key field value 设置 hash field 为指定值，如果 key 不存在，则创建</li>
<li>  hget key field 获取指定的 hash field。</li>
<li>  hmget key filed1....fieldN 获取全部指定的 hash filed。</li>
<li>  hmset key filed1 value1 ...... filedN valueN 同时设置 hash 的多个 field。</li>
<li>  hincrby key field integer 将指定的 hash filed 加上指定值。成功返回 hash filed 变更后的值。</li>
<li>  hexists key field 检测指定 field 是否存在。</li>
<li>  hdel key field 删除指定的 hash field。</li>
<li>  hlen key 返回指定 hash 的 field 数量。</li>
<li>  hkeys key 返回 hash 的所有 field。</li>
<li>  hvals key 返回 hash 的所有 value。</li>
<li>  hgetall 返回 hash 的所有 filed 和 value</li>
<li>List 类型数据操作指令简介</li>
<li>  lpush key string 在 key 对应 list 的头部添加字符串元素，返回 1 表示成功，0 表示 key 存在且不是 list 类型。</li>
<li>  rpush key string 在 key 对应 list 的尾部添加字符串元素。</li>
<li>  llen key 返回 key 对应 list 的长度，如果 key 不存在返回 0，如果 key 对应类型不是 list返回错误。</li>
<li>  lrange key start end 返回指定区间内的元素，下标从 0 开始，负值表示从后面计算，-1 表示倒数第一个元素 ，key 不存在返回空列表。</li>
<li>  ltrim key start end 截取 list 指定区间内元素，成功返回 1，key 不存在返回错误。</li>
<li>  lset key index value 设置 list 中指定下标的元素值，成功返回 1，key 或者下标不存在返回错误。</li>
<li>  lrem key count value从 List 的头部 （count正数） 或尾部 （count负数） 删除一定数量 （count）匹配 value 的元素，返回删除的元素数量。count 为 0 时候删除全部。</li>
<li>  lpop key 从 list 的头部删除并返回删除元素。 如果 key 对应 list 不存在或者是空返回 nil，如果 key 对应值不是 list 返回错误。</li>
<li>  rpop key 从 list 的尾部删除并返回删除元素。</li>
<li>  blpop key1 ...... keyN timeout 从左到右扫描， 返回对第一个非空 list 进行 lpop 操作并返回，比如 blpop list1 list2 list3 0 ,如果 list 不存在 list2,list3 都是非空则对 list2 做lpop 并返回从 list2 中删除的元素。如果所有的 list 都是空或不存在，则会阻塞 timeout秒，timeout 为 0 表示一直阻塞。当阻塞时，如果有 client 对 key1...keyN 中的任意 key进行 push 操作，则第一在这个 key 上被阻塞的 client 会立即返回。如果超时发生，则返回nil。有点像 unix 的 select 或者 poll。</li>
<li>  brpop 同 blpop，一个是从头部删除一个是从尾部删除。</li>
<li>set 类型数据操作指令简介</li>
<li>  sadd key member 添加一个 string 元素到 key 对应 set 集合中，成功返回 1,如果元素以及在集合中则返回 0，key 对应的 set 不存在则返回错误。</li>
<li>  srem key member 从 key 对应 set 中移除指定元素，成功返回 1，如果 member 在集合中不存在或者 key 不存在返回 0，如果 key 对应的不是 set 类型的值返回错误。</li>
<li>  spop key 删除并返回 key 对应 set 中随机的一个元素,如果 set 是空或者 key 不存在返回nil。</li>
<li>  srandmember key 同 spop，随机取 set 中的一个元素，但是不删除元素。</li>
<li>  smove srckey dstkey member 从srckey对应set中移除member并添加到dstkey对应set中，整个操作是原子的。成功返回 1,如果 member 在 srckey 中不存在返回 0，如果 key 不是 set类型返回错误。</li>
<li>  scard key 返回 set 的元素个数，如果 set 是空或者 key 不存在返回 0。</li>
<li>  sismember key member 判断 member 是否在 set 中，存在返回 1，0 表示不存在或者 key 不存在。</li>
<li>  sinter key1 key2 …… keyN 返回所有给定 key 的交集。</li>
<li>  sinterstore dstkey key1 ....... keyN 返回所有给定 key 的交集，并保存交集存到 dstkey 下。</li>
<li>  sunion key1 key2 ...... keyN 返回所有给定 key 的并集。</li>
<li>  sunionstore dstkey key1 ...... keyN 返回所有给定 key 的并集，并保存并集到 dstkey 下。</li>
<li>  sdiff key1 key2 ...... keyN 返回所有给定 key 的差集。</li>
<li>  sdiffstore dstkey key1 ...... keyN 返回所有给定 key 的差集，并保存差集到 dstkey 下。</li>
<li>  smembers key 返回 key 对应 set 的所有元素，结果是无序的。</li>
<li>Sorted Set 类型数据操作指令简介</li>
<li>  add key score member 添加元素到集合，元素在集合中存在则更新对应 score。</li>
<li>  zrem key member 删除指定元素，1 表示成功，如果元素不存在返回 0。</li>
<li>  zincrby key incr member 增加对应 member 的 score 值， 然后移动元素并保持 skip list 保持有序。返回更新后的 score 值。</li>
<li>  zrank key member 返回指定元素在集合中的排名（下标） ，集合中元素是按 score 从小到大排序的。</li>
<li>  zrevrank key member 同上,但是集合中元素是按 score 从大到小排序。</li>
<li>  zrange key start end 类似 lrange 操作从集合中去指定区间的元素。返回的是有序结果</li>
<li>  zrevrange key start end 同上，返回结果是按 score 逆序的。</li>
<li>  zrangebyscore key min max 返回集合中 score 在给定区间的元素。</li>
<li>  zcount key min max 返回集合中 score 在给定区间的数量。</li>
<li>  zcard key 返回集合中元素个数。</li>
<li>  zscore key element 返回给定元素对应的 score。</li>
<li>  zremrangebyrank key min max 删除集合中排名在给定区间的元素。</li>
<li>  zremrangebyscore key min max 删除集合中 score 在给定区间的元素</li>
<li><h1>持久化</h1></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python hiredis模块]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/01/18/175036-python/"/>
    <updated>2012-01-18T17:50:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/01/18/175036-python</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/pietern/hiredis-py">官方手册</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis的七种武器及其适合的应用场景]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/01/15/155751-redis/"/>
    <updated>2012-01-15T15:57:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/01/15/155751-redis</id>
    <content type="html"><![CDATA[<ul>
<li><p>2012年01月11日 00:05 来源：nosqlfan 作者：NoSQLfan 编辑：王玉圆</p></li>
<li><p><strong>【IT168 技术】长生剑、孔雀翎、碧玉刀、多情环、离别钩、霸王枪、拳头是古龙笔下的七种武器，而本文打算将Redis的几种使用方式 Strings、Hashs、Lists、Sets、Sorted Sets、Pub/Sub、Transactions 也比作七种武器，为大家讲解Redis的七种特性，并列举其适合的应用场景。</strong></p></li>
<li><strong>武器一：Strings</strong></li>
<li>Strings 数据结构是简单的key-value类型，value其实不仅是String，也可以是数字。使用Strings类型，你可以完全实现目前 Memcached 的功能，并且效率更高。还可以享受Redis的定时持久化，操作日志及 Replication等功能。除了提供与 Memcached 一样的get、set、incr、decr 等操作外，Redis还提供了下面一些操作：</li>
<li>·获取字符串长度</li>
<li>·往字符串append内容</li>
<li>·设置和获取字符串的某一段内容</li>
<li>·设置及获取字符串的某一位(bit)</li>
<li><p>·批量设置一系列字符串的内容</p></li>
<li><p><strong>武器二：Hashs</strong></p></li>
<li><p>在Memcached中，我们经常将一些结构化的信息打包成hashmap，在客户端序列化后存储为一个字符串的值，比如用户的昵称、年龄、性别、积分等，这时候在需要修改其中某一项时，通常需要将所有值取出反序列化后，修改某一项的值，再序列化存储回去。这样不仅增大了开销，也不适用于一些可能并发操作的场合(比如两个并发的操作都需要修改积分)。而Redis的Hash结构可以使你像在数据库中Update一个属性一样只修改某一项属性值。</p></li>
<li><p><strong>武器三：Lists</strong></p></li>
<li><p>Lists 就是链表，相信略有数据结构知识的人都应该能理解其结构。使用Lists结构，我们可以轻松地实现最新消息排行等功能。Lists的另一个应用就是消息队列，可以利用Lists的PUSH操作，将任务存在Lists中，然后工作线程再用POP操作将任务取出进行执行。Redis还提供了操作Lists中某一段的api，你可以直接查询，删除Lists中某一段的元素。</p></li>
<li><p><strong>武器四：Sets</strong></p></li>
<li><p>Sets 就是一个集合，集合的概念就是一堆不重复值的组合。利用Redis提供的Sets数据结构，可以存储一些集合性的数据，比如在微博应用中，可以将一个用户所有的关注人存在一个集合中，将其所有粉丝存在一个集合。Redis还为集合提供了求交集、并集、差集等操作，可以非常方便的实现如共同关注、共同喜好、二度好友等功能，对上面的所有集合操作，你还可以使用不同的命令选择将结果返回给客户端还是存集到一个新的集合中。</p></li>
<li><p><strong>武器五：Sorted Sets</strong></p></li>
<li><p>和Sets相比，Sorted Sets增加了一个权重参数score，使得集合中的元素能够按score进行有序排列，比如一个存储全班同学成绩的Sorted Sets，其集合value可以是同学的学号，而score就可以是其考试得分，这样在数据插入集合的时候，就已经进行了天然的排序。另外还可以用Sorted Sets来做带权重的队列，比如普通消息的score为1，重要消息的score为2，然后工作线程可以选择按score的倒序来获取工作任务。让重要的任务优先执行。</p></li>
<li><p><strong>武器六：Pub/Sub</strong></p></li>
<li><p>Pub/Sub 从字面上理解就是发布(Publish)与订阅(Subscribe)，在Redis中，你可以设定对某一个key值进行消息发布及消息订阅，当一个key值上进行了消息发布后，所有订阅它的客户端都会收到相应的消息。这一功能最明显的用法就是用作实时消息系统，比如普通的即时聊天，群聊等功能。</p></li>
<li><p><strong>武器七：Transactions</strong></p></li>
<li>谁说NoSQL都不支持事务，虽然Redis的Transactions提供的并不是严格的ACID的事务(比如一串用EXEC提交执行的命令，在执行中服务器宕机，那么会有一部分命令执行了，剩下的没执行)，但是这个Transactions还是提供了基本的命令打包执行的功能(在服务器不出问题的情况下，可以保证一连串的命令是顺序在一起执行的，中间有会有其它客户端命令插进来执行)。Redis还提供了一个Watch功能，你可以对一个key进行Watch，然后再执行Transactions，在这过程中，如果这个Watched的值进行了修改，那么这个Transactions会发现并拒绝执行。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[redis cookbook]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/01/12/143202-redis/"/>
    <updated>2012-01-12T14:32:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/01/12/143202-redis</id>
    <content type="html"><![CDATA[<ul>
<li><a href="#1">1. An Introduction to Redis</a></li>
<li><a href="#2">2. Clients</a></li>
<li><a href="#3">3. Leveraging Redis</a></li>
<li><a href="#4">4. Redis Administration and Maintenance</a></li>
</ul>


<h1 id=2>CHAPTER 2 Clients</h1>


<p><strong>Using Redis from the Command Line</strong></p>

<pre><code>$ redis-cli -h
$ redis-cli -h serverip
$ redis-cli -p 6380
$ redis-cli INFO
$ cat command_list.txt | redis-cli &gt; command_output.txt
</code></pre>

<p><strong>Using Redis from Python with redis-py</strong></p>

<pre><code>$ pip install redis-py
$ easy_install redis

&gt;&gt;&gt; import redis
&gt;&gt;&gt; redis = redis.Redis(host='localhost', port=6379, db=0)
&gt;&gt;&gt; redis.smembers('circle:jdoe:soccer')
set(['users:toby', 'users:adam', 'users:apollo', 'users:mike'])
&gt;&gt;&gt; redis.sadd('circle:jdoe:soccer', 'users:fred')
True
&gt;&gt;&gt; redis.smembers('circle:jdoe:soccer')
set(['users:toby', 'users:adam', 'users:apollo', 'users:mike', 'users:fred'])  

$ pip install hiredis
$ easy_install hiredis
</code></pre>

<h1 id=3>CHAPTER 3 Leveraging Redis</h1>


<p><strong>Using Redis as a Key/Value Store</strong>
Storing application usage counters</p>

<pre><code># vists:pageid:totals
$ SET visits:1:totals 21389
$ SET visits:2:totals 1367894
$ INCR visits:635:totals    # visits:635:totals + 1
$ GET visits:635:totals
</code></pre>

<p>Storing object data in hashes</p>

<pre><code>redis&gt; hset users:jdoe name "John Doe"
(integer) 1
redis&gt; hset users:jdoe email "jdoe@test.com"
(integer) 1
redis&gt; hset users:jdoe phone "+1555313940"
(integer) 1
redis&gt; hincrby users:jdoe visits 1
(integer) 1

redis&gt; hget users:jdoe email
"jdoe@test.com"
redis&gt; hgetall users:jdoe
1) "name"
2) "John Doe"
3) "email"
4) "jdoe@test.com"
5) "phone"
6) "+1555313940"
7) "visits"
8) "1"


redis&gt; hkeys users:jdoe
1) "name"
2) "email"
3) "phone"
4) "visits"
redis&gt; hvals users:jdoe
1) "John Doe"
2) "jdoe@test.com"
3) "+1555313940"
4) "1"
</code></pre>

<p><strong>Storing user “Circles” using sets</strong></p>

<pre><code>redis&gt; sadd circle:jdoe:family users:anna
(integer) 1
redis&gt; sadd circle:jdoe:family users:richard
(integer) 1
redis&gt; sadd circle:jdoe:family users:mike
(integer) 1
redis&gt; sadd circle:jdoe:soccer users:mike
(integer) 1
redis&gt; sadd circle:jdoe:soccer users:adam
(integer) 1
redis&gt; sadd circle:jdoe:soccer users:toby
(integer) 1
redis&gt; sadd circle:jdoe:soccer users:apollo
(integer) 1

redis&gt; smembers circle:jdoe:family
1) "users:richard"
2) "users:mike"
3) "users:anna"
redis&gt; hgetall users:mike
(...)

redis&gt; sinter circle:jdoe:family circle:jdoe:soccer
1) "users:mike"
redis&gt; sunion circle:jdoe:family circle:jdoe:soccer
1) "users:anna"
2) "users:mike"
3) "users:apollo"
4) "users:adam"
5) "users:richard"
6) "users:toby"
</code></pre>

<p><strong>Quick Reference for Key Operations</strong></p>

<ul>
<li><strong>SET key value</strong></li>
<li>Sets the key to hold the given value. Existing data is overwritten (even if of a different data type).</li>
<li><strong>GET key</strong></li>
<li>Returns the content held by the key. Works only with string values.</li>
<li><strong>INCR key</strong></li>
<li>Increments the integer stored at key by 1.</li>
<li><strong>INCRBY key value</strong></li>
<li>Performs the same operation as INCR, but incrementing by value instead.</li>
<li><strong>DECR key</strong></li>
<li>Decrements the integer stored at key by 1.</li>
<li><strong>DECRBY key value</strong></li>
<li>Performs the same operation as DECR, but decrementing by value instead.</li>
<li><strong>Inspecting Your Data</strong></li>
<li>   redis> KEYS *</li>
<li>   redis> TYPE keyname</li>
</ul>


<p><strong>Quick Reference for Debugging</strong></p>

<ul>
<li><strong>KEYS pattern</strong></li>
<li>Lists all the keys in the current database that match the given pattern.</li>
<li><strong>TYPE key-name</strong></li>
<li>Tells the type of the key. Possible types are: string, list, hash, set, zset, and none.</li>
<li><strong>MONITOR</strong></li>
<li>Outputs the commands received by the Redis server in real time.</li>
<li><strong>Implementing OAuth on Top of Redis</strong></li>
<li>  redis> HMSET /consumers/key:dpf43f3p2l4k3l03 secret kd94hf93k423kf44 created_at 201103060000</li>
<li><pre><code>     redirect_url http://www.example.com/oauth_redirect name test_application
</code></pre></li>
</ul>


<p><strong>Quick Reference for Adding Values to Sets</strong></p>

<ul>
<li><strong>HSET hash-name key value</strong></li>
<li>Sets a value on a hash with the given key. As with other Redis commands, if the hash doesn’t exist, it’s created.</li>
<li><strong>HMSET hash-name key1 value1 [key2 value2 ...]</strong></li>
<li>Allows you to set several values in a hash with a single command.

<pre><code>redis&gt; HGETALL /consumers/key:dpf43f3p2l4k3l03
redis&gt; SADD /nonces/key:dpf43f3p2l4k3l03/timestamp:20110306182600 dji430splmx33448
redis&gt; EXPIRE /nonces/key:dpf43f3p2l4k3l03/timestamp:20110306182600 1800
redis&gt; HSET /request_tokens/key:dpf43f3p2l4k3l03 hh5s93j4hdidpola hdhd0244k9j7ao03
</code></pre></li>
</ul>


<p><strong>Quick Reference for Authorization Algorithm</strong></p>

<ul>
<li><strong>HGETALL hash-name</strong></li>
<li>Returns all the key/value pairs in the given hash.</li>
<li><strong>SADD set-name element</strong></li>
<li>Adds the element to the given set unless it’s already a member. The return value is 1 if the element is added and 0 if it was already a member.</li>
<li><strong>EXPIRE key seconds</strong></li>
<li>Sets an expiration timeout on a key, after which it will be deleted. This can be used on any type of key (strings, hashes, lists, sets or sorted sets) and is one of the most powerful Redis features.</li>
<li><strong>EXPIREAT key timestamp</strong></li>
<li>Performs the same operation as EXPIRE, except you can specify a UNIX timestamp (seconds since midnight, January 1, 1970) instead of the number of elapsed seconds.</li>
<li><strong>TTL key</strong></li>
<li>Tells you the remaining time to live of a key with an expiration timeout.</li>
<li><strong>PERSIST key</strong></li>
<li>Removes the expiration timeout on the given key.</li>
<li>Redirections and consent

<pre><code>redis&gt; SET /authorizations/request_token:hh5s93j4hdidpola 16
redis&gt; HGET /consumers/key:dpf43f3p2l4k3l03 redirect_url
redis&gt; HGETALL /consumers/key:dpf43f3p2l4k3l03
redis&gt; HGET /request_tokens/key:dpf43f3p2l4k3l03 hh5s93j4hdidpola
redis&gt; GET /authorizations/request_token:hh5s93j4hdidpola
redis&gt; SADD /nonces/key:dpf43f3p2l4k3l03/timestamp:20110306182700 kllo9940pd9333jh
redis&gt; EXPIRE /nonces/key:dpf43f3p2l4k3l03/timestamp:20110306182600 1800
redis&gt; HMSET /access_tokens/consumer_key:dpf43f3p2l4k3l03/access_token:nnch734d00sl2jdk
       secret pfkkdhi9sl3r4s00 user_id 16 created_at 20110306182600
redis&gt; HDEL /request_tokens/key:dpf43f3p2l4k3l03 hh5s93j4hdidpola
redis&gt; DEL /authorizations/request_token:hh5s93j4hdidpola
redis&gt; HSET /users/user_id:16/applications dpf43f3p2l4k3l03 nnch734d00sl2jdk
redis&gt; HDEL /users/user_id:16/applications dpf43f3p2l4k3l03
redis&gt; DEL /access_tokens/consumer_key:dpf43f3p2l4k3l03/access_token:nnch734d00sl2jdk
redis&gt; EXPIRE /access_tokens/consumer_key:dpf43f3p2l4k3l03/access_token:nnch734d00sl2jdk 86400
</code></pre></li>
</ul>


<p><strong>Quick Reference for Hash Operations</strong></p>

<ul>
<li><strong>HGET hash-name key</strong></li>
<li>Returns the value at key in the given hash.</li>
<li><strong>HDEL hash-name key</strong></li>
<li>Deletes a key/value pair in the given hash.</li>
</ul>


<h1 id=4>CHAPTER 4 Redis Administration and Maintenance</h1>


<p><strong>Starting a Redis Slave</strong></p>

<pre><code>redis&gt; slaveof master-ip-or-hostname masterport
redis&gt; masterauth master-password
redis&gt; SLAVEOF master-ip-or-hostname [masterport]
redis&gt; CONFIG SET masterauth password
</code></pre>

<p><strong>Handling a Dataset Larger Than Memory</strong></p>

<pre><code>vm-enabled yes
vm-swap-file
vm-max-memory
vm-pages
vm-page-size
vm-max-threads
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[redis.conf 配置参数]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/01/11/100854-redis/"/>
    <updated>2012-01-11T10:08:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/01/11/100854-redis</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
