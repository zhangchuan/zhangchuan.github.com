<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | 研究中心]]></title>
  <link href="http://zhangchuan.github.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://zhangchuan.github.com/"/>
  <updated>2012-03-06T16:24:53+08:00</updated>
  <id>http://zhangchuan.github.com/</id>
  <author>
    <name><![CDATA[Cloud.Zhang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python 参考手册 第4章]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/03/06/150903-python/"/>
    <updated>2012-03-06T15:09:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/03/06/150903-python</id>
    <content type="html"><![CDATA[<h1>第4章 运算符和表达式</h1>

<ul>
<li><a href="#3.1">3.1 术语</a></li>
<li><a href="#3.2">3.2 对象的身份与类型</a></li>
<li><a href="#3.3">3.3 引用计数与垃圾收集</a></li>
<li><a href="#3.4">3.4 引用与复制</a></li>
<li><a href="#3.5">3.5 第一类对象</a></li>
<li><a href="#3.6">3.6 表示数据的内置类型</a></li>
<li><a href="#3.7">3.7 表示程序结构的内置类型</a></li>
<li><a href="#3.8">3.8 解释器内部使用的内置类型</a></li>
<li><a href="#3.9">3.9 对象行为与特殊方法</a></li>
</ul>


<h1 id=4.1>4.1 数字操作</h1>


<ul>
<li>+(加), -(减),*(乘), /(除), //(地板除), **(乘方), %(去模), -(一元减法), +(一元加法)</li>
<li>&lt;&lt;(左移), >>(右移), &amp;(位与), |(位或), ^(异或), ~(一元位反)</li>
<li>&lt;(小于), >(大于), ==(等于), !=(不等于), >=(大于等于), &lt;=(小于等于)</li>
<li>不同数字类型的转换规则: 复数->浮点->整数</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RabbitMQ 消息队列应用]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/03/02/091722-rabbitmq/"/>
    <updated>2012-03-02T09:17:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/03/02/091722-rabbitmq</id>
    <content type="html"><![CDATA[<ul>
<li><h1>兔子和兔子窝</h1></li>
<li><p>AMQP概念</p></li>
<li>虚拟主机(virtual host), 交换机(exchange), 队列(queue), 绑定(binding)</li>
<li>一个虚拟主机持有一组交换机, 队列和绑定, 多个虚拟主机用于访问控制</li>
<li>队列是装消息的容器, 直到客户端将其消息取走, 否则消息一直在队列中, 必须通过程序去建立, 然后等待放入消息</li>
<li>交换机可以理解成具有路由表都路由程序, 每个消息有一个路由键的属性, 交换机中有一系列绑定, 即路由规则</li>
<li>一个绑定就是一个基于路由键将交换机和队列连接起来的路由规则, 交换机是由绑定构成都路由表</li>
<li>Fanout Exchange 不处理路由键</li>
<li>Direct Exchange 完整匹配路由键</li>
<li>Topic Exchange  将路由键盘和某模式进行匹配, #匹配一个或多个词, *匹配不多不少一个词</li>
<li>消息都持久化</li>
<li>1 将交换机设置成durable</li>
<li>2 将队列设置成durable</li>
<li><p>3 将消息的Delivery Mode设置成2</p></li>
<li><p>兔子和蛇</p>

<pre><code># easy_install amqplib
from amqplib import client_0_8 as amqp
conn = amqp.Connection(host="localhost:5672", userid="guest", 
password="guest", virtual_host="/", insist=False)
# 可以使用.channel(x)来指定channel标识, 不过不建议
chan = conn.channel()

# 消费者consumer
# 创建一个po_box队列, exclusive私有队列
chan.queue_declare(queue="po_box", durable=True, exclusive=False, 
auto_delete=False)
# 创建一个sorting_room交换机, type交换机的类型
chan.exchange_declare(exchange="sorting_room", type="direct", 
durable=True, auto_delete=False,)
# 创建绑定, 让具有路由键"jason"的消息被路由到名为"po_box"的交换机
chan.queue_bind(queue="po_box", exchange="sorting_room", 
routing_key="jason")
# 应用程序在消息到达的时候立刻得到通知, 需要用chan.basic_consume()注册
# 一个新消息到达的回调
def recv_callback(msg):
    print 'Received: ' + msg.body + ' from channel #' + \
    str(msg.channel.channel_id)
chan.basic_consume(queue='po_box', no_ack=True, callback=recv_callback, 
consumer_tag="testtag")
while True:
    chan.wait()
chan.basic_cancel("testtag")
chan.close()
conn.close()
</code></pre></li>
<li><p><a href="http://simple-is-better.com/news/353">参考资料: 兔子和兔子窝</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[monogodb 大杂烩]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/02/22/141006-mongodb/"/>
    <updated>2012-02-22T14:10:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/02/22/141006-mongodb</id>
    <content type="html"><![CDATA[<h1>一, 安装</h1>

<p><a href="http://www.mongodb.org/downloads">下载连接</a></p>

<pre><code># mkdir -p /usr/local/mongo/{etc,bin,log}
# mkdir -p /data

# /usr/local/mongo/etc/mongodb.conf
# 数据文件存放路径
dbpath=/var/lib/mongodb

# 错误日志文件
logpath=/var/log/mongodb/mongodb.log

# 错误日志文件采用追加模式,默认是覆盖模式
logappend=true

# 对外服务绑定IP. 根据业务需要, 尽量不要放公网.
#bind_ip

# 对外服务绑定端口,Web管理端口在这个port的基础上+1000 
port = 27017
# 开启简单的rest API, 提供Web管理界面操作支持
rest = true

# 定期显示CPU的CPU利用率和iowait
#cpu = true

# 关闭验证(默认)
#noauth = true
# 启用验证
#auth = true

# 详细输出
#verbose = true
# 安静输出
#quiet = true

# 在收到客户数据,检查数据的有效性
#objcheck = true

# 限制每个数据库的文件数，设置默认为8
#quota = true
# Set oplogging level where n is
#   0=off (default)
#   1=W
#   2=R
#   3=both
#   7=W+some reads
# 规定每个数据库允许的文件数
#quotaFiles

# diaglog选项 0=off 1=W 2=R 3=both 7=W+some reads
# 提供的方式，是只读，只写，还是读写都行，还是主要写+部分的读模式
#diaglog = 0

# 调试诊断选项
#nocursors = true
# 忽略查询命中率
#nohints = true
# 关闭http接口访问
#nohttpinterface = true
# 禁用脚本引擎
#noscripting = true
# 不允许表扫描
#notablescan = true
# 禁用数据文件预分配(往往影响性能)
#noprealloc = true
# 设置信数据库.ns文件大小(MB) =16
#nssize = &lt;size&gt;

#修复所有数据库
#repair
#修复库生成的文件的目录,默认为目录名称dbpath
#repairpath
#数据写入磁盘的时间秒数(0=never,不推荐),默认60
#syncdelay

# Accout token for Mongo monitoring server.
#mms-token = &lt;token&gt;
# Server name for Mongo monitoring server.
#mms-name = &lt;server-name&gt;
# Ping interval for Mongo monitoring server.
#mms-interval = &lt;seconds&gt;

# 从一个dbpath里启用从库复制服务，该dbpath的数据库是主库的快照，可用于快速启用同步
#fastsync
# 如果从库与主库同步数据差得多，自动重新同步
#autoresync
# pair???
#pairwith
# 仲裁服务器，在主从和pair中用到
#arbiter
# 设置操作日志的大小(MB)
#oplogSize
# 设置存储操作日志的内存大小
#opIdMem

# 从库模式
#slave = true
# 当为从时，指定主的地址和端口
#source = master.example.com
# 设置从库同步主库的延迟时间
#slavedelay
# 指定单一的数据库复制
#only = master.example.com
# 主库模式
#master = true
#source = slave.example.com
# 设置副本集名称
# replSet = setname

# 声明这是一个集群的config服务,默认端口27019，默认目录/data/configdb
#configsvr
# 声明这是一个集群的分片,默认端口27018
#shardsvr
# 关闭偏执为moveChunk数据保存
#noMoveParanoia

# tree /usr/local/mongo/bin
|-- bsondump
|-- mongo
|-- mongod
|-- mongodump
|-- mongoexport
|-- mongofiles
|-- mongoimport
|-- mongorestore
|-- mongos
|-- mongosniff
|-- mongostat
|-- mongotopmongosniff

# mongostat --help
Fields
inserts      - # of inserts per second
query        - # of queries per second
update       - # of updates per second
delete       - # of deletes per second
getmore      - # of get mores (cursor batch) per second
command      - # of commands per second
flushes      - # of fsync flushes per second
mapped       - amount of data mmaped (total data size) megabytes
visze        - virtual size of process in megabytes
res          - resident size of process in megabytes
faults       - # of pages faults per sec (linux only)
locked       - percent of time in global write lock
idx miss     - percent of btree page misses (sampled)
qr|qw        - queue lengths for clients waiting (read|write)
ar|aw        - active clients (read|write)
netIn        - network traffic in - bits
netOut       - network traffic out - bits
conn         - number of open connections

# Python API
#easy_install pymongo
# -- python code --
from pymongo import Connection

# Making a Connection
#connection = Connection() #default host and port
connection = Connection('localhost', 27017)

# Getting a Database
#db = connection.test_database
db = connection['test-database']

# Getting a Collection
#collection = db.test_collection
collection = db['test-collection']

# Documents
import datetime

post = {"author": "Mike",
"text": "My first blog post!",
"tags": ["mongodb", "python", "pymongo"],
"date": datetime.datetime.utcnow()}

# Inserting a Document
posts = db.posts
posts.insert(post)
db.collection_names()

# Getting a Single Document With find_one()
print posts.find_one()
print posts.find_one({"author": "Mike"})
print posts.find_one({"author": "Eliot"})

# Bulk Inserts
new_posts = [{"author": "Mike",
    "text": "Another post!",
    "tags": ["bulk", "insert"],
    "date": datetime.datetime(2009, 11, 12, 11, 14)},
    {"author": "Eliot",
    "title": "MongoDB is fun",
    "text": "and pretty easy too!",
    "date": datetime.datetime(2009, 11, 10, 10, 45)}]
posts.insert(new_posts)

# Querying for More Than One Document
for post in posts.find():
    print post

for post in posts.find({"author": "Mike"}):
    print post

# Counting
posts.count()
posts.find({"author": "Mike"}).count()

# Range Queries
d = datetime.datetime(2009, 11, 12, 12)
for post in posts.find({"date": {"$lt": d}}).sort("author"):
    print post

# Indexing
posts.find({"date": {"$lt": d}}).sort("author").explain()["cursor"]
posts.find({"date": {"$lt": d}}).sort("author").explain()["nscanned"]

from pymongo import ASCENDING, DESCENDING
posts.create_index([("date", DESCENDING), ("author", ASCENDING)])
posts.find({"date": {"$lt": d}}).sort("author").explain()["cursor"]
posts.find({"date": {"$lt": d}}).sort("author").explain()["nscanned"]
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[scribe安装]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/02/15/143830-scribe/"/>
    <updated>2012-02-15T14:38:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/02/15/143830-scribe</id>
    <content type="html"><![CDATA[<ul>
<li>ubuntu安装依赖libboost-all-dev, python-dev</li>
<li>centos安装依赖boost-devel, python-devel</li>
<li><p>boost库文件必须高于1.36版本, centos通常自带的boost版本较低,需编译安装.</p></li>
<li><p>编译thrift,不提供php与ruby支持.</p>

<pre><code>./configure --without-php_extension --without-php --without-ruby
make &amp;&amp; make install
cd lib/py
python setup.py install
cd ../../contrib/fb303/
./bootstrap.sh
make &amp;&amp; make install
cd py
python setup.py install

# 编译scribe
./bootstrap.sh 
make &amp;&amp; make install
mkdir /etc/scribe
cp -av examples/* /etc/scribe/
cd lib/py
python setup.py install
</code></pre></li>
</ul>


<h1>参考资料:</h1>

<p>http://agiletesting.blogspot.com/2009/10/compiling-installing-and-test-running.html
http://silas.sewell.org/blog/2009/05/12/pipe-apache-or-any-logs-to-scribe/</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Tips]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/02/10/163323-python/"/>
    <updated>2012-02-10T16:33:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/02/10/163323-python</id>
    <content type="html"><![CDATA[<h1>读取管道内容</h1>

<h1>print sys.stdin.read()</h1>
]]></content>
  </entry>
  
</feed>
