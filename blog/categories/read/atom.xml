<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Read | 研究中心]]></title>
  <link href="http://zhangchuan.github.com/blog/categories/read/atom.xml" rel="self"/>
  <link href="http://zhangchuan.github.com/"/>
  <updated>2012-03-06T16:44:48+08:00</updated>
  <id>http://zhangchuan.github.com/</id>
  <author>
    <name><![CDATA[Cloud.Zhang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python 参考手册 第4章]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/03/06/150903-python/"/>
    <updated>2012-03-06T15:09:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/03/06/150903-python</id>
    <content type="html"><![CDATA[<h1>第4章 运算符和表达式</h1>

<ul>
<li><a href="#3.1">3.1 术语</a></li>
<li><a href="#3.2">3.2 对象的身份与类型</a></li>
<li><a href="#3.3">3.3 引用计数与垃圾收集</a></li>
<li><a href="#3.4">3.4 引用与复制</a></li>
<li><a href="#3.5">3.5 第一类对象</a></li>
<li><a href="#3.6">3.6 表示数据的内置类型</a></li>
<li><a href="#3.7">3.7 表示程序结构的内置类型</a></li>
<li><a href="#3.8">3.8 解释器内部使用的内置类型</a></li>
<li><a href="#3.9">3.9 对象行为与特殊方法</a></li>
</ul>


<h1 id=4.1>4.1 数字操作</h1>


<ul>
<li>+(加), -(减),*(乘), /(除), //(地板除), **(乘方), %(去模), -(一元减法), +(一元加法)</li>
<li>&lt;&lt;(左移), >>(右移), &amp;(位与), |(位或), ^(异或), ~(一元位反)</li>
<li>&lt;(小于), >(大于), ==(等于), !=(不等于), >=(大于等于), &lt;=(小于等于)</li>
<li>不同数字类型的转换规则: 复数->浮点->整数</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB权威指南 7]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/03/01/154153-mongodb/"/>
    <updated>2012-03-01T15:41:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/03/01/154153-mongodb</id>
    <content type="html"><![CDATA[<ul>
<li>7.1 数据库命令</li>
<li>7.1.1 命令行的工作原理

<pre><code>&gt; db.test.drop()
&gt; db.runCommand({"drop": "test"});
# 如果"ok"的值是true, 代表命令成功运行, 如果为false, 代表命令执行出了问题.
</code></pre></li>
<li>7.1.2 命令参考

<pre><code># 获得所有命令的最新列表
&gt; db.listCommands()
http://localhost:28017/_commands
# 返回MongoDB服务器的版本号和主机的操作系统
. buildInfo
&gt; {"buildInfo": 1}
# 返回指定集合的统计信息, 包括数据大小, 已分配的存储空间和索引大小
. collStats
&gt; {"collStats": collection}
# 列出指定集合中满足查询条件的文档的指定键的所有不同值
. distinct
&gt; {"distinct": collection, "key": key, "query": query}
# 删除集合的所有数据
. drop
&gt; {"drop": collection}
# 删除当前数据库的所有数据
. dropDatabase
&gt; {"dropDatabase": 1}
# 删除集合里面名称为name的索引, 如果名称为"*", 则删除全部索引
. dropIndexes
&gt; {"dropIndexes": collection, "index": name}
# findAndModify参考第3章
. findAndModify
# 查看对本集合执行最后一次操作的错误信息. 在w台服务器复制集合的最后操作前, 这个命令会阻塞
. getlastError
{"getLastError": 1[, "w": w[, "wtimeout": timeout]]}
# 检查服务器是主还是从服务器
. isMaster
{"isMaster": 1}
# 返回所有可以在服务器上运行的命令和相关信息
. ListCommands
{"listCommands": 1}
# 列出服务器上所有数据库
. listDatabases
{"listDatabases": 1}
# 检查服务器连接是否正常
. ping
{"ping": 1}
# 将集合a重命名为b, a,b必须是完整的名称空间命名
. renameCollection
{"renameCollection": a, "to": b}
# 修复并压缩当前数据库, 这个操作非常耗时
. repairDatabase
{"repairDatabase": 1}
# 返回这台服务器的管理统计信息
. serverStatus
{"serverStatus": 1}
</code></pre></li>
<li>7.2 固定集合

<pre><code>固定集合像环形队列, 空间需要预先分配, 如果空间不足, 最早的文档就会自动删除.
默认情况下固定集合没有索引
</code></pre></li>
<li>7.2.1 属性及用法

<pre><code>在做插入操作时, 无需额外分配空间. 所以固定集合进行插入速度极快.
按照插入顺序输出的查询速度极快, 因为文档本身是按顺序存储的
适合日志应用场景
</code></pre></li>
<li>7.2.2 创建固定集合

<pre><code># 创建一个固定集合my_collection, 大小是100000字节
&gt; db.createCollection("my_collection", {capped: true, size: 100000});
# 指定文档数量的上限
&gt; db.createCollection("my_collection", {capped: true, size: 100000, max: 100});
# 转换已经普通集合为固定集合
&gt; db.runCommand({convertToCapped: "test", size: 10000});
</code></pre></li>
<li>7.2.3 自然排序

<pre><code>自然排序就是文档在磁盘上的顺序
# 可以使用自然排序按照反向插入的顺序排序
&gt; db.my_collection.find().sort({"$natural": -1})
</code></pre></li>
<li>7.2.4 尾部游标</li>
<li>7.3 GridFS: 存储文件

<pre><code>简化需求
直接利用已建立的复制或分片机制
不产生磁盘碎片, MongoDB以2GB分配文件空间
</code></pre></li>
<li>7.3.1 开始使用GridFS: mongofiles

<pre><code># 上传文件
$ mongofiles put foo.txt
# 查看文件
$ mongofiles list
# 下载文件
$ mongofiles get foo.txt
# 查找文件
$ mongofiles search foo.txt
# 删除文件
$ mongofiles delete foo.txt
</code></pre></li>
<li>7.3.2 通过MongoDB驱动程序操作GirdFS

<pre><code>from pymongo import Connection
import gridfs
db = Connection().test
fs = gridfs.GridFS(db)
file_id = fs.put("Hello, World", filename = "foo.txt")
fs.list()
fs.get(file_id).read()
</code></pre></li>
<li>7.3.3 内部原理

<pre><code>GridFS将大文件分成很多块, 每块作为一个单独的文档存储.
# fs.files
. _id
文件的唯一id, 在块中作为"files_id"键的值存储
. length
文件内容总的字节数
. chunkSize
每块的大小, 以字节为单位. 默认是256K, 必要时可以调整
. uploadDate
文件存入GridFS的时间戳
. md5
文件内容的md5校验和, 由服务器端生成
# distint获取GridFS中不重复的文件名列表
&gt; db.fs.files.distinct("filename")
</code></pre></li>
<li>7.4 服务器端脚本</li>
<li>7.4.1 db.eval

<pre><code>利用db.eval可以在MongoDB服务器端执行任意的JavaScript脚本
db.eval可以用来模拟多事物: db.eval锁住数据库, 然后执行JavaScript, 再解锁
&gt; db.eval("function(u) { print('Hello, '+u+'!'); }", [username]) 
&gt; db.eval("function(x,y,z) { return x+y+z;}", [num1,num2,num3])
</code></pre></li>
<li>7.4.2 存储JavaScript

<pre><code>&gt; db.system.js.insert({"_id": "x", "value": 1}) 
&gt; db.system.js.insert({"_id": "x", "value": 2}) 
&gt; db.system.js.insert({"_id": "x", "value": 3}) 
# 对其求和
&gt; db.eval("return x+y+z;")
</code></pre></li>
<li>7.5 数据库引用</li>
<li>7.5.1 什么是DBRef

<pre><code># DBRef就像URL, 唯一确定一个到文档的应用
# "$ref", "$id"为必选, "$db"为可选
{"$ref": collection, "$id": id_value} 
{"$ref": collection, "$id": id_value, "$db": database}
</code></pre></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongDB权威指南 6]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/03/01/142455-mongodb/"/>
    <updated>2012-03-01T14:24:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/03/01/142455-mongodb</id>
    <content type="html"><![CDATA[<ul>
<li>6.1 count

<pre><code># count是最简单的聚合工具, 返回集合中的文档数量
&gt; db.foo.count()
&gt; db.foo.insert({"x": 1})
&gt; db.foo.count()
&gt; db.foo.count({"x": 1})
</code></pre></li>
<li>6.2 distinct

<pre><code># distinct是用来找出给定键的所有不同值, 使用时必须指定集合和键
&gt; db.runCommand({"distinct": "people", "key": "age"})
</code></pre></li>
<li>6.3 group

<pre><code># group 先根据选定的键, 将集合依据选定键值的不同分成若干组, 然后通过聚合每一组的文档, 产生一个结果文档
{"day": "2010/10/03", "time": "10/3/2010 03:57:01 GMT-400", "price": 4.23}
{"day": "2010/10/04", "time": "10/4/2010 11:28:39 GMT-400", "price": 4.27}
{"day": "2010/10/03", "time": "10/3/2010 05:00:23 GMT-400", "price": 4.10}
{"day": "2010/10/06", "time": "10/6/2010 05:57:58 GMT-400", "price": 4.30}
{"day": "2010/10/04", "time": "10/3/2010 08:34:50 GMT-400", "price": 4.01}
# 获得近30天的收盘价
{"day": "2010/10/03", "time": "10/3/2010 05:00:23 GMT-400", "price": 4.10}
{"day": "2010/10/04", "time": "10/4/2010 11:28:39 GMT-400", "price": 4.27}
{"day": "2010/10/06", "time": "10/6/2010 05:57:58 GMT-400", "price": 4.30}
&gt; db.runCommand({"group": {
"ns": "stocks",
"key": "day",
"initial": {"time": 0},
"$reduce": function(doc, prev) {
    if (doc.time &gt; prev.time) {
        prev.price = doc.price;
        prev.time = doc.time;
    }},
"condition": {"day": {"$gt": "2010/09/30"}}
}})
# "ns": "stocks"
# 指定要进行分组的集合
# "key": "day"
# 指定文档分组依据的键. 所有"day"值相同的文档被划分到一组
# "initial": {"time": 0}
# 每一组reduce函数调用的初始时间
# "$reduce": function(doc, prev) { ... }
# 每个文档对应一次这个调用, 系统会传递两个参数: 当前文档和累加其文档. 
# "condition": {"day": {"$gt": "2010/09/30"}}
</code></pre></li>
<li>6.3.1 使用完成器

<pre><code># 博客系统, 每篇文章有多个标签, 现在要找出每天最热点的标签, 可以再一次按天分组, 为每一个标签计数
&gt; db.posts.group({
"key": {"tags": true},
"initial": {"tags": {}},
"$reduce": function(doc, prev) {
    for (i in doc.tags) {
        if (doc.tags[i] in prev.tags) {
            prev.tags[doc.tags[i]]++;
        } else {
            prev.tags[doc.tags[i]] = 1;
        }
    }
}})
# "finalize"附带一个函数, 在每组结果传递到客户端之前被调用一次. 可处理结果的残枝败叶
&gt; db.posts.group({
"key": {"tags": true},
"initial": {"tags": {}},
"$reduce": function(doc, prev) {
    for (i in doc.tags) {
        if (doc.tags[i] in prev.tags) {
            prev.tags[doc.tags[i]]++;
        } else {
            prev.tags[doc.tags[i]] = 1;
        }
    },
"finalize": function(prev) {
    var mostPopular = 0;
    for (i in prev.tags) {
        if (prev.tags[i] &gt; mostPopular) {
            prev.tag = i;
            mostPopular = prev.tags[i];
        }
    }
    delete.prev.tags
}})
</code></pre></li>
<li>6.3.2 将函数做为键使用

<pre><code>&gt; db.posts.group({"ns": "posts",
"$keyf": function(x) { return x.category.toLowerCase(); },
"initializer": ... })
</code></pre></li>
<li>6.4 MapReduce</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB权威指南 5]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/03/01/104304-mongodb/"/>
    <updated>2012-03-01T10:43:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/03/01/104304-mongodb</id>
    <content type="html"><![CDATA[<ul>
<li>5.1 索引简介

<pre><code>&gt; db.people.find({"username": "mark"})
# 对"username"建立索引
&gt; db.people.ensureIndex({"username": 1})
# 同样的索引只需创建一次, 已创建的索引会加速该键的查询, 对其他查询并没有帮助, 如下
# 同时尽量避免让服务器做表扫描, 在集合很大时会很慢
&gt; db.people.find({"data": data1}).sort({"data": 1, "username": 1})
# 针对上例创建的索引, 在多键索引时应考虑索引创建的方向(升序1,降序-1)
&gt; db.ensureIndex({"data": 1, "username": 1})
# 多键索引可以利用前部索引
&gt; {"a":1, "b":1, "c":1, ..., "z":1}
#实际上会有{"a":1},{"a":1, "b":1},{"a":1, "b":1, "c":1}等的索引
# MongoDB的查询优化器会重排查询项的顺序, 但缺点是每次插入,更新和删除时会产生额外开销
# 要是查询要返回集合一半以上的结果, 用表扫描要比索引更高校.
</code></pre></li>
<li>5.1.1 扩展索引

<pre><code>&gt; db.status.ensureIndex({user: 1, data: -1})
# 如果内存放不下所有索引, 会非常慢, 改变索引顺序, 将最后几天的索引保存在内存, 减少内存交换, 这样查询任何用户的状态都会快很多
&gt; db.status.ensureIndex({data: -1, user: 1})
# 创建索引应考虑
1) 会做什么样的查询? 其中哪些键需要索引?
2) 每个键的索引方向是怎样的?
3) 如何应对扩展? 有没有种不同的键的排列可以使常用数据更多地保留在内存中?
</code></pre></li>
<li>5.1.2 索引内嵌文档中的键

<pre><code># 对内嵌文档的额索引与普通键索引并无差异, 两者也可以联合组成复合索引
&gt; db.blog.ensureIndex({"comments.date": 1})
</code></pre></li>
<li>5.1.3 为排序创建索引

<pre><code># 需要针对查询中大量的排序做索引, 如果没有索引的键调用sort, MongoDB需要将所有的数据提取到内存来排序.
</code></pre></li>
<li>5.1.4 索引名称

<pre><code># 集合中的每个索引都有一个字符串类型的名字, 来唯一标识索引. 可以通过ensureIndex选项制定自定义的名字
&gt; db.foo.ensureIndex({"a":1, "b":1, "c":1, ..., "z":1}, {"name":"alphabet"})
</code></pre></li>
<li>5.2 唯一索引

<pre><code># 唯一索引可以确保集合的每一个文档的指定键都有唯一值
&gt; db.people.ensureIndex({"username": 1}, {"unique": true})
</code></pre></li>
<li>5.2.1 消除重复

<pre><code># 创建索引时, 将所有所有包含重复值的文档都删掉
&gt; db.people.ensureIndex({"username": 1}, {"unique": true, "dropDups": true})
</code></pre></li>
<li>5.2.2 复合唯一索引

<pre><code># 单个键可以相同, 所有键盘组合起来不同
&gt; {files_id: ObjectID("4b23c3ca7525f35f94b60a2d"), n: 1}
&gt; {files_id: ObjectID("4b23c3ca7525f35f94b60a2d"), n: 2}
&gt; {files_id: ObjectID("4b23c3ca7525f35f94b60a2d"), n: 3}
&gt; {files_id: ObjectID("4b23c3ca7525f35f94b60a2d"), n: 4}
</code></pre></li>
<li>5.3 使用explain和hint

<pre><code>&gt; db.foo.find().explain()
# "cursor": 索引使用情况, "BasicCursor"未使用索引
# "nscanned": 数据库查找了多少个文档
# "n": 返回文档的数量
# "millis": 0 这个毫秒表示数据库执行查询的时间
</code></pre></li>
<li>5.4 索引管理

<pre><code># 索引的元信息保存在每个数据库的system.indexes集合中, 只能进行ensureIndex或dropIndexes操作
# system.namespaces包含集合的索引名字
# 集合名和索引名加起来不能超过127字节
# 修改索引
# background在后台建立索引
&gt; db.people.ensureIndex({"username": 1}, {"background": true})
# 删除索引
# 通过system.indexes集合找出索引名,在通过dropIndexes
# db.runCommand({"dropIndexes": "foo", "index": "*"})
</code></pre></li>
<li>5.5 地理空间索引

<pre><code># 创建地址空间索引
&gt; db.map.ensureIndex({"gps": "2d"})
# "gps"键的值必须是某种形式的一对值, 一个包含两个元素的数组, 或者连个键的内嵌文档
{"gps": [0,100]}
{"gps": {"x": -30, "y": 30]}
{"gps": {"Latitude": -180, "longitude": 180}}
# 默认地理空间值的范围为-180~180, 也可以重新指定
&gt; db.star.trek.ensureIndex({"light-years": "2d"}, {"min": -1000, "max": 1000})
# 地址空间查询有两种方式
&gt; db.map.find({"gps": {"$near": [40, -73]}})
&gt; db.map.find({"gps": {"$near": [40, -73]}}).limit(10)
&gt; db.runCommand({geoNear: "map", near: [40, -73], num: 10})
# 查找指定形状内的文档
# "$box" 第一个数组, 指定左下角下标, 第二个数组, 指定右下角下标
&gt; db.map.find({"gps": {"$within": {"$box": [[10, 20], [15, 30]]}}})
# "$center" 查找圆内部所有点, 参数表示圆心和半径
&gt; db.map.find({"gps": {"$within": {"$center": [[12, 25], 5]}}})
</code></pre></li>
<li>5.5.1 复合地理空间索引

<pre><code># 创建爱呢"location"和"desc"的复合地理空间索引
&gt; db.ensureIndex({"location": "2d", "desc": 1})
# 查找咖啡馆
&gt; db.map.find({"location": {"$near": [-70, 30]}, "desc": "coffeeshop"}).limit(1)
</code></pre></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB权威指南 4]]></title>
    <link href="http://zhangchuan.github.com/blog/2012/02/28/084414-python/"/>
    <updated>2012-02-28T08:44:00+08:00</updated>
    <id>http://zhangchuan.github.com/blog/2012/02/28/084414-python</id>
    <content type="html"><![CDATA[<ul>
<li>4.1 find简介</li>
<li>返回一个集合中文档的子集, 空的查询文档{}会匹配集合的全部内容

<pre><code>mongo&gt; db.c.find()
# 限定查找条件
db.users.find({"age": 27})
db.users.find({"username": "joe"})
db.users.find({"username": "joe", "age": 27})
</code></pre></li>
<li>4.1.1 指定返回的键

<pre><code>db.users.find({}, {"username": 1, "email": 1})
# 不希望结果中含有"fata1_weakness"键:
db.users.find({}, {"fata1_weakness": 0})
# 防止返回"_id":
db.users.find({}, {"username": 1, "_id": 0})
</code></pre></li>
<li>4.1.2 限制</li>
<li>4.2 查询条件</li>
<li>4.2.1 查询条件
"$lt", "$lte", "$gt", "$gte", "$ne" 分别对应&lt;, &lt;=, >, >=, !=

<pre><code>mongo&gt; db.users.find({"age": {"$gte": 18, "$lte": 30}})
mongo&gt; db.users.find({"registered": {"$lt": "01/01/2007"}})
mongo&gt; db.users.find({"username": {"$ne": "joe"}})
</code></pre></li>
<li>4.2.2 OR查询
"$in"可以用来查询一个键的多个值, "$or"用来完成多个键值的任意给定值

<pre><code>db.raffle.find({"ticket_no": {"$in": [725, 542, 390]}})
db.raffle.find({"user_id": {"$in": [12345, "joe"]}})
{ticket_no" {"$in": [725]}} == {ticket_no: 725}
</code></pre>

"$nin"返回与数组中所有条件都不匹配的文档

<pre><code>db.raffle.find({"ticket_no": {"$nin": [725, 542, 390]}})
db.raffle.find({"$or": [{"ticket_no": 725}, {"winner": true}]})
db.raffle.find({"$or": [{"ticket_no": {"$in": [725, 542, 390]}}, {"winner": true}]})
</code></pre></li>
<li>4.2.3 $not

<pre><code>db.users.find({"id_num": {"$mod": [5, 1]}})
db.users.find({"id_num": {"$not": {"$mod": [5, 1]}}})
</code></pre></li>
<li>4.2.4 条件语句的规则</li>
<li>一个键可以有多个条件, 但一个键盘不能对应多个更新修改器

<pre><code>db.users.find({"age": {"$lt": 30, "$gt": 20}})
</code></pre></li>
<li>4.3 特定于类型的查询</li>
<li>4.3.1 null</li>
<li>null不仅仅匹配自身, 而且匹配"不存在的". 返回缺少这个键的所有文档

<pre><code>db.c.find({"z": null})
db.c.find({"z": {"$in": [null], "$exists": true}})
</code></pre></li>
<li>4.3.2 正则表达式</li>
<li>MongoDB使用PCRE库匹配正则表达式

<pre><code># 忽略大小写
db.users.find({"name": /joe/i})
db.users.find({"name": /joe?/i})
</code></pre></li>
<li>4.3.3 查询数组

<pre><code>db.food.insert({"fruit": ["apple", "banana", "peach"]})     
db.food.find({"fruit": "banana"})
</code></pre></li>
<li>1 $all</li>
<li>通过多个元素匹配数组

<pre><code>db.food.insert({"_id": 1, "fruit": ["apple", "banana", "peach"]}) 
db.food.insert({"_id": 2, "fruit": ["apple", "kumquat", "orange"]}) 
db.food.insert({"_id": 3, "fruit": ["cherry", "banana", "apple"]}) 
# 查找既有"apple"又有"banana"的文档
db.food.find({"fruit": {"$all": ["apple", "banana"]}})
db.food.find({"fruit": ["apple", "banana", "peach"]})
# 查找数组指定位置的元素
db.food.find({"fruit.2": "peach"})
</code></pre></li>
<li>2 $size</li>
<li>查询指定长度的数组

<pre><code>db.food.find({"fruit": {"$size": 3}})
# "$size"不能与其他查询子句组合(比如"$gt"), 但可以通过在文档中添加一个"size"键实现, 但不能与"$addToSet"同时使用
db.food.update({"$push": {"fruit": "strawberry}})
db.food.update({"$push": {"fruit": "strawberry}, "$inc": {"size": 1}})
db.food.find({"size": {"$gt": 3}})
</code></pre></li>
<li>3 $slice操作符</li>
<li>返回数组的一个子集合

<pre><code># 返回前10条评论
db.blog.posts.find_one(criteria, {"comments": {"$slice": 10}])
# 返回最后10条评论
db.blog.posts.find_one(criteria, {"comments": {"$slice": -10}])
# 返回第24-33条评论
db.blog.posts.find_one(criteria, {"comments": {"$slice": 23,10}])
</code></pre></li>
<li>4.3.4 查询内嵌文档

<pre><code>db.people.insert({"name": {"first": "Joe", "last": "Schmoe"}, "age": 45})
# 查询名为Joe Schmoe的人
db.people.find({"name": {"first": "Joe", "last": "Schmoe"}})
# 使用点表示法查询更通用
db.people.find({"name.first": "Joe", "name.last": "Schmoe"})
# 正确的指定一组条件, 不用指定每个键, 要使用"$elemMatch"
db.blog.find({"comments": {"$elemMatch": {"author": "joe", "score": {"$gte": 5}}}})
</code></pre></li>
<li>4.4 $where查询

<pre><code># 如果文档中两个值相等, 则返回
db.foo.insert({"apple": 1, "banana": 6, "peach": 3})
db.foo.insert({"apple": 8, "spinach": 4, "watermelon": 4})
db.foo.find({"$where": "this.x + this.y == 10"})
# where查询比常规查询慢得多, 尽量避免使用.
</code></pre></li>
<li>4.5 游标</li>
<li>4.5.1 limit, skip和sort

<pre><code># limit指定是上限, 并非下限, 如果匹配结果不到3个, 则返回匹配数量的结果
db.c.find().limit(3)
# 略过前3个匹配的文档, 若匹配的文档少于3个, 则不会返回
db.c.find().skip(3)
# "username"升序, "age"降序
db.c.find().sort({"username": 1, "age": -1})
# 搜索mp3, 每页返回50个结果, 按价格降序
db.stock.find({"desc": "mp3"}).limit(50).sort({"price": -1})
# skip同样可以实现, 不过会导致性能问题, 应避免
db.stock.find({"desc": "mp3"}).limit(50).skip({"price": -1})
</code></pre></li>
</ul>

]]></content>
  </entry>
  
</feed>
